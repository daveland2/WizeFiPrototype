Categories
----------
income
expenses  (budget)
assets
insurance  (asset protection)
liabilities

Notes:
1. every category has one or more subcategories
2. every subcategory has one or more accounts
3. every account has one or more fields

Data Model in generic notation
==============================
category
    subcategory
        account
            fields
------------------
income
	income
		salary
			monthlyAmount
		tips
			monthlyAmount
		interest
			monthlyAmount
		dividends
			monthlyAmount
		rent
			monthlyAmount
		alimony
			monthlyAmount
expenses
	giving
		contributions
			monthlyAmount
		tithe
			monthlyAmount
	housing
		firstMortgage
			monthlyAmount
		secondMortgage
			monthlyAmount
		otherLienPayment
			monthlyAmount
		rent
			monthlyAmount
		homeOwnersInsurance
			monthlyAmount
		propertyTaxes
			monthlyAmount
		homeMaintenance
			monthlyAmount
		HOADues
			monthlyAmount
		housekeeping_Cleaning
			monthlyAmount
		water_Trash_Sewer
			monthlyAmount
		gas_Electricity
			monthlyAmount
	transporation
		payments
			monthlyAmount
		insurance
			monthlyAmount
		gas
			monthlyAmount
		maintenance
			monthlyAmount
		registration
			monthlyAmount
		RV_Payments
			monthlyAmount
		RV_Insurance
			monthlyAmount
		RV_Gas
			monthlyAmount
		RV_Maint
			monthlyAmount
		RV_Registration
			monthlyAmount
	food
		groceries
			monthlyAmount
		diningOut
			monthlyAmount
	health_insurance
		medicalPremium
			monthlyAmount
		dentalPremium
			monthlyAmount
		visionPremiums
			monthlyAmount
		medicalCopay_Deductables
			monthlyAmount
		prescriptions
			monthlyAmount
		orthodontist
			monthlyAmount
		lifeInsurance
			monthlyAmount
		disabilityInsurance
			monthlyAmount
	clothing
		clothing
			monthlyAmount
		laundry_Drycleaning
			monthlyAmount
	entertainment
		entertainment
			monthlyAmount
	miscellaneous
assets
	Bank Account
		Checking
			accountOwner
			description
			companyName
			accountValue
			minimumMonthlyPayment
			rate
		Savings
			monthlyAmount
			accountOwner
			description
			companyName
			accountValue
			minimumMonthlyPayment
			rate
	CD
		CD
			monthlyAmount
			accountOwner
			description
			companyName
			accountValue
			minimumMonthlyPayment
			rate
			maturityDate
	Taxable
		Brokerage
		Pension
	Tax-Advantaged
		IRA
		Roth IRA
			monthlyAmount
			accountOwner
			description
			companyName
			accountValue
			minimumMonthlyPayment
			employerContribution
			rate
		SEP IRA
		Simple IRA
			monthlyAmount
			accountOwner
			description
			companyName
			accountValue
			minimumMonthlyPayment
			employerContribution
			rate
		401(k)
		Roth 401(k)
		403(b)
		457
		Annuity
		H.S.A.
		College Education Fund
	Real Estate
	Personal

insurance
	Life
	    Term
		Whole
		Universal
		Variable
		Group
	Health
		Medical
		Dental
		Vision
	Disability
	    Disability
	Long Term Care
	    Long Term Care
	Home
	    Homeowners
	Auto
	    Auto
		Recreational Vehicle
	Other
		Umbrella
		E&O

liabilities
	Mortgage
		Fixed
		Adjustable
	Credit Card
		Fixed
		Adjustable
	Auto
		Fixed
		Adjustable
	Personal loan
		Fixed
		Adjustable
	Business loan
		Fixed
		Adjustable
	Other
		Fixed
		Adjustable

Object based JavaScript data structure
--------------------------------------
1. the data model is a nested object structure
2. attributes at the first nesting level define category objects
3. attributes at the second nesting level define subcategory objects
4. attributes at the third nesting level define account objects
5. attributes at the fourth nesting level define field objects
6. each field object contains the attributes "val" (gives value) and "inclusion" (indicates required, optional, or N/A)
7. at each appropriate level, a "label" attribute provides a user friendly name for a JavaScript attribute

Question: do we want to add a "label" attribute to field objects?  In particular, change from

monthlyAmount: {val:0, inclusion:'required'}

Data access notation:
monthlyAmount = dataModel['assets']['bankAccount']['savings']['monthlyAmount'].val;

to instead use

monthlyAmount: {label:'Monthly Amount', val:0, inclusion:'required'}

Data access notation:
monthlyAmountName = dataModel['assets']['bankAccount']['savings']['monthlyAmount'].label;
monthlyAmount     = dataModel['assets']['bankAccount']['savings']['monthlyAmount'].val;

dataModelObjects =
{
	income:
	{
		label: 'Income',
		income:
		{
			label: 'Income',
			salary:
			{
				label: 'Salary',
				monthlyAmount: {val:0, inclusion:'required'},
			},
			interest:
			{
				label: 'Interest',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			rent:
			{
				label: 'Rent',
				monthlyAmount: {val:0, inclusion:'required'}
			}
		}
	},
	expenses:
	{
		giving:
		{
			label: 'Giving',
			contributions:
			{
				label: 'Contributions',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			tithe:
			{
				label: 'Tithe',
				monthlyAmount: {val:0, inclusion:'required'}
			}
		},
		housing:
		{
			label: 'Housing',
			firstMortgage:
			{
				label: 'First Mortgage',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			secondMortgage:
			{
				label: 'Second Mortgage',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			otherLienPayment:
			{
				label: 'Other Lien Payment',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			rent:
			{
				label: 'Rent',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			homeOwnersInsurance:
			{
				label: 'Home Owners Insurance',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			propertyTaxes:
			{
				label: 'Property Taxes',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			homeMaintenance:
			{
				label: 'Home Maintenance',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			HOADues:
			{
				label: 'HOA Dues',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			housekeeping_Cleaning:
			{
				label: 'Housekeeping & Cleaning',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			water_Trash_Sewer:
			{
				label: 'Water/Trash/Sewer',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			gas_Electricity:
			{
				label: 'Gas & Electricity',
				monthlyAmount: {val:0, inclusion:'required'}
			}
		},
		transporation:
		{
			label: 'Transportation',
			payments:
			{
				label: 'Payments',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			insurance:
			{
				label: 'Insurance',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			gas:
			{
				label: 'Gas',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			maintenance:
			{
				label: 'Maintenance',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			registration:
			{
				label: 'Registration',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			RV_Payments:
			{
				label: 'RV Payments',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			RV_Insurance:
			{
				label: 'RV Insurance',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			RV_Gas:
			{
				label: 'RV Gas',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			RV_Maint:
			{
				label: 'RV Maint',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			RV_Registration:
			{
				label: 'RV Registration',
				monthlyAmount: {val:0, inclusion:'required'}
			}
		},
		food:
		{
			label: 'Food',
			groceries:
			{
				label: 'Groceries',
				monthlyAmount: {val:0, inclusion:'required'},
				field1: 'field1val',
				field2: 2
			},
			diningOut:
			{
				label: 'Dining Out',
				monthlyAmount: {val:0, inclusion:'required'}
			},
		},
		health_insurance:
		{
			label: 'Health Insurance',
			medicalPremium:
			{
				label: 'Medical Premium',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			dentalPremium:
			{
				label: 'Dental Premium',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			visionPremiums:
			{
				label: 'Vision Premiums',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			medicalCopay_Deductables:
			{
				label: 'Copay & Deductables',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			prescriptions:
			{
				label: 'Prescriptions',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			orthodontist:
			{
				label: 'Orthodontist',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			lifeInsurance:
			{
				label: 'Life Insurance',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			disabilityInsurance:
			{
				label: 'Disability Insurance',
				monthlyAmount: {val:0, inclusion:'required'}
			},
		},
		clothing:
		{
			label: 'Clothing',
			clothing:
			{
				label: 'Clothing',
				monthlyAmount: {val:0, inclusion:'required'}
			},
			laundry_Drycleaning:
			{
				label: 'Laundry/Dry Cleaning',
				monthlyAmount: {val:0, inclusion:'required'}
			},
		},
		entertainment:
		{
			label: 'Entertainment',
			entertainment:
			{
				label: 'Entertainment',
				monthlyAmount: {val:0, inclusion:'required'}
			}
		}
	},
	assets:
	{
		label: 'Assets',
		bankAccount:
		{
			label: 'Bank Account',
			checking:
			{
				label: 'Checking',
				accountOwner: {val:'', inclusion:'optional'},
				description: {val:'', inclusion:'required'},
				companyName: {val:'', inclusion:'optional'},
				accountValue: {val:0, inclusion:'required'},
				minimumMonthlyPayment: {val:0, inclusion:'optional'},
				rate: {val:0, inclusion:'optional'}
			},
			savings:
			{
				label: 'Savings',
				monthlyAmount: {val:100, inclusion:'required'},
				accountOwner: {val:'', inclusion:'optional'},
				description: {val:'', inclusion:'required'},
				companyName: {val:'', inclusion:'optional'},
				accountValue: {val:0, inclusion:'required'},
				minimumMonthlyPayment: {val:0, inclusion:'optional'},
				rate: {val:0, inclusion:'required'}
			}
		},
		taxAdvantaged:
		{
			label: 'Tax-Advantaged',
			rothIRA:
			{
				label: 'Roth IRA',
				monthlyAmount: {val:0, inclusion:'required'},
				accountOwner: {val:'', inclusion:'optional'},
				description: {val:'', inclusion:'required'},
				companyName: {val:'', inclusion:'optional'},
				accountValue: {val:0, inclusion:'required'},
				minimumMonthlyPayment: {val:0, inclusion:'optional'},
				employerContribution: {val:0, valType:'%', inclusion:'required'},
				rate: {val:0, inclusion:'required'}
			},
			simpleIRA:
			{
				label: 'Simple IRA',
				monthlyAmount: {val:0, inclusion:'required'},
				accountOwner: {val:'', inclusion:'optional'},
				description: {val:'', inclusion:'required'},
				companyName: {val:'', inclusion:'optional'},
				accountValue: {val:0, inclusion:'required'},
				minimumMonthlyPayment: {val:0, inclusion:'optional'},
				employerContribution: {val:0, valType:'%', inclusion:'required'},
				rate: {val:0, inclusion:'required'}
			}
		},
		CD:
		{
			label: 'CD',
			CD:
			{
				label: 'CD',
				monthlyAmount: {val:0, inclusion:'required'},
				accountOwner: {val:'', inclusion:'optional'},
				description: {val:'', inclusion:'required'},
				companyName: {val:'', inclusion:'optional'},
				accountValue: {val:0, inclusion:'required'},
				minimumMonthlyPayment: {val:0, inclusion:'optional'},
				rate: {val:0, inclusion:'required'},
				maturityDate: {val:'', inclusion:'required'},
			}
		}
	}
};  // dataModelObjects

Alternative notation where JavaScript attribure names are automatically generated:

Pros:
1. user never sees JavaScript attribute names

Cons:
1. A programmer does not know the attribute name for a given "user friendly name" (the label) of the item (build functions to map label to corresponding attribute?)

2. If user renamed a "standard" label, programming code could break.

3. Effectively, this mimics the array implementation, and raises all the issues of not knowing the array subscript of an item.

dataModelObjects =
{
	c03:
	{
		label: 'Assets',
		s01:
		{
			label: 'Bank Account',
			a01:
			{
				label: 'Checking',
				f01: {label: 'Account Owner', val:'', inclusion:'optional'},
				f02: {label: 'Description:, val:'', inclusion:'required'},
				f03: {label: 'Company Name, val:'', inclusion:'optional'},
				f04: {label: 'Account Value, val:'', inclusion:'required'},
				f05: {label: 'Minimum Monthly Payment, val:0, inclusion:'optional'},
				f06: {label: 'Growth Rate, val:0, inclusion:'optional'}
			},
		}
	}
}

Array based JavaScript data structure
-------------------------------------
1. the data model is an array of category objects
2. each category object contains a categoryName and an array of subcategory objects
3. each subcategory object contains a subcategoryName and an array of account objects
4. each account object contains an accountName and an array of field objects
5. each field object consists of an attribute name and an object that contains the attributes "val" (gives value) and "inclusion" (indicates required, optional, or N/A)

Question: do we want to add a "label" attribute to field objects?  For example, change from

fields:
[
	{monthlyAmount: {val:200, inclusion:'required'}},
	{accountOwner: {val:'', inclusion:'optional'}},
	{description: {val:'', inclusion:'required'}},
]

Data access notation:
monthlyAmount = dataModelArrays[1]['subcategories'][0]['accounts'][1]['fields'][0]['monthlyAmount'].val;

to instead use

fields:
[
	{
		fieldName: 'Monthly Amount',
		field: {monthlyAmount: {val:200, inclusion:'required'}}
	},
	{
		fieldName: 'Account Owner',
		field: {accountOwner: {val:'', inclusion:'optional'}}
	},
	{
		fieldName: 'Description',
		field: {description: {val:'', inclusion:'required'}}
	}
]

Data access notation:
monthlyAmountName = dataModel[0]['subcategories'][0]['accounts'][0]['fields'][0].fieldName;
monthlyAmount     = dataModel[0]['subcategories'][0]['accounts'][0]['fields'][0].field['monthlyAmount'].val;

dataModelArrays =
[
	{
		categoryName: 'Income',
		subcategories:
		[
			{
				subcategoryName: 'Income',
				accounts:
				[
			    	{
			    		accountName: 'Salary',
			    		fields:
			    		[
			    			{monthlyAmount: {val:0, inclusion:'required'}}
			    		]
			    	},
			    		accountName: 'Interest',
			    		fields:
			    		[
			    			{monthlyAmount: {val:0, inclusion:'required'}}
			    		]
			    	}
			    ]
			}
		]
	},
	{
		categoryName: 'assets',
		subcategories:
		[
			{
				subcategoryName: 'Bank Account',
				accounts:
				[
			    	{
			    		accountName: 'Checking',
			    		fields:
			    		[
							{accountOwner: {val:'', inclusion:'optional'}},
							{description: {val:'', inclusion:'required'}},
							{companyName: {val:'', inclusion:'optional'}},
							{accountValue: {val:0, inclusion:'required'}},
							{minimumMonthlyPayment: {val:0, inclusion:'optional'}},
							{rate: {val:0, inclusion:'optional'}}
			    		]
			    	},
			    	{
			    		accountName: 'Savings',
			    		fields:
			    		[
							{monthlyAmount: {val:200, inclusion:'required'}},
							{accountOwner: {val:'', inclusion:'optional'}},
							{description: {val:'', inclusion:'required'}},
							{companyName: {val:'', inclusion:'optional'}},
							{accountValue: {val:0, inclusion:'required'}},
							{minimumMonthlyPayment: {val:0, inclusion:'optional'}},
							{rate: {val:0, inclusion:'required'}}
			    		]
			    	}
			    ]
		    },
			{
				subcategoryName: 'Tax Advantaged',
				accounts:
				[
			    	{
			    		accountName: 'Roth IRA',
			    		fields:
			    		[
							{monthlyAmount: {val:0, inclusion:'required'}},
							{accountOwner: {val:'', inclusion:'optional'}},
							{description: {val:'', inclusion:'required'}},
							{companyName: {val:'', inclusion:'optional'}},
							{accountValue: {val:0, inclusion:'required'}},
							{minimumMonthlyPayment: {val:0, inclusion:'optional'}},
							{rate: {val:0, inclusion:'required'}},
			    		]
			    	}
			    ]
			}
		]
	}
];  // dataModelArrays

Hybrid object and array based JavaScript data structure
-------------------------------------------------------
1. the data model is a nested object structure
2. attributes at the first nesting level define category objects
3. attributes at the second nesting level define subcategory objects
4. attributes at the third nesting level define an array of account objects
5. attributes at the fourth nesting level define field objects
6. each field object contains the attributes "label" (user friendly name), val" (gives value), and "inclusion" (indicates required, optional, or N/A)
7. at each appropriate level, object items contain a "label" attribute that provides a user friendly name for a JavaScript attribute
8. at the "accounts" level, the "accountName" attribute contains the user friendly name


// the following combines the object and array approaches
// categories, subcategories, and fields are objects, whereas accounts is an array
dataModelHybrid =
{
	income:
	{
		label: 'Income',
		income:
		{
			label: 'Income',
			accounts:
			[
				{
					accountName: 'Salary',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'}
				},
				{
					accountName: 'Interest',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'}
				},
				{
					accountName: 'Rent',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'}
				}
			]
		}
	},
	assets:
	{
		label: 'Assets',
		bankAccount:
		{
			label: 'Bank Account',
			accounts:
			[
				{
					accountName: 'Bob Checking',
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
					description: {label: 'Description', val:'', inclusion:'required'},
					companyName: {label: 'Company Name', val:'', inclusion:'optional'},
					accountValue: {label: 'Account Value', val:'', inclusion:'required'},
					minimumMonthlyPayment: {label: 'Minimum Monthly Payment', val:0, inclusion:'optional'},
					rate: {label: 'Rate', val:0, inclusion:'optional'}
				},
				{
					accountName: 'Mary Checking',
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
					description: {label: 'Description', val:'', inclusion:'required'},
					companyName: {label: 'Company Name', val:'', inclusion:'optional'},
					accountValue: {label: 'Account Value', val:0, inclusion:'required'},
					minimumMonthlyPayment: {label: 'Minimum Monthly Payment', val:0, inclusion:'optional'},
					rate: {label: 'Rate', val:0, inclusion:'optional'}
				},
				{
					accountName: 'Bob Savings',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
					description: {label: 'Description', val:'', inclusion:'required'},
					companyName: {label: 'Company Name', val:'', inclusion:'optional'},
					accountValue: {label: 'Account Value', val:0, inclusion:'required'},
					minimumMonthlyPayment: {label: 'Minimum Monthly Payment', val:0, inclusion:'optional'},
					rate: {label: 'Rate', val:0, inclusion:'optional'}
				},
				{
					accountName: 'Mary Savings',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
					description: {label: 'Description', val:'', inclusion:'required'},
					companyName: {label: 'Company Name', val:'', inclusion:'optional'},
					accountValue: {label: 'Account Value', val:0, inclusion:'required'},
					minimumMonthlyPayment: {label: 'Minimum Monthly Payment', val:0, inclusion:'optional'},
					rate: {label: 'Rate', val:0, inclusion:'optional'}
				}

			]
		},
		taxAdvantaged:
		{
			label: 'Tax-Advantaged',
			accounts:
			[
				{
					accountName: 'Roth IRA',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
					description: {label: 'Description', val:'', inclusion:'required'},
					companyName: {label: 'Company Name', val:'', inclusion:'optional'},
					accountValue: {label: 'Account Value', val:0, inclusion:'required'},
					minimumMonthlyPayment: {label: 'Minimum Monthly Payment', val:0, inclusion:'optional'},
					rate: {label: 'Rate', val:0, inclusion:'optional'}
				},
				{
					accountName: 'Simple IRA',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
					description: {label: 'Description', val:'', inclusion:'required'},
					companyName: {label: 'Company Name', val:'', inclusion:'optional'},
					accountValue: {label: 'Account Value', val:0, inclusion:'required'},
					minimumMonthlyPayment: {label: 'Minimum Monthly Payment', val:0, inclusion:'optional'},
					rate: {label: 'Rate', val:0, inclusion:'optional'}
				}
			]
		}
	}
};  // dataModelHybrid

Notes:
1. Consider using "type name" rather than the generic "accounts" property for the name of the array of attributes.  This would make it possible to access an account by its "type".  For example:

instead of:

	assets:
	{
		label: 'Assets',
		bankAccount:
		{
			label: 'Bank Account',
			accounts:
			[
				{
					accountName: 'Bob Checking',
					accountValue: {label: 'Account Value', val:0, inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
				},
				{
					accountName: 'Mary Checking',
					accountValue: {label: 'Account Value', val:0, inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
				},
				{
					accountName: 'Bob Savings',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'},
					accountValue: {label: 'Account Value', val:'', inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
				},
				{
					accountName: 'Mary Savings',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'},
					accountValue: {label: 'Account Value', val:'', inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
				}
			]
		},


instead use:

	assets:
	{
		label: 'Assets',
		bankAccount:
		{
			label: 'Bank Account',
			checking:
			[
				{
					accountName: 'Bob Checking',
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
				},
				{
					accountName: 'Mary Checking',
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
				}
			],
			savings:
			[
				{
					accountName: 'Bob Savings',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
				},
				{
					accountName: 'Mary Savings',
					monthlyAmount: {label: 'Monthly Amount', val:0, inclusion:'required'},
					accountOwner: {label: 'Account Owner', val:'', inclusion:'optional'},
				}
			]

		},

Notation for accessing data values
----------------------------------

object based access to information in assets category
-----------------------------------------------------
categoryName    = dataModelObjects['assets'].label;
subcategoryName = dataModelObjects['assets']['bankAccount'].label;
accountName     = dataModelObjects['assets']['bankAccount']['savings'].label;
monthlyAmount   = dataModelObjects['assets']['bankAccount']['savings']['monthlyAmount'].val;

General object pattern for access by attribute names:
dataModel[category][subcategory][account][field].val

Note: category, subcategory, account, and field are strings whose value is a JavaScript attribute name.

General object pattern for access by "label" (name of item):
dataModel[catatr(catnam)][subatr(subnam)][actatr(actnam)][fldatr(fldnam)].val

item                                 description
-----------------------------------  --------------------------------------------------
catatr(catnam)                       function that maps catnam to category attribute
subatr(catnam,subnam)                function that maps subnam to subcategory attribute
actatr(catnam,subnam,actnam)         function that maps actnam to account attribute
fldatr(catnam,subnam,actnam,fldnam)  function that maps fldnam to field attribute

(note: the last 3 functions need arguments to refine the scope of name mapping)


array based access to information in assets category
----------------------------------------------------
categoryName    = dataModelArrays[1]['categoryName'];
subcategoryName = dataModelArrays[1]['subcategories'][0]['subcategoryName'];
accountName     = dataModelArrays[1]['subcategories'][0]['accounts'][1]['accountName'];
monthlyAmount   = dataModelArrays[1]['subcategories'][0]['accounts'][1]['fields'][0]['monthlyAmount'].val;

General array pattern for access by index:
dataModelArrays[catndx]['subcategories'][subndx]['accounts'][actndx]['fields'][fldndx]['monthlyAmount'].val;

item    description
------  -----------
catndx  subscript of desired category in categories array
subndx  subscript of desired subcategory in subcategories array
actndx  subscript of desired account in accounts array
fldndx  subscript of desired field in fields array

General array pattern for access by "label" (name of item):
dataModelArrays[cndx(catnam)]['subcategories'][sndx(subnam)]['accounts'][andx(actnam)]['fields'][fndx(catnam)]['monthlyAmount'].val;

item                               description
------------                       -----------
cndx(catnam)                       function that maps catnam to catndx
sndx(catnam,subnam)                function that maps subnam to subndx
andx(catnam,subnam,actnam)         function that maps actnam to actndx
fndx(catnam,subnam,actnam,catnam)  function that maps fldnam to fldndx

(note: the last 3 functions need arguments to refine the scope of name mapping)

hybrid object and array based access to information in assets category
----------------------------------------------------------------------
categoryName    = dataModelHybrid['assets'].label;
subcategoryName = dataModelHybrid['assets']['bankAccount'].label;
accountName     = dataModelHybrid['assets']['bankAccount'].accounts[2].accountName;
fieldName       = dataModelHybrid['assets']['bankAccount'].accounts[2]['monthlyAmount'].label;
monthlyAmount   = dataModelHybrid['assets']['bankAccount'].accounts[2]['monthlyAmount'].val;

General pattern for access by hybrid approach:
dataModel[category][subcategory].accounts[actndx][field].val

Notes:
1. category, subcategory, and field are strings whose value is a JavaScript attribute name.
2. actndx is the subscript of the desired account in the accounts array

**********************************************************************************

Rough notes
===========

Notes:

1. The accounts of some categories (perhaps all accounts) need to have a "type identifier".  For example, each of the following accounts should have type "checking":

dataModelObjects['assets']['bankAccount']['checking'].label = 'Bob Checking'
dataModelObjects['assets']['bankAccount']['checking2'].label = 'Mary Checking'

as shown below:

dataModelObjects['assets']['bankAccount']['checking'].type = 'checking'
dataModelObjects['assets']['bankAccount']['checking2'].type = 'checking'

and each of the following should have type "savings":

dataModelObjects['assets']['bankAccount']['savings'].label = 'Bob Savings'
dataModelObjects['assets']['bankAccount']['savings2'].label = 'Mary Savings'
dataModelObjects['assets']['bankAccount']['savings3'].label = 'Emergency Savings'

as shown below:

dataModelObjects['assets']['bankAccount']['savings'].type = 'savings'
dataModelObjects['assets']['bankAccount']['savings2'].type = 'savings'
dataModelObjects['assets']['bankAccount']['savings3'].type = 'savings'


2. The following data structure would help manage the account "type" information:

accountTypes =
{
	income:
	{
		... (TBA)
	}
}

3. Relational database view of the data:

category  subcategory  account  accountType  field  inclusion  val
--------  -----------  -------  -----------  -----  ---------  ---

4. Analysis of the fundamental types of field patterns for an account:

export const fieldSettings =
[
	{
		fieldPattern: 'NNNNRNNNNN',
		monthlyAmount:
		{
			inclusion: 'required',
			initialValue: 0
		}
	},
]

export const fieldNameInfo =
[
	// NOTE: new additions MUST be made at the end of the list (if using pattern string information)
	{fieldName: 'accountOwner',         fieldDataType: 'string'},
	{fieldName: 'description',          fieldDataType: 'string'},
	{fieldName: 'companyName',          fieldDataType: 'string'},
	{fieldName: 'accountValue',         fieldDataType: 'number'},
	{fieldName: 'monthlyAmount',        fieldDataType: 'number'},
	{fieldName: 'minimumMonthlyAmount', fieldDataType: 'number'},
	{fieldName: 'employerContribution', fieldDataType: 'number'},
	{fieldName: 'growthRate',           fieldDataType: 'number'},
	{fieldName: 'coverageAmount',       fieldDataType: 'number'},
	{fieldName: 'maturityDate',         fieldDataType: 'string'}
]

function generateFieldsForPattern(pattern)
{
	let result = {};
	for (let i = 0; i < pattern.length; i++)
	{

	}
}   // generateFieldsForPattern

pattern = 'ORORNRNRNN';
result = generateFieldsForPattern(pattern);
console.log(prettyPrint(JSON.stringify(result)));
output:
...

inclusion
---------
R = required
O = optional
N = N/A (not applicable)

D  accountOwner
E  description
F  companyName
G  accountValue
H  monthlyAmount
I  minimumMonthlyAmount
J  employerContribution
K  growthRate
L  coverageAmount
M  maturityDate

Note: letter codes D through M are from column identification in the fields tab of spreadsheet from Jeff
https://docs.google.com/spreadsheets/d/1GV_wirMlrqhycDoR78ZSPI2pGaiZ46bJ3GF3zV4hSMw/edit#gid=353626187

   DEFGHIJKLM
   ----------
 1 NNNNRNNNNN
 2 ORORRONRNN
 3 OROROONONN
 4 ORORRONONR
 5 ORORRONONN
 6 ORORRORONN
 7 ORORROOONN
 8 ORORNNNNNN
 9 RRRRRNNRRN
10 RRRNRNNNRN
11 OOORRNOONN
12 RRRRRRNRNN
13 RRRRROORNO

Note: there are only 13 distinctive combinations of field names that are used.
