********************************************************************
https://github.com/jethfo/WizeFi  (github repository for WizeFi app)
https://github.com/daveland2/WizeFiPrototype  (github repository for WizeFiPrototype app)
https://xd.adobe.com/view/d14cabfe-32fd-4e7a-96ae-a863ead72b85/  (wire frames for WizeFi app)
https://docs.google.com/spreadsheets/d/1kiGZexHNYjKBJnK8qD8kPnrKGBsZ-aoA_OQsB_lf6eM/edit?ts=58d18dcb#gid=0  (screen info spreadsheet)
https://docs.google.com/spreadsheets/d/1GV_wirMlrqhycDoR78ZSPI2pGaiZ46bJ3GF3zV4hSMw/edit#gid=353626187  (WizeFi Worksheet with Categories, Subcategories and Fields)
https://drive.google.com/drive/folders/0B29JDIBG6cIuVWllODdqOEJPYnM
https://persistentendeavors.com/brickwire/MoneyOrganizer/tests/test17/WizeFiPrototype/dist/
********************************************************************
https://angular.io/docs/ts/latest/guide/architecture.html
ARCHITECTURE OVERVIEW
The basic building blocks of Angular applications


Angular is a framework for building client applications in HTML and either JavaScript or a language like TypeScript that compiles to JavaScript.

The framework consists of several libraries, some of them core and some optional.

You write Angular applications by composing HTML templates with Angularized markup, writing component classes to manage those templates, adding application logic in services, and boxing components and services in modules.

Then you launch the app by bootstrapping the root module. Angular takes over, presenting your application content in a browser and responding to user interactions according to the instructions you've provided.

The architecture diagram above identifies the eight main building blocks of an Angular application:

Modules
Components
Templates
Metadata
Data binding
Directives
Services
Dependency injection
********************************************************************
https://vsavkin.com/the-core-concepts-of-angular-2-c3d6cbe04d04#.lcc51p1k1
********************************************************************
https://angular.io/docs/ts/latest/
********************************************************************
https://angular.io/docs/ts/latest/guide/ngmodule.html

We boot the root module to launch the app; we import a feature module to extend the app.
********************************************************************
https://scotch.io/tutorials/angular-2-http-requests-with-observables
(sample code for Angular app)
********************************************************************
https://www.tutorialspoint.com/angular2/
********************************************************************
http://teropa.info/blog/2015/06/09/transclusion.html
A Guide To Transclusion in AngularJS
********************************************************************
https://www.infoq.com/articles/Angular2-TypeScript-High-Level-Overview

Angular 2 and TypeScript - A High Level Overview

AngularJS is by far the most popular JavaScript framework available today for creating web applications. And now Angular 2 and TypeScript are bringing true object oriented web development to the mainstream, in a syntax that is strikingly close to Java 8.

According to Google engineering director Brad Green, 1.3 million developers use AngularJS and 300 thousand are already using the soon to be released Angular 2. After working with Angular 2 for the last 10 months I believe its impact on the JavaScript community will rival that of the Spring framework on Java.

In this article I’ll provide a high-level overview of the Angular 2 framework.

At the end of 2014 Google announced that Angular 2 would be a complete rewrite of AngularJS, and they even created a new language “AtScript” that was meant to be used for writing Angular 2 applications.

But then Microsoft agreed to add support for decorators (a.k.a. annotations) to their TypeScript language (a strict superset of JavaScript), and so that emerged as the language for the development of the Angular 2 framework itself, and the recommended language for developing applications using the AngularJS framework.

You can also develop Angular 2 apps in JavaScript (both ECMAScript 5 and 6) and in Dart.

In addition, the Angular team integrated yet another Microsoft product - the RxJS library of reactive JavaScript extensions, into the Angular 2 framework.

Angular 2 is not an MVC framework, but rather a component-based framework. In Angular 2 an application is a tree of loosely coupled components.
********************************************************************
http://www.tutorialspoint.com/angular2/
********************************************************************
https://www.tutorialspoint.com/angular2/angular2_hello_world.htm

(code for Hellow World sample Angular 2 program)
********************************************************************
http://onehungrymind.com/build-a-simple-website-with-angular-2/
********************************************************************
https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html

Numerous examples of Angular 1 vs Angular 2 coding conventions.
********************************************************************
TypeScript is a free and open-source programming language developed and maintained by Microsoft. It is a strict superset of JavaScript, and adds optional static typing and class-based object-oriented programming to the language.
********************************************************************
https://github.com/Microsoft/TypeScript/blob/master/doc/spec.md#11.3.2

TypeScript grammar definitions
********************************************************************
https://dzone.com/articles/typed-front-end-with-angular-2

TypeScript has the following features:
Generics
Lambdas
RxJS objects

The combination of Angular2 with TypeScript provides a big opportunity in object oriented programming in the frontend. The declarative nature makes it much clearer.
********************************************************************
https://davidwalsh.name/typescript
TypeScript, WTF?!

I remember hearing the announcement of TypeScript from Microsoft and immediately dismissed it. I generally did that with most things from Microsoft. They were in my eyes, like a lot of large software enterprises, a good place to crush innovation and focus on brand and marketing. At the time, I was a fairly senior IT manger by day, and closet Dojo committer by night. I had an endless stream of software companies who had solutions to my problems, no matter what my problem was and on the surface, I thought TypeScript was another way to tie enterprises into a Microsoft roadmap.

I was totally wrong.
********************************************************************
https://github.com/Microsoft/TypeScript/wiki
********************************************************************
https://cmatskas.com/getting-started-with-typescript-and-sublime-text/
(discussion of language specification and features)
********************************************************************
http://stackoverflow.com/questions/18961203/typescript-any-vs-object

When you write something like this

var a: any;
var b: Object;
var c: {};

a has no interface, it can be anything, the compiler knows nothing about its members so minimal type checking is done when accessing/assigning both to itself and its members. Basically, you're telling the compiler to "back off, I know what I'm doing, so just trust me";

b has the Object interface, so ONLY the members defined in that interface are available for b. It's still JavaScript, so everything extends Object;

c extends Object, like anything else in TypeScript, but add no members. Since type compatibility in TypeScript is based on structural subtyping, not nominal subtyping, c ends up being the same as b because they have the same interface: the Object interface.
********************************************************************
http://stackoverflow.com/questions/13142635/how-can-i-create-an-object-based-on-an-interface-file-definition-in-typescript

I think you have basically five different options to do so. Choosing among them could be easy depending on the goal you would like to achieve.

The best way in most of the cases to use a class and instantiate it, because you are using TypeScript to apply type checking.

interface IModal {
    content: string;
    form: string;
    //...

    //Extra
    foo: (bar: string): void;
}

class Modal implements IModal {
    content: string;
    form: string;

    foo(param: string): void {
    }
}
Even if other methods are offering easier ways to create an object from an interface you should consider splitting your interface apart, if you are using your object for different matters, and it does not cause interface over-segregation:

interface IBehaviour {
    //Extra
    foo(param: string): void;
}

interface IModal extends IBehaviour{
    content: string;
    form: string;
    //...
}
On the other hand, for example during unit testing your code (if you may not applying separation of concerns frequently), you may be able to accept the drawbacks for the sake of productivity. You may apply other methods to create mocks mostly for big third party *.d.ts interfaces. And it could be a pain to always implement full anonymous objects for every huge interface.

On this path your first option is to create an empty object:

 var modal = <IModal>{};
Secondly to fully realise the compulsory part of your interface. It can be useful whether you are calling 3rd party JavaScript libraries, but I think you should create a class instead, like before:

var modal: IModal = {
    content: '',
    form: '',
    //...

    foo: (param: string): void => {
    }
};
Thirdly you can create just a part of your interface and create an anonymous object, but this way you are responsible to fulfil the contract

var modal: IModal = <any>{
    foo: (param: string): void => {

    }
};
Summarising my answer even if interfaces are optional, because they are not transpiled into JavaScript code, TypeScript is there to provide a new level of abstraction, if used wisely and consistently. I think, just because you can dismiss them in most of the cases from your own code you shouldn't.
********************************************************************
https://www.typescriptlang.org/docs/handbook/functions.html

We can fix this by making sure the function is bound to the correct this before we return the function to be used later. This way, regardless of how it’s later used, it will still be able to see the original deck object. To do this, we change the function expression to use the ECMAScript 6 arrow syntax. Arrow functions capture the "this" where the function is created rather than where it is invoked:

let deck = {
    suits: ["hearts", "spades", "clubs", "diamonds"],
    cards: Array(52),
    createCardPicker: function() {
        // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here
        return () => {
            let pickedCard = Math.floor(Math.random() * 52);
            let pickedSuit = Math.floor(pickedCard / 13);

            return {suit: this.suits[pickedSuit], card: pickedCard % 13};
        }
    }
}

let cardPicker = deck.createCardPicker();
let pickedCard = cardPicker();

alert("card: " + pickedCard.card + " of " + pickedCard.suit);

Even better, TypeScript will warn you when you make this mistake if you pass the --noImplicitThis flag to the compiler. It will point out that this in this.suits[pickedSuit] is of type any.
********************************************************************
https://basarat.gitbooks.io/typescript/content/docs/arrow-functions.html

Arrow Function Danger

In fact if you want this to be the calling context you should not use the arrow function. This is the case with callbacks used by libraries like jquery, underscore, mocha and others. If the documentation mentions functions on this then you should probably just use a function instead of a fat arrow. Similarly if you plan to use arguments don't use an arrow function.
********************************************************************
https://angular.io/docs/ts/latest/guide/router.html

ROUTING & NAVIGATION
********************************************************************
https://blogs.msdn.microsoft.com/typescript/2015/06/05/developing-in-typescript-on-a-mac-with-sublime/
********************************************************************
http://walkercoderanger.com/blog/2014/02/typescript-isnt-the-answer/

I conclude that TypeScript is not the answer. Or perhaps it’s more accurate to say it is the answer to a different problem. If you love JavaScript, warts and all, but wish it had classes, modules, interfaces and static typing then TypeScript is the answer. My prediction is that in time people will come to realize TypeScript doesn’t eliminate the JavaScript minefield and only makes it more confusing by providing the illusion of safety. TypeScript will become just another tool along the web development roadside used by a niche market of developers.
********************************************************************
http://orizens.com/wp/topics/migrating-a-component-to-angular-2-from-angular-1-x-es2015/

(sample code showing Angular 1 and Anguar 2 versions of code)
********************************************************************
https://en.wikipedia.org/wiki/AWS_Lambda

AWS Lambda
From Wikipedia, the free encyclopedia
AWS Lambda is an event-driven, serverless computing platform provided by Amazon as a part of the Amazon Web Services. It is a compute service that runs code in response to events and automatically manages the compute resources required by that code. It was introduced in 2014.[1]
The purpose of Lambda, as compared to AWS EC2, is to simplify building smaller, on-demand applications that are responsive to events and new information. AWS targets starting a Lambda instance within milliseconds of an event. Node.js, Python, Java and C# through .NET Core are all officially supported as of 2016, and other languages can be supported via call-outs. However, some runtimes, such as the Java Virtual Machine, may be slower than others to start.
Unlike Google App Engine, the Platform as a Service offering from Google, AWS Lambda supports securely running native Linux executables via calling out from a supported runtime such as Node.js.[2] For example, Haskell code can be run on Lambda,[3] something that has never been possible on App Engine.

AWS Lambda was originally designed for use cases such as image upload, responding to website clicks or reacting to sensor readings from an IoT connected device. AWS Lambda can also be used to automatically provision back-end services triggered by custom HTTP requests, and "spin down" such services when not in use, to save resources. These custom HTTP requests are configured in AWS API Gateway, which can also handle authentication and authorization in conjunction with AWS Cognito.
Unlike Amazon EC2, which is priced by the hour, AWS Lambda is metered in increments of 100 milliseconds. Usage amounts below a documented threshold fall within the AWS Lambda free tier - which does not expire 12 months after account signup, unlike the free tier for some AWS services.
********************************************************************
http://docs.aws.amazon.com/lambda/latest/dg/welcome.html

What Is AWS Lambda?

AWS Lambda is a compute service that lets you run code without provisioning or managing servers. AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second. You pay only for the compute time you consume - there is no charge when your code is not running. With AWS Lambda, you can run code for virtually any type of application or backend service - all with zero administration. AWS Lambda runs your code on a high-availability compute infrastructure and performs all of the administration of the compute resources, including server and operating system maintenance, capacity provisioning and automatic scaling, code monitoring and logging. All you need to do is supply your code in one of the languages that AWS Lambda supports (currently Node.js, Java, C# and Python).

Are You a First-time User of AWS Lambda?

If you are a first-time user of AWS Lambda, we recommend that you read the following sections in order:

Read the product overview and watch the introductory video to understand sample use cases. These resources are available on the AWS Lambda webpage.
Read the "How It Works" section of this guide. This section introduces various AWS Lambda components you work with to create an end-to-end experience. For more information, see How It Works.

Review the “Lambda Functions” section of this guide. To understand the programming model and deployment options for a Lambda function there are core concepts you should be familiar with. This section explains these concepts and provides details of how they work in different languages that you can use to author your Lambda function code. For more information, see Lambda Functions.

Try the console-based Getting Started exercise. The exercise provides instructions for you to create and test your first Lambda function using the console. You also learn about the console provided blueprints to quickly create your Lambda functions. For more information, see Getting Started.

Read the "Building Applications with AWS Lambda" section of this guide. This section introduces various AWS Lambda components you work with to create an end-to-end experience. For more information, see Building applications with AWS Lambda.
********************************************************************
https://www.datawire.io/3-reasons-aws-lambda-not-ready-prime-time/
3 Reasons AWS Lambda Is Not Ready for Prime Time (February 9, 2016)

Chad Lung recently put together a tutorial about writing a Python microservice using AWS Lambda, reachable via HTTP. It’s well written, it’s cogent, and it does a great job of demonstrating how Lambda is cool.

If you’re not familiar with Lambda, it’s a new AWS feature that’s meant to give you a way to quickly write a service and let Amazon worry about all the boilerplate junk that normally goes with standing your service up in a way that people can actually talk to it. You don’t configure subnets or instances or load balancers with Lambda: you just write some code and then tell Amazon to hook you up. It’s a pretty compelling promise.

When we at Datawire tried to actually use Lambda for a real-world HTTP-based microservice shortly before Lung’s tutorial came out, though, we found some uncool things that make Lambda not yet ready for the world we live in:

Lambda is a building block, not a tool
Lambda is not well documented
Lambda is terrible at error handling

Lung skips these uncool things, which makes sense because they’d make the tutorial collapse under its own weight, but you can’t skip them if you want to work in the real world. (Note that if you’re using Lambda for event handling within the AWS world, your life will be easier. But the really interesting case in the microservice world is Lambda and HTTP.)

------------

I was invited to talk to Amazon a few months back and mentioned that they were not addressing the architectural cross cutting concern (infoq.com/author/Owen-Rubel). I noted a lot of the same issues with Lambdas in the fact that they are self contained and cannot extend classes or libraries and are VERY redundant.

Also, everything has to go outside the DMZ to be accessed (ie your databases, services, etc) so IO is very slow.

The manager who I was speaking with told me it was NEVER meant for real API deployment and was only intended for 'small businesses' or people who needed a fast endpoint. I told him that was good because that about the only purpose it can serve.
********************************************************************
https://gigaom.com/2015/01/09/why-aws-lambda-is-a-masterstroke-from-amazon/

Why AWS Lambda is a Masterstroke from Amazon

The timing of Lambda’s launch could not be better. AWS stepped ahead of the curve with the product when the entire industry was agog over container technology, its impact on public cloud providers, and the increased competition from Microsoft and Google on core compute, storage, and database services. And Lambda might initially appear to be yet-another cloud service exposing compute, but as the following sections illustrate, it is definitely much more than that.

AWS Lambda offers the perfect middle ground  between IaaS (Infrasctucture as a Service) and PaaS (Platform as a service). It also effectively counters the growing threat of containers to its business by simplifying the task of running code in the cloud. It’s Amazon’s way of delivering a microservices framework far ahead of its competitors.

Currently, there are three ways of running code in AWS cloud: Amazon EC2, Amazon ECS, and AWS Elastic Beanstalk. EC2 is a full-blown IaaS while ECS is the hosted container environment. Finally, Elastic Beanstalk is a PaaS layer. AWS Lambda forms the fourth service with the capability to execute code in the cloud. But it’s unique in a sense that it is at the intersection of EC2, ECS, and Elastic Beanstalk.
********************************************************************
http://stackoverflow.com/questions/33659059/invoke-amazon-lambda-function-from-node-app

Since you are using a node.js server you can just invoke your lambda directly with the AWS JavaScript SDK(https://www.npmjs.com/package/aws-sdk). This way you don't have to worry about using API Gateway.

Invoking from your server is as simple as:

var AWS = require('aws-sdk');

// you shouldn't hardcode your keys in production! See http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html
AWS.config.update({accessKeyId: 'akid', secretAccessKey: 'secret'});

var lambda = new AWS.Lambda();
var params = {
  FunctionName: 'myImageProcessingLambdaFn', /* required */
  Payload: PAYLOAD_AS_A_STRING
};
lambda.invoke(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});
See the rest of the SDK docs here: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Lambda.html
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/browser-invoke-lambda-function-example.html
Invoking a Lambda Function in a Browser Script
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/browser-invoke-lambda-function-full.html

Invoking a Lambda Function Code

Here is the complete HTML and browser script for the slot machine example.

<!doctype html>
<html>
<head>
<meta charset="UTF-8">
<title>Emoji Slots</title>
<link href="emojislots.css" rel="stylesheet" type="text/css">
<script src="https://sdk.amazonaws.com/js/aws-sdk-2.7.20.min.js"></script>
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js"></script>
<script type="text/javascript">
   // Configure AWS SDK for JavaScript
   AWS.config.update({region: 'REGION'});
   AWS.config.credentials = new AWS.CognitoIdentityCredentials({IdentityPoolId: 'IDENTITY_POOL_ID'});

   var pullReturned = null;
   var slotResults;
   var isSpinning = false;

   // Prepare to call Lambda function
   var lambda = new AWS.Lambda({region: 'REGION', apiVersion: '2015-03-31'});
   var pullParams = {
      FunctionName : 'slotPull',
      InvocationType : 'RequestResponse',
      LogType : 'None'
   };

   function pullHandle() {
      if (isSpinning == false) {
         // Show the handle pulled down
         slot_handle.src = "lever-dn.png";
      }
   }

   function initiatePull() {
      // Show the handle flipping back up
      slot_handle.src = "lever-up.png";
      // Set all three wheels "spinning"
      slot_L.src = "spinningwheel.gif";
      slot_M.src = "spinningwheel.gif";
      slot_R.src = "spinningwheel.gif";
      // Set app status to spinning
      isSpinning = true;
      // Call the Lambda function to collect the spin results
      lambda.invoke(pullParams, function(err, data) {
         if (err) {
            prompt(err);
         } else {
            pullResults = JSON.parse(data.Payload);
            displayPull();
         }
      });
   }

   function displayPull() {
      isSpinning = false;
      if (pullResults.isWinner) {
         winner_light.visibility = visible;
      }
      $("#slot_L").delay(4000).attr("src", pullResults.leftWheelImage.file.S);
      $("#slot_M").delay(6500).attr("src", pullResults.midWheelImage.file.S);
      $("#slot_R").delay(9000).attr("src", pullResults.rightWheelImage.file.S);
   }

</script>
</head>
<body>
   <div id="appframe">

   <img id="slot_L" src="puppy.png" height="199" width="80" alt="slot wheel 1"/>
   <img id="slot_M" src="puppy.png" height="199" width="80" alt="slot wheel 2"/>
   <img id="slot_R" src="puppy.png" height="199" width="80" alt="slot wheel 3"/>
   <img id="winner_light" src="winner.png" height="48" width="247" alt="winner indicator"/>

   </div>
</body>
</html>
********************************************************************
http://stackoverflow.com/questions/33659059/invoke-amazon-lambda-function-from-node-app

Since you are using a node.js server you can just invoke your lambda directly with the AWS JavaScript SDK(https://www.npmjs.com/package/aws-sdk). This way you don't have to worry about using API Gateway.

Invoking from your server is as simple as:

var AWS = require('aws-sdk');

// you shouldn't hardcode your keys in production! See http://docs.aws.amazon.com/AWSJavaScriptSDK/guide/node-configuring.html
AWS.config.update({accessKeyId: 'akid', secretAccessKey: 'secret'});

var lambda = new AWS.Lambda();
var params = {
  FunctionName: 'myImageProcessingLambdaFn', /* required */
  Payload: PAYLOAD_AS_A_STRING
};
lambda.invoke(params, function(err, data) {
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});
********************************************************************
https://aws.amazon.com/blogs/compute/using-amazon-api-gateway-as-a-proxy-for-dynamodb/
********************************************************************
Code samples for invoking an AWS lambda function
(note: see the gateway-as-a-proxy-for-dynamodb link above for alternative approach)

client
======
<script src="https://sdk.amazonaws.com/js/aws-sdk-2.7.20.min.js"></script>
AWS.config.update({region: 'REGION'});
AWS.config.credentials = new AWS.CognitoIdentityCredentials({IdentityPoolId: 'IDENTITY_POOL_ID'});
var lambda = new AWS.Lambda({region: 'REGION', apiVersion: '2015-03-31'});
var params =
{
  FunctionName: 'slotPull',
  InvocationType: 'RequestResponse',
  LogType: 'None'
};
lambda.invoke(params, function(err, data)
{
     if (err)
     {
        prompt(err);
     }
     else
     {
        pullResults = JSON.parse(data.Payload);
        displayPull(pullResults);
     }
  });
}

server
======
var AWS = require('aws-sdk');
AWS.config.update({accessKeyId: 'akid', secretAccessKey: 'secret'});
var lambda = new AWS.Lambda();
var params =
{
  FunctionName: 'myImageProcessingLambdaFn', /* required */
  Payload: PAYLOAD_AS_A_STRING
};
lambda.invoke(params, function(err, data)
{
  if (err) console.log(err, err.stack); // an error occurred
  else     console.log(data);           // successful response
});
********************************************************************
https://gist.github.com/markusklems/1e7218d76d7583f1f7b3

// create an IAM Lambda role with access to dynamodb
// Launch Lambda in the same region as your dynamodb region
// (here: us-east-1)
// dynamodb table with hash key = user and range key = datetime

console.log('Loading event');
var AWS = require('aws-sdk');
var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

exports.handler = function(event, context) {
    console.log(JSON.stringify(event, null, '  '));
    dynamodb.listTables(function(err, data) {
      console.log(JSON.stringify(data, null, '  '));
    });
    var tableName = "chat";
    var datetime = new Date().getTime().toString();
    dynamodb.putItem({
        "TableName": tableName,
        "Item" : {
            "user": {"S": event.user },
            "date": {"S": datetime },
            "msg": {"S": event.msg}
        }
    }, function(err, data) {
        if (err) {
            context.done('error','putting item into dynamodb failed: '+err);
        }
        else {
            console.log('great success: '+JSON.stringify(data, null, '  '));
            context.done('K THX BY');
        }
    });
};

// sample event
//{
//  "user": "bart",
//  "msg": "hey otto man"
//}

-----------

Sweet guide, thanks.

If anybody's watching this after February 2015, use:

var doc = require('dynamodb-doc');
var dynamo = new doc.DynamoDB();

INSTEAD OF:

var AWS = require('aws-sdk');
var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

I spent a lot of time very confused because things werent working out because of this.

------------

A lot has been changed in the AWSDynamoDB for Lambda. Here is an working example:

console.log('Loading function');
var doc = require('dynamodb-doc');
var db = new doc.DynamoDB();
exports.handler = function(event, context)
{
     var username  = event.username;
     var email = event.email;
     var userId = event.userId;
    console.log(username + "," + email +","+ userId);
var tableName = "User";
var item = {
     "username":username,
     "email":  email,
     "userId": userId
};
 var params = {
     TableName:tableName,
     Item: item
 };
     console.log(params);
 db.putItem(params,function(err,data){
     if (err) console.log(err);
     else console.log(data);
 });
};

And the test event code
{
"username":"admin",
"email":"admin@admin.com",
"userId": "AD87S"
}

-------------

Hi guys, thanks to everyone that's contributed to this thread. It was helpful in getting things to work. I got writes to Dynamodb working using the Serverless framework. Link to gist below.

https://gist.github.com/martimatix/06481e1321ab99bf4a501705235b261f
********************************************************************
http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html

Overview

The document client simplifies working with items in Amazon DynamoDB by abstracting away the notion of attribute values. This abstraction annotates native JavaScript types supplied as input parameters, as well as converts annotated response data to native JavaScript types.

Marshalling Input and Unmarshalling Response Data

The document client affords developers the use of native JavaScript types instead of AttributeValues to simplify the JavaScript development experience with Amazon DynamoDB. JavaScript objects passed in as parameters are marshalled into AttributeValue shapes required by Amazon DynamoDB. Responses from DynamoDB are unmarshalled into plain JavaScript objects by the DocumentClient. The DocumentClient does not accept AttributeValues in favor of native JavaScript types.

Constructor Summary

new AWS.DynamoDB.DocumentClient(options) constructor
Creates a DynamoDB document client with a set of configuration options.

Method Summary

batchGet(params, callback)
Returns the attributes of one or more items from one or more tables by delegating to AWS.DynamoDB.batchGetItem().

batchWrite(params, callback)
Puts or deletes multiple items in one or more tables by delegating to AWS.DynamoDB.batchWriteItem().

createSet(list, options)
Creates a set of elements inferring the type of set from the type of the first element.

delete(params, callback)
Deletes a single item in a table by primary key by delegating to AWS.DynamoDB.deleteItem().

get(params, callback)
Returns a set of attributes for the item with the given primary key by delegating to AWS.DynamoDB.getItem().

put(params, callback)
Creates a new item, or replaces an old item with a new item by delegating to AWS.DynamoDB.putItem().

query(params, callback)
Directly access items from a table by primary key or a secondary index.

scan(params, callback)
Returns one or more items and item attributes by accessing every item in a table or a secondary index.

update(params, callback)
Edits an existing item's attributes, or adds a new item to the table if it does not already exist by delegating to AWS.DynamoDB.updateItem().

********************************************************************
https://gist.github.com/markusklems/f50aec9901e9c8a7332a

Short AWS lambda sample program that scans a dynamodb table

// create an IAM Lambda role with access to dynamodb
// Launch Lambda in the same region as your dynamodb region
// (here: us-east-1)
// dynamodb table with hash key = user and range key = datetime

console.log('Loading event');
var AWS = require('aws-sdk');
var dynamodb = new AWS.DynamoDB({apiVersion: '2012-08-10'});

exports.handler = function(event, context) {
    var tableName = "chat";
    dynamodb.scan({
        TableName : tableName,
        Limit : 10
    }, function(err, data) {
        if (err) {
            context.done('error','reading dynamodb failed: '+err);
        }
        for (var i in data.Items) {
            i = data.Items[i];
            console.log(i.user.S + ': '+ i.msg.S);
            context.done(null, "Ciao!");
        }
    });
};
********************************************************************
http://stackoverflow.com/questions/30739965/querying-dynamodb-with-lambda-does-nothing

Querying DynamoDB with Lambda does nothing
********************************************************************
http://stackoverflow.com/questions/35252815/how-to-access-dynamodb-from-aws-lambda-when-using-the-serverless-framework

How to access DynamoDB from AWS Lambda when using the Serverless Framework?

-----------

The solution is to set the iamRoleStatements to allow Lambda to access the DynamoDB resources.
********************************************************************
http://stackoverflow.com/questions/39224252/angular2-and-aws-lambda-how-to-load-data-before-rendering-the-component

Okay, I finally figured it out and it was actually super easy. I just had to put a Promise around the lambdaGetBp()-Method, or rather around the code inside it.

It now looks like this:

  lambdaGetBp(bpNumber: number){
      return new Promise((resolve, reject) => {          //HERE
        var lambda = new AWS.Lambda();
            var params = {
                FunctionName: 'readFromDynamoDb', /* required */
                Payload: JSON.stringify({
                    bpNumber : bpNumber
                })
            };
        lambda.invoke(params, function(err, data) {
                if (err) console.log(err, err.stack);    // an error occurred
                else {
                    var jsonObj = JSON.parse(data.Payload);
                    console.log(jsonObj);           // successful response
                    resolve(jsonObj);                    // AND HERE
                }
            });
        });
  }
and then call it like a normal promise in the ngOnInit()

this.lambdaGetBp(this.bpNumber).then(data => this.bp= data);********************************************************************
http://searchcloudcomputing.techtarget.com/definition/Infrastructure-as-a-Service-IaaS

Infrastructure as a Service (IaaS) is a form of cloud computing that provides virtualized computing resources over the Internet.  IaaS is one of three main categories of cloud computing services, alongside Software as a Service (SaaS) and Platform as a Service (PaaS).

Leading IaaS providers include Amazon Web Services (AWS), Windows Azure, Google Compute Engine, Rackspace Open Cloud, and IBM SmartCloud Enterprise.
********************************************************************
https://www.docker.com/what-docker

WHAT IS DOCKER?

Docker is the world's leading software containerization platform

PACKAGE YOUR APPLICATION INTO A STANDARDIZED UNIT FOR SOFTWARE DEVELOPMENT

Docker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries – anything that can be installed on a server. This guarantees that the software will always run the same, regardless of its environment.
********************************************************************
http://www.zdnet.com/article/what-is-docker-and-why-is-it-so-darn-popular/

What is Docker and why is it so darn popular? (August 4, 2014)

Docker, a new container technology, is hotter than hot because it makes it possible to get far more apps running on the same old servers and it also makes it very easy to package and ship programs. Here's what you need to know about it.

So why does everyone love containers and Docker? James Bottomley, Parallels‘ CTO of server virtualization and a leading Linux kernel developer, explained to me that VM hypervisors, such as Hyper-V, KVM, and Xen, all are "based on emulating virtual hardware. That means they’re fat in terms of system requirements."

Containers, however, use shared operating systems. That means they are much more efficient than hypervisors in system resource terms. Instead of virtualizing hardware, containers rest on top of a single Linux instance. This in turn means you can “leave behind the useless 99.9% VM junk, leaving you with a small, neat capsule containing your application,” said Bottomley.

Last, but by no means least, Docker containers are easy to deploy in a cloud. As Ben Lloyd Pearson wrote in opensource.com, "Docker has been designed in a way that it can be incorporated into most DevOps applications, including Puppet, Chef, Vagrant, and Ansible, or it can be used on its own to manage development environments. The primary selling point is that it simplifies many of the tasks typically done by these other applications. Specifically, Docker makes it possible to set up local development environments that are exactly like a live server, run multiple development environments from the same host that each have unique software, operating systems, and configurations, test projects on new or different servers, and allow anyone to work on the same project with the exact same settings, regardless of the local host environment."

In a nutshell, here's what Docker can do for you: It can get more applications running on the same hardware than other technologies; it makes it easy for developers to quickly create, ready-to-run containered applications; and it makes managing and deploying applications much easier. Put it all together and I can see why Docker is riding the hype cycle as fast as I can recall ever seeing an enterprise technology go. I just hope that it can live up to its promise, or there will be some really upset CEOs and CIOs out there.
********************************************************************
http://blog.scottlowe.org/2013/11/25/a-brief-introduction-to-linux-containers-with-lxc/

A Brief Introduction to Linux Containers with LXC

In this post, I’m going to provide a brief introduction to working with Linux containers via LXC. Linux containers are getting a fair amount of attention these days (perhaps due to Docker, which leverages LXC on the back-end) as a lightweight alternative to full machine virtualization such as that provided by “traditional” hypervisors like KVM, Xen, or ESXi.

Both full machine virtualization and containers have their advantages and disadvantages. Full machine virtualization offers greater isolation at the cost of greater overhead, as each virtual machine runs its own full kernel and operating system instance. Containers, on the other hand, generally offer less isolation but lower overhead through sharing certain portions of the host kernel and operating system instance. In my opinion full machine virtualization and containers are complementary; each offers certain advantages that might be useful in specific situations.

Now that you have a rough idea of what containers are, let’s take a closer look at using containers with LXC. I’m using Ubuntu 12.04.3 LTS for my testing; if you’re using something different, keep in mind that certain commands may differ from what I show you here.

Installing LXC is pretty straightforward, at least on Ubuntu. To install LXC, simply use apt-get:

apt-get install lxc

Once you have LXC installed, your next step is creating a container. To create a container, you’ll use the lxc-create command and supply the name of the container template as well as the name you want to assign to the new container:

lxc-create -t <template> -n <container name>
********************************************************************
https://aws.amazon.com/lambda/getting-started/

Getting Started

The best way to get started with AWS Lambda is to work through the Getting Started Guide, part of our technical documentation. Within a few minutes, you will be able to deploy and use an AWS Lambda function.
********************************************************************
http://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html

Using AWS Lambda with Amazon DynamoDB

You can use Lambda functions as triggers for your Amazon DynamoDB table. Triggers are custom actions you take in response to updates made to the DynamoDB table. To create a trigger, first you enable Amazon DynamoDB Streams for your table. Then, you write a Lambda function to process the updates published to the stream.
********************************************************************
https://medium.freecodecamp.com/angular-2-versus-react-there-will-be-blood-66595faafd51#.vloaxnyhb

Angular 2 versus React: There Will Be Blood

You’re Comparing Apples and Orangutans!

Sigh. Yes, Angular is a framework, React is a library. Some say this difference makes comparing them illogical. Not at all!

Choosing between Angular and React is like choosing between buying an off-the-shelf computer and building your own with off-the-shelf parts.

This post considers the merits of these two approaches. I compare React’s syntax and component model to Angular’s syntax and component model. This is like comparing an off-the-shelf computer’s CPU to a raw CPU. Apples to apples.

Showdown Summary

Angular 2 is a huge improvement over version 1. The new component model is simpler to grasp than v1’s directives, it supports isomorphic/universal rendering, and it uses a virtual DOM offering 3–10x improvements in performance. These changes make Angular 2 very competitive with React. There’s no denying that its full-featured, opinionated nature offers some clear benefits by reducing “JavaScript fatigue”.

However, Angular 2’s size and syntax give me pause. Angular’s commitment to HTML-centric design makes it complex compared to React’s simpler JavaScript-centric model. In React, you don’t learn framework-specific HTML shims like ngWhatever. You spend your time writing plain ‘ol JavaScript. That’s the future I believe in.

********************************************************************
https://docs.npmjs.com/getting-started/installing-node

Installing Node.js and updating npm

npm install npm@latest -g
********************************************************************
http://stackoverflow.com/questions/11284634/upgrade-nodejs-to-the-latest-version-on-mac-os

Upgrading via NPM
You can use the method described by @Mathias above or choose the following simpler method via the terminal.

sudo npm cache clean -f
sudo npm install -g n
sudo n stable
After which you may opt to confirm the upgrade

node -v
Your nodejs should have upgraded to the latest version. If you wish to upgrade to a specific one say v0.8.19 then instead of

sudo n stable
use

sudo n 0.8.19

-----------

You could install nvm and have multiple versions of Node.js installed.

curl https://raw.github.com/creationix/nvm/master/install.sh | sh
source ~/.nvm/nvm.sh
and then run:

nvm install 0.8.22  #(or whatever version of Node.js you want)
you can see what versions you have installed with :

nvm list
and you can change between versions with:

nvm use 0.8.22
The great thing about using NVM is that you can test different versions alongside one another. If different apps require different versions of Node.js, you can run them both.

------------

I use Node version manager (called n) for it.

npm install -g n
then

n latest
OR

n stable
********************************************************************
http://stackoverflow.com/questions/34381182/angular2-typescript-app-throws-404-on-components-when-js-extension-not-specified

(use of Angular demo app)

Contains the sample code from the "5 minutes quickstart demo from angular.io" as of December 2015.
********************************************************************
https://www.sitepoint.com/modular-javascript-systemjs-jspm/

Modular JavaScript: A Beginners Guide to SystemJS & jspm    (May 11, 2016)

ES6 brings a standard module syntax to JavaScript and a loader specification. This is a good step forward, however at the time of writing, there are no browsers that can natively load ES6 modules. This means that if you want to use modules today, you’ll need to use a module bundler.
********************************************************************
https://www.youtube.com/watch?v=_-CD_5YhJTA
(hour long video tutorial)
********************************************************************
https://www.youtube.com/watch?v=-zW1zHqsdyc
(hour long video tutorial)
illustrates use of API utility that returns sample test data (JSON placeholder)
illustrates numerous additions to the Angular quickstart app
********************************************************************
https://jsonplaceholder.typicode.com/

JSONPlaceholder

Fake Online REST API for Testing and Prototyping
********************************************************************
https://github.com/angular/quickstart

This repository holds the TypeScript source code of the angular.io quickstart, the foundation for most of the documentation samples and potentially a good starting point for your application.

It's been extended with testing support so you can start writing tests immediately.

This is not the perfect arrangement for your application. It is not designed for production. It exists primarily to get you started quickly with learning and prototyping in Angular

Clone this repo into new project folder (e.g., my-proj).

git clone https://github.com/angular/quickstart  my-proj

Install the npm packages described in the package.json and verify that it works:

cd my_proj
npm install
npm start
********************************************************************
https://angular.io/docs/ts/latest/guide/cheatsheet.html
********************************************************************
https://angular.io/docs/ts/latest/guide/template-syntax.html

(excellent discussion of HTML attribute vs. DOM property)
********************************************************************
http://stackoverflow.com/questions/37364973/angular-2-promise-vs-observable

Can some one please explain me promise vs observable in Angular 2?

-------------

Promises vs Observables

promise:
   returns a single value
   not cancellable
observable
   works with multiple values over time
   cancellable
   supports map, filter, reduce and similar operators
   proposed feature for ES 2016
   use Reactive Extensions (RxJS)
   an array whose items arrive asynchronously over time
********************************************************************
https://egghead.io/lessons/rxjs-rxjs-observables-vs-promises
(excellent video)
********************************************************************
https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/
(examples of syntax for using fat arrow function notation)
********************************************************************
https://blogs.msdn.microsoft.com/ie/2014/12/15/classes-in-javascript-exploring-the-implementation-in-chakra/?WT.mc_id=16547-DEV-sitepoint-article83

ES6 Classes
Many features in ES6 aim to reduce time writing code and increase expressiveness of common patterns in JavaScript. Because they do not add new fundamental capabilities to the runtime and essentially simplify the boilerplate code, these kinds of features are collectively referred to as ‘syntactic sugar’.

ES6 Classes in JavaScript is one such feature and remains one of the most commonly requested features on status.modern.ie.

To those of you familiar with object-oriented languages, classes should be a familiar concept. However classes in JavaScript are a little different from other languages. With ES5, class functionality is commonly implemented using functions, prototypes, and instances. For example:

/* ES5 code, without classes */
var Civilian = function Civilian(name) {
    this.name = name;
};
Civilian.prototype.danger = function () { console.log("Run away!"); };

var SuperHero = function(name, ability) {
    Civilian.call(this, name); // Call the super class constructor.
    this.ability = ability;
};
SuperHero.prototype = Object.create(Civilian.prototype);
SuperHero.prototype.constructor = SuperHero;
SuperHero.prototype.danger = function () { // Override the super class method.
    console.log("Never fear, " + this.name + " is here!");
    console.log(this.name + " uses " + this.ability + ". It's super effective.");
};

view rawes5-no-classes-impl.js hosted with ❤ by GitHub
By contrast, the ES6 version below is much more readable and concise. For programmers from a classical inheritance background, the functionality is easier to understand without in depth knowledge of how JavaScript’s prototypal inheritance model works.

/* ES6 code, with classes */
class Civilian {
    constructor(name) {
        this.name = name;
    }
    danger() {
        console.log("Run away!");
    }
};

class SuperHero extends Civilian {
    constructor(name, ability) {
      super(name); // Call the super class constructor
        this.ability = ability;
    }
    danger() { // Override the super class method
        console.log("Never fear, " + this.name + " is here!");
        console.log(this.name + " uses " + this.ability + ". It's super effective.");
    }
};

NOTE: there are no class variables in ES6 Javascript.  A class contains only functions.  By contrast, TypeScript does have class variables.
********************************************************************
https://www.typescriptlang.org/docs/handbook/generics.html

Hello World of Generics
To start off, let’s do the “hello world” of generics: the identity function. The identity function is a function that will return back whatever is passed in. You can think of this in a similar way to the echo command.

Without generics, we would either have to give the identity function a specific type:

function identity(arg: number): number {
    return arg;
}
Or, we could describe the identity function using the any type:

function identity(arg: any): any {
    return arg;
}
While using any is certainly generic in that will accept any and all types for the type of arg, we actually are losing the information about what that type was when the function returns. If we passed in a number, the only information we have is that any type could be returned.

Instead, we need a way of capturing the type of the argument in such a way that we can also use it to denote what is being returned. Here, we will use a type variable, a special kind of variable that works on types rather than values.

function identity<T>(arg: T): T {
    return arg;
}
We’ve now added a type variable T to the identity function. This T allows us to capture the type the user provides (e.g. number), so that we can use that information later. Here, we use T again as the return type. On inspection, we can now see the same type is used for the argument and the return type. This allows us to traffic that type information in one side of the function and out the other.

We say that this version of the identity function is generic, as it works over a range of types. Unlike using any, it’s also just as precise (ie, it doesn’t lose any information) as the first identity function that used numbers for the argument and return type.

Once we’ve written the generic identity function, we can call it in one of two ways. The first way is to pass all of the arguments, including the type argument, to the function:

let output = identity<string>("myString");  // type of output will be 'string'

Here we explicitly set T to be string as one of the arguments to the function call, denoted using the <> around the arguments rather than ().

The second way is also perhaps the most common. Here we use type argument inference – that is, we want the compiler to set the value of T for us automatically based on the type of the argument we pass in:

let output = identity("myString");  // type of output will be 'string'

Notice that we didn’t have to explicitly pass the type in the angle brackets (<>); the compiler just looked at the value "myString", and set T to its type. While type argument inference can be a helpful tool to keep code shorter and more readable, you may need to explicitly pass in the type arguments as we did in the previous example when the compiler fails to infer the type, as may happen in more complex examples.
********************************************************************
http://stackoverflow.com/questions/36456843/how-to-check-angular2-version-with-typescript
********************************************************************
https://thinkster.io/tutorials/angular-2-cli

Building & Running Apps with the Angular 2 CLI
********************************************************************
https://thinkster.io/tutorials/angular-2-directives

The three types of directives in Angular 2 are components, attribute directives, and structural directives.

Components are directives that have a template.
Attribute directives change the appearance or behavior of an element.
Structural directives change the DOM layout by adding and removing DOM elements.

Components create DOM elements.
Attribute directives change the appearance of DOM elements.
Structural directives change the structure of the DOM.
********************************************************************
http://stackoverflow.com/questions/36795819/when-should-i-use-curly-braces-for-es6-import/36796281

This is a default import:

// B.js
import A from './A'
It only works if A contains a default export:

// A.js
export default 42
In this case it doesn’t matter what name you assign to it when importing:

// B.js
import A from './A'
import MyA from './A'
import Something from './A'
Because it will always resolve to whatever is the default export of A.

This is a named import called A:

import { A } from './A'
It only works if A contains a named export called A:

export const A = 42
In this case the name matters because you’re importing a specific thing by its export name:

// B.js
import { A } from './A'
import { myA } from './A' // Doesn't work!
import { Something } from './A' // Doesn't work!
To make these work, you would add a corresponding named export to A:

// A.js
export const A = 42
export const myA = 43
export const Something = 44
A module can only have one default export, but as many named exports as you like (zero, one, or many). You can import them together:

// B.js
import A, { myA, Something } from './A'
Here, we import the default export as A, and named exports called myA and Something, respectively.

// A.js
export default 42
export const myA = 43
export const Something = 44
We can also assign them all different names when importing:

// B.js
import X, { myA as myX, Something as XSomething } from './A'
The default exports tend to be used for whatever you normally expect to get from the module. The named exports tend to be used for utilities that might be handy, but aren’t always necessary. However it is up to you to choose how to export things: for example, a module might have no default export at all.
********************************************************************
https://angular.io/docs/ts/latest/guide/ngmodule.html
********************************************************************
https://embed.plnkr.co/?show=preview

(minimal Angular 2 app -- from ngmodule.html above)
********************************************************************
https://www.codementor.io/codementorteam/react-vs-angular-2-comparison-beginners-guide-lvz5710ha

Angular puts JS in HTML whereas React puts HTML into JavaScript.
********************************************************************
https://spring.io/understanding/javascript-modules

ES6 modules

import { load } from 'store/customer';
import when from 'when';

export default = function (id) {
    return when(id).then(load);
};
ECMAScript 6 modules use the reserved keywords export and import.

The export keyword instructs the environment that a variable is to be exported. It also declares the variable locally exactly like a let statement would.

import binds one or more exported variables from another module into the current module's scope. The bound variables are listed inside curly braces and the other module's id must be quoted.

Since exported values are variables, they always have a name. However, module authors may also specify a default exported value as a convenient shortcut. A module may declare up to one default export by simply naming the exported value "default".

To import and bind to a module's default export, omit the curly braces in the import statement, for example:

import when from 'when';
Note: import and export must be used at the top block scope. Nesting import or export inside blocks will cause the run-time environment to throw a SyntaxError.

********************************************************************
https://blog.oio.de/2014/01/31/an-introduction-to-typescript-module-system/
(good discussion of internal vs external modules)
NOTE: internal modules are now called namespaces
********************************************************************
https://www.typescriptlang.org/docs/handbook/modules.html

In TypeScript, just as in ECMAScript 2015, any file containing a top-level import or export is considered a module.

Export

Exporting a declaration

Any declaration (such as a variable, function, class, type alias, or interface) can be exported by adding the export keyword.

Validation.ts

export interface StringValidator {
    isAcceptable(s: string): boolean;
}
ZipCodeValidator.ts

export const numberRegexp = /^[0-9]+$/;

export class ZipCodeValidator implements StringValidator {
    isAcceptable(s: string) {
        return s.length === 5 && numberRegexp.test(s);
    }
}

Import

Importing is just about as easy as exporting from a module. Importing an exported declaration is done through using one of the import forms below:

Import a single export from a module

import { ZipCodeValidator } from "./ZipCodeValidator";

let myValidator = new ZipCodeValidator();
imports can also be renamed

import { ZipCodeValidator as ZCV } from "./ZipCodeValidator";
let myValidator = new ZCV();
Import the entire module into a single variable, and use it to access the module exports

import * as validator from "./ZipCodeValidator";
let myValidator = new validator.ZipCodeValidator();
Import a module for side-effects only

Though not recommended practice, some modules set up some global state that can be used by other modules. These modules may not have any exports, or the consumer is not interested in any of their exports. To import these modules, use:

import "./my-module.js";
********************************************************************
http://stackoverflow.com/questions/35159872/angular2-typescript-importing-of-node-modules

The import rules of TypeScript follow the same convention as node.js. If an import begins with a dot:

import {Something} from './some/path';

Then it is treated as a relative path from the file that declares the import. If however it is an absolute path:

import {Component} from 'angular2/core';

Then it is assumed to be an external module, so Typescript will walk up the tree looking for a package.json file, then go into the node_modules folder, and find a folder with the same name as the import, then looks in the package.json of the module for the main .d.ts or .ts file, and then loads that, or will look for a file that has the same name as the one specified, or an index.d.ts or index.ts file.

Wow that seems complex when written out, and there are still some exceptions there... But all in all, if you have worked with node.js before then this should behave exactly the same way.

One thing to note is that there is a TypeScript compiler option that should be set for typing resolutions to work in this way

in tsconfig.json

"moduleResolution": "node"

Now the second part of your question was how does this get loaded without using ajax calls. This is a feature of System.js. The script tag that is loaded in the index.html file imports a bundle which registers the angular2 bundle with System. Once this has happened System knows about these files and correctly assigns them to their references. It's a pretty deep topic but a lot of information can be found either in the README of systemjs, or systemjs-builder.
********************************************************************
http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html

Manage IAM User Access Keys Properly
********************************************************************
https://forums.aws.amazon.com/thread.jspa?messageID=639973

Accessing DynamoDB from Lambda functions

---------------

My point through all this is that you might not need to pass any credentials into your DynamoDB client instance (you will have to add the appropriate permissions so that the Lambda execution role has the needed permissions to access your DynamoDB).
********************************************************************
http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/authentication-and-access-control.html

Authentication and Access Control for Amazon DynamoDB

Amazon DynamoDB Resources and Operations

In DynamoDB, the primary resources are tables. DynamoDB also supports additional resource types, indexes and streams. However, you can create indexes and streams only in the context of an existing DynamoDB table. These are referred to as subresources.

These resources and subresources have unique Amazon Resource Names (ARNs) associated with them, as shown in the following table.

Resource Type   ARN Format
-------------   ----------
Table           arn:aws:dynamodb:region:account-id:table/table-name
Index           arn:aws:dynamodb:region:account-id:table/table-name/index/index-name
Stream          arn:aws:dynamodb:region:account-id:table/table-name/stream/stream-label
********************************************************************
http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/using-identity-based-policies.html
(numerous examples of code for writing permissions policies)
********************************************************************
http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/api-permissions-reference.html
********************************************************************
https://docs.aws.amazon.com/lambda/latest/dg/current-supported-versions.html

Lambda Execution Environment and Available Libraries

The underlying AWS Lambda execution environment is based on the following:

Public Amazon Linux AMI version (AMI name: amzn-ami-hvm-2016.03.3.x86_64-gp2):
For information about using an AMI, see Amazon Machine Images (AMI) in the Amazon EC2 User Guide for Linux Instances.

Linux kernel version – 4.4.35-33.55.amzn1.x86_64
If you are using any native binaries in your code, make sure they are compiled in this environment. Note that only 64-bit binaries are supported on AWS Lambda.

AWS Lambda supports the following runtime versions:

Node.js – v4.3.2
Java – Java 8
Python – Python 2.7
.NET Core – .NET Core 1.0.1 (C#)

The following libraries are available in the AWS Lambda execution environment, regardless of the supported runtime you use, so you don't need to include them:

AWS SDK – AWS SDK for JavaScript version 2.7.10

The following libraries are available in the AWS Lambda execution environment so you don't need to include them:

AWS SDK for Python (Boto 3) version 1.4.2, Botocore version 1.4.81
Amazon Linux build of java-1.8.0-openjdk for Java.
********************************************************************
http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html

Observe these precautions when using access keys:

Don't embed access keys directly into code. The AWS SDKs and the AWS Command Line Tools allow you to put access keys in known locations so that you do not have to keep them in code.

Put access keys in one of the following locations:

1. The AWS credentials file. The AWS SDKs and AWS CLI automatically use the credentials that you store in the AWS credentials file.
For information about using the AWS credentials file, see the documentation for your SDK. Examples include Set Up your AWS Credentials for Use with the SDK for Java in the AWS SDK for Java Developer Guide and Configuration and Credential Files in the AWS Command Line Interface User Guide.
Note
To store credentials for the AWS SDK for .NET and the AWS Tools for Windows PowerShell, we recommend you use the SDK Store. For more information, see Using the SDK Store in the AWS SDK for .NET Developer Guide.

2. Environment variables. On a multitenant system, choose user environment variables, not system environment variables.
For more information about using environment variables to store credentials, see Environment Variables in the AWS Command Line Interface User Guide.

********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/configuring-the-jssdk.html

Configuring the SDK for JavaScript

Before you use the SDK for JavaScript to invoke web services using the API, you must configure the SDK. At a minimum, you must configure these settings:

The region in which you will request services.
The credentials that authorize your access to SDK resources.
In addition to these settings, you may also have to configure permissions for your AWS resources. For example, you can limit access to an Amazon S3 bucket or restrict an Amazon DynamoDB table for read-only access.

The topics in this section describe various ways to configure the SDK for JavaScript for Node.js and JavaScript running in a web browser.

Topics

Using the Global Configuration Object
Setting the Region
Getting Your Credentials
Setting Credentials
Locking API Versions
Node.js Considerations
Browser Script Considerations
Bundling Applications with Webpack
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-credentials-node.html

Setting Credentials in Node.js

There are several ways in Node.js to supply your credentials to the SDK. Some of these are more secure and others afford greater convenience while developing an application. When obtaining credentials in Node.js, be careful about relying on more than one source such as an environment variable and a JSON file you load. You can change the permissions under which your code runs without realizing the change has happened.

Here are the ways you can supply your credentials in order of recommendation:

Loaded from AWS Identity and Access Management (IAM) roles for Amazon EC2 (if running on Amazon EC2)
Loaded from the shared credentials file (~/.aws/credentials)
Loaded from environment variables
Loaded from a JSON file on disk

Caution
While it is possible to do so, we do not recommend hard-coding your AWS credentials in your application. Hard-coding credentials poses a risk of exposing your access key ID and secret access key.

The topics in this section describe how to load credentials into Node.js.

Topics

Loading Credentials in Node.js from IAM Roles for EC2
Loading Credentials for a Node.js Lambda Function
Loading Credentials in Node.js from the Shared Credentials File
Loading Credentials in Node.js from Environment Variables
Loading Credentials in Node.js from a JSON File
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-lambda.html

Loading Credentials for a Node.js Lambda Function

When you create an AWS Lambda function, you must create a special IAM role that has permission to execute the function. This role is called the execution role. When you set up a Lambda function, you must specify the IAM role you created as the corresponding execution role.

The execution role provides the Lambda function with the credentials it needs to run and to invoke other web services. As a result, you do not need to provide credentials to the Node.js code you write within a Lambda function.

For more information about creating a Lambda execution role, see Manage Permissions: Using an IAM Role (Execution Role) in the AWS Lambda Developer Guide.
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-shared.html

Loading Credentials in Node.js from the Shared Credentials File

You can keep your AWS credentials data in a shared file used by SDKs and the command line interface. The SDK for JavaScript automatically searches the shared credentials file for credentials when loading. Where you keep the shared credentials file depends on your operating system:

Linux users: ~/.aws/credentials
Windows users: C:\Users\USER_NAME\.aws\credentials
If you do not already have a shared credentials file, you can create one in the designated directory. Add the following text to the credentials file, replacing <YOUR_ACCESS_KEY_ID> and <YOUR_SECRET_ACCESS_KEY> values:

[default]
aws_access_key_id = <YOUR_ACCESS_KEY_ID>
aws_secret_access_key = <YOUR_SECRET_ACCESS_KEY>
The [default] section heading specifies a default profile and associated values for credentials. You can create additional profiles in the same shared configuration file, each with its own credential information. The following example shows a configuration file with the default profile and two additional profiles:

[default] ; default profile
aws_access_key_id = <DEFAULT_ACCESS_KEY_ID>
aws_secret_access_key = <DEFAULT_SECRET_ACCESS_KEY>

[personal-account] ; personal account profile
aws_access_key_id = <PERSONAL_ACCESS_KEY_ID>
aws_secret_access_key = <PERSONAL_SECRET_ACCESS_KEY>

[work-account] ; work account profile
aws_access_key_id = <WORK_ACCESS_KEY_ID>
aws_secret_access_key = <WORK_SECRET_ACCESS_KEY>
By default, the SDK checks the AWS_PROFILE environment variable to determine which profile to use. If the AWS_PROFILE variable is not set in your environment, the SDK uses the credentials for the [default] profile. To use one of the additional profiles, change the value of the AWS_PROFILE environment variable. In the previous example, to use the credentials from the work account, set AWS_PROFILE=work-account.

After setting the environment variable, to run a script.js file that uses the SDK, type the following at the command line:

$ AWS_PROFILE=work-account node script.js
You can also explicitly select the profile used by the SDK, either by setting process.env.AWS_PROFILE before loading the SDK, or by selecting the credential provider as shown in the following example:

var credentials = new AWS.SharedIniFileCredentials({profile: 'work-account'});
AWS.config.credentials = credentials;
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-node-credentials-json-file.html

Loading Credentials in Node.js from a JSON File

You can load configuration and credentials from a JSON document on disk using AWS.config.loadFromPath. The path specified is relative to the current working directory of your process. For example, to load credentials from a 'config.json' file with the following content:

{ "accessKeyId": <YOUR_ACCESS_KEY_ID>, "secretAccessKey": <YOUR_SECRET_ACCESS_KEY>, "region": "us-east-1" }
Use the following command:

AWS.config.loadFromPath('./config.json');

Note
Loading configuration data from a JSON document resets all existing configuration data. Add additional configuration data after using this technique. Loading credentials from a JSON document is not supported in browser scripts.
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-credentials-browser.html

Setting Credentials in a Web Browser

There are several ways to supply your credentials to the SDK from browser scripts. Some of these are more secure and others afford greater convenience while developing a script. Here are the ways you can supply your credentials in order of recommendation:

Using Amazon Cognito Identity to authenticate users and supply credentials
Using web federated identity
Hard coded in the script

Caution
We do not recommend hard coding your AWS credentials in your scripts. Hard coding credentials poses a risk of exposing your access key ID and secret access key.

Topics

Using Amazon Cognito Identity to Authenticate Users
Using Web Federated Identity to Authenticate Users
Web Federated Identity Examples
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-browser-credentials-cognito.html

Using Amazon Cognito Identity to Authenticate Users

The recommended way to obtain AWS credentials for your browser scripts is to use the Amazon Cognito Identity credentials object, AWS.CognitoIdentityCredentials. Amazon Cognito enables authentication of users through third-party identity providers.

Link for Cognito console:
https://us-west-2.console.aws.amazon.com/cognito/home?region=us-west-2#
********************************************************************
http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityCredentials.html
********************************************************************
https://aws.amazon.com/blogs/mobile/using-the-amazon-cognito-credentials-provider/
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/welcome.html
What Is the AWS SDK for JavaScript
********************************************************************
http://media.pragprog.com/titles/brapps/invoke.pdf

Serverless Single Page Apps

Invoking Lambda Functions

You can invoke a Lambda function from a browser in two ways. The first way
is to use the AWS SDK. The second is via the Amazon API Gateway.

While describing the API Gateway as “a way to invoke Lambda functions via HTTP”
is correct, one thing to understand is that the AWS SDK for JavaScript also invokes
Lambda functions via HTTP. Indeed, almost everything it does to interact with AWS
is via HTTP, because that’s the most stable protocol available from a web browser.
It’s just using a different endpoint than what’s provided via the API Gateway.
********************************************************************
https://dotdev.co/building-an-aws-lambda-function-that-can-be-triggered-on-the-client-side-b9c7d596a4fa#.a71xx3myz

Building an AWS Lambda function that can be triggered on the client-side

I found out about Cognito which AWS tries to make user logins much easier to handle from a development stand point. Cognito allows us to create credentials per-user and will anonymize the users so they don’t need to login and the most important part: it also allows us to hide our AWS access and secret keys.

To do this:
Click on Cognito from the dashboard
Click “Create new identity pool” and then click “Federated Identities”
Write in your app name (we’ll need to remember this for later for IAM roles)
Enable access to unauthenticated identities
and your all good here!
Now we have created the mechanism that will allow us to hide our credentials in user details.
We now have to set up some access controls in AWS through IAM so we can allow our Cognito setup to invoke and trigger the Lambda function.
Go To IAM
Click Policies
Click Create Policy and then “Create Your Own Policy”
Name the policy something you’ll remember and paste this in…
{ "Version": "2012-10-17", "Statement": [ { "Sid": "Stmt1433365260000", "Effect": "Allow", "Action": [ "lambda:InvokeFunction" ], "Resource": [ "FILL THIS IN WITH YOUR RESOURCE ID" ] } ] }
Make sure you fill in the resource ID which can be found in your Lambda function and will look something like this:
`arn:aws:lambda:us-east-1:234567889:function:my-function-name`
Next we will want to attach this policy to a role in IAM.
In IAM click on Roles and then on Cognito_<whatever you called your Cognito application>Unauth_Role
Click Attach Policy and add the policy you just created
Now, that allows an unauthorized Cognito user to execute your function.
When you created your Lambda function you also created a Role. So, we’re going to edit that Role so our function knowns what it can execute.
Click on Roles
Click on the Role that was created (it tells you in your Lambda config page). Mine was lambda_basic_execution.
Click Edit Policy on your inline policy and paste the below. It’s telling us that our function can be invoked directly.
{ "Version": "2012-10-17", "Statement": [ { "Effect": "Allow", "Action": [ "logs:*" ], "Resource": "arn:aws:logs:*:*:*" }, { "Effect": "Allow", "Action": [ "lambda:invokefunction" ], "Resource": "arn:aws:lambda:*:*:*" } ] }
Now we’re all done with the hard stuff. If you have any questions about this, or get stuck, leave a comment and i’ll help you troubleshoot.
********************************************************************
http://docs.aws.amazon.com/cognito/latest/developerguide/google.html

Amazon Cognito integrates with Google to provide federated authentication for your mobile application users. This section explains how to register and set up your application with Google as an identity provider.
********************************************************************
http://docs.aws.amazon.com/cognito/latest/developerguide/amazon.html

Amazon Cognito integrates with Login with Amazon to provide federated authentication for your mobile application and web application users. This section explains how to register and set up your application with Amazon as an identity provider.
********************************************************************
http://docs.aws.amazon.com/cognito/latest/developerguide/using-amazon-cognito-user-identity-pools-javascript-examples.html
********************************************************************
https://github.com/aws/amazon-cognito-identity-js/

Amazon Cognito Identity SDK for JavaScript

You can now use Amazon Cognito to easily add user sign-up and sign-in to your mobile and web apps. Your User Pool in Amazon Cognito is a fully managed user directory that can scale to hundreds of millions of users, so you don't have to worry about building, securing, and scaling a solution to handle user management and authentication.

We welcome developer feedback on this project. You can reach us by creating an issue on the GitHub repository or posting to the Amazon Cognito Identity forums and the below blog post:

https://github.com/aws/amazon-cognito-identity-js
https://forums.aws.amazon.com/forum.jspa?forumID=173
https://aws.amazon.com/blogs/mobile/accessing-your-user-pools-using-the-amazon-cognito-identity-sdk-for-javascript/

For an overview of the Cognito authentication flow, refer to the following blog post:

https://aws.amazon.com/blogs/mobile/customizing-your-user-pool-authentication-flow/
********************************************************************
https://github.com/aws/amazon-cognito-identity-js/

var authenticationData = {
    Username : 'username',
    Password : 'password',
};
var authenticationDetails = new AWSCognito.CognitoIdentityServiceProvider.AuthenticationDetails(authenticationData);
var poolData = {
    UserPoolId : '...', // Your user pool id here
    ClientId : '...' // Your client id here
};
var userPool = new AWSCognito.CognitoIdentityServiceProvider.CognitoUserPool(poolData);
var userData = {
    Username : 'username',
    Pool : userPool
};
var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
cognitoUser.authenticateUser(authenticationDetails, {
    onSuccess: function (result) {
        console.log('access token + ' + result.getAccessToken().getJwtToken());

        AWS.config.credentials = new AWS.CognitoIdentityCredentials({
            IdentityPoolId : '...', // your identity pool id here
            Logins : {
                // Change the key below according to the specific region your user pool is in.
                'cognito-idp.<region>.amazonaws.com/<YOUR_USER_POOL_ID>' : result.getIdToken().getJwtToken()
            }
        });

        // Instantiate aws sdk service objects now that the credentials have been updated.
        // example: var s3 = new AWS.S3();

    },

    onFailure: function(err) {
        alert(err);
    },

});
********************************************************************
http://docs.aws.amazon.com/cognito/latest/developerguide/
http://docs.aws.amazon.com/cognito/latest/developerguide/amazon-cognito-integrating-user-pools-with-identity-pools.html

Integrating User Pools with Amazon Cognito Identity

Amazon Cognito Identity user pools represent an identity provider that you manage. To enable users in your user pool to access AWS resources through your client apps, you must configure Amazon Cognito Identity to accept users that are federated with your user pool.
********************************************************************
https://developer.amazon.com/public/apis/engage/login-with-amazon/content/documentation.html

A list of Login with Amazon documentation
********************************************************************
https://developer.amazon.com/public/apis/engage/login-with-amazon/docs/install_sdk_javascript.html

Add the Login with Amazon SDK for JavaScript
Introduction

Login with Amazon provides a JavaScript SDK that you may use to obtain access tokens and retrieve customer profiles. The Login with Amazon SDK for JavaScript will handle all of the difficult parts of integrating Login with Amazon into your website. Before you can make an access grant call or retrieve a profile, the SDK must load itself from Amazon's content delivery network.

The Login with Amazon SDK for JavaScript requires the amazon-root element to be present in the page. The amazon-root element must not be hidden using display: none or visibility: hidden, or some parts of the SDK will not work properly in Internet Explorer.

The SDK inserts elements into amazon-root that expect to be positioned relative to the body or relative to an element close to the top of the page. It is best if the amazon-root element is not inside an element with position: absolute or position: relative settings. If you must place the amazon-root element inside of a positioned element, you should give it a position close to the top of the body or some parts of the SDK may not work properly.

Steps

Add the following code after the opening <body> in your page to load the Login with Amazon SDK for JavaScript, and the amazon-root tag, into your page:
 <div id="amazon-root"></div>
 <script type="text/javascript">

    window.onAmazonLoginReady = function() {
      amazon.Login.setClientId('YOUR-CLIENT-ID');
    };
    (function(d) {
      var a = d.createElement('script'); a.type = 'text/javascript';
      a.async = true; a.id = 'amazon-login-sdk';
      a.src = 'https://api-cdn.amazon.com/sdk/login1.js';
      d.getElementById('amazon-root').appendChild(a);
    })(document);

 </script>

Once the SDK has loaded, it will call window.onAmazonLoginReady for initialization. Before using the SDK, you must call amazon.Login.setClientId, passing your client identifier.

Replace YOUR-CLIENT-ID with the Client ID generated when you Registered Your Application.

Add the following JavaScript after the Login with Amazon button on your site to return an AuthorizeRequest object. Once the request is complete, the object will contain properties detailing the response (such as an access token or authorization code, which you can use to obtain customer profile information):
 <script type="text/javascript">

    document.getElementById('LoginWithAmazon').onclick = function() {
    options = { scope : 'profile' };
    amazon.Login.authorize(options,
        'https://www.example.com/handle_login.php');
    return false;
    };

 </script>

Replace www.example.com with the domain of your website.
Note: By default, the SDK will display the login screen in a popup window. You can set the popup property of the options parameter to false to instead redirect customers to a new page to login. Popup windows are not supported in native iOS apps. We recommend implementing a redirected login experience if your customers will use Login with Amazon from a native iOS app. Review the Login with Amazon SDK for JavaScript Reference Guide for information on customizing the options parameter.

Once the user has logged in and consented to share the specified data, the current window will be redirected to the given URI and the authorization response will be added to the query string. The URI must use the HTTPS protocol and be on the same domain as the current window.
********************************************************************
http://login.amazon.com/website

In this guide we will show you how to add Login with Amazon to your website or web service. After completing this guide you should have a working Login with Amazon button on your website to allow users to log in with their Amazon credentials.
********************************************************************
https://auth0.com/docs/connections/social/amazon

Obtain a Client Id and Client Secret for Amazon
********************************************************************
https://amazonpayments.s3.amazonaws.com/documents/Get_Your_Login_with_Amazon_Client_ID_EU_ENG.pdf
********************************************************************
http://login.amazon.com/manageApps
(leads to value for Client ID)
********************************************************************
https://login.amazon.com/documentation
********************************************************************
https://images-na.ssl-images-amazon.com/images/G/01/lwa/dev/docs/website-developer-guide._TTH_.pdf
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-browser-credentials-federated-id.html

Using Web Federated Identity to Authenticate Users

You can directly configure individual identity providers to access AWS resources using web identity federation. AWS currently supports authenticating users using web identity federation through several identity providers:

Login with Amazon
Facebook Login
Google Sign-in

You must first register your application with the providers that your application supports. Next, create an IAM role and set up permissions for it. The IAM role you create is then used to grant the permissions you configured for it through the respective identity provider. For example, you can set up a role that allows users who logged in through Facebook to have read access to a specific Amazon S3 bucket you control.
********************************************************************
http://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/loading-browser-credentials-cognito.html

AWS.config.credentials = new AWS.CognitoIdentityCredentials({
  IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',
  Logins: { // optional tokens, used for authenticated login
    'graph.facebook.com': 'FBTOKEN',
    'www.amazon.com': 'AMAZONTOKEN',
    'accounts.google.com': 'GOOGLETOKEN'
  }
});
********************************************************************
http://login.amazon.com/website

Getting Started for Web

In this guide we will show you how to add Login with Amazon to your website or web service. After completing this guide you should have a working Login with Amazon button on your website to allow users to log in with their Amazon credentials.


You can easily integrate Login with Amazon and your site using our plugins. Plugins are available for Shopify, Magento, WordPress, and many other providers. Click here for a full list of supported eCommerce and CMS providers.

Resources
Getting Started Guide PDF
Developer Guide PDF
SDK for JavaScript Reference PDF
Style Guidelines

Register Your Application
Add the Login with Amazon Button
Add the SDK for JavaScript
Obtain Profile Information

Add the Login with Amazon Button
================================
Next, add the Login with Amazon button to your website. You can pick from a variety of buttons and choose the image that best fits your website. See the Login with Amazon Style Guidelines for best practices and a list of images to choose from.

Add the following code to your website where you would like the button to appear. For the purposes of this guide, this must be an HTTPS website:

<a href="#" id="LoginWithAmazon">
  <img border="0" alt="Login with Amazon"
    src="https://images-na.ssl-images-amazon.com/images/G/01/lwa/btnLWA_gold_156x32.png"
    width="156" height="32" />
</a>

Optional. Add the following link to your website where you would like a "Logout" prompt to appear:

<a id="Logout">Logout</a>

Add the SDK for JavaScript
==========================
Add the following code after the opening <body> in your page to load the JavaScript into your page:

<div id="amazon-root"></div>
<script type="text/javascript">

  window.onAmazonLoginReady = function() {
    amazon.Login.setClientId('YOUR-CLIENT-ID');
  };
  (function(d) {
    var a = d.createElement('script'); a.type = 'text/javascript';
    a.async = true; a.id = 'amazon-login-sdk';
    a.src = 'https://api-cdn.amazon.com/sdk/login1.js';
    d.getElementById('amazon-root').appendChild(a);
  })(document);
</script>

Replace YOUR-CLIENT-ID with your Client ID from the Register Your Application section above.
Add the following JavaScript after the Login with Amazon button on your site.

<script type="text/javascript">
  document.getElementById('LoginWithAmazon').onclick = function() {
    options = { scope : 'profile' };
    amazon.Login.authorize(options, 'https://www.example.com/handle_login.php');
    return false;
  };

</script>

Obtain Profile Information
==========================
Next, obtain the user's profile information from Amazon using the Access Token returned by the SDK.

In your server-side application, handle the request made to /handle_login.php, and obtain profile information using the access token and the Profile REST API. If you use the following code sample, replace YOUR-CLIENT-ID with your Client ID from the Register Your Application section above.

// verify that the access token belongs to us
$c = curl_init('https://api.amazon.com/auth/o2/tokeninfo?access_token=' . urlencode($_REQUEST['access_token']));
curl_setopt($c, CURLOPT_RETURNTRANSFER, true);

$r = curl_exec($c);
curl_close($c);
$d = json_decode($r);

if ($d->aud != 'YOUR-CLIENT-ID') {
  // the access token does not belong to us
  header('HTTP/1.1 404 Not Found');
  echo 'Page not found';
  exit;
}

// exchange the access token for user profile
$c = curl_init('https://api.amazon.com/user/profile');
curl_setopt($c, CURLOPT_HTTPHEADER, array('Authorization: bearer ' . $_REQUEST['access_token']));
curl_setopt($c, CURLOPT_RETURNTRANSFER, true);

$r = curl_exec($c);
curl_close($c);
$d = json_decode($r);

echo sprintf('%s %s %s', $d->name, $d->email, $d->user_id);
********************************************************************
https://developers.google.com/google-apps/sso/openid_reference_implementation

OpenID Federated Login Service for Google Apps

Warning: Google has deprecated OpenID 2.0 and will shut it down after a migration period. Instead, Google is consolidating all federated sign-in support onto the OpenID Connect standard.

Google Apps offers an OpenID API that allows end users to securely sign in to third party web sites using their Google Apps user account. The OpenID standard frees users from having to set up separate login accounts for different web sites--and conversely, frees web site developers from the task of managing login information and security measures. OpenID achieves this goal by providing a framework in which users can establish an account with an OpenID provider, such as a Google Apps hosted domain, and use that account to sign into any web site that accepts OpenIDs.

Google Apps API supports the OpenID 2.0 Directed Identity protocol, allowing any hosted domain to provide authentication support as an OpenID provider. On request from a third-party site, Google authenticates users who are signing in with an existing Google Apps account, and returns to the third-party site an identifier that the site can use to recognize the user. This identifier is consistent, enabling the third-party site to recognize the user across multiple sessions.
********************************************************************
https://developers.google.com/identity/

Google Sign-In

Google Sign-In is a secure authentication system that reduces the burden of login for your users, by enabling them to sign in with their Google account — the same account they already use with Gmail, Play, Google+, and other Google services.

Google Sign-In is also your gateway to connecting with Google’s users and services in a secure manner. You can give your users the opportunity to pay with Android Pay, share with their Google-wide contacts, save a file to Drive, add an event to Calendar, and more. Integrate Google’s user-centric APIs and services inside your app to help your users take action and convert.
********************************************************************
https://developers.google.com/identity/sign-in/web/
https://developers.google.com/identity/sign-in/web/reference

(documents the Javascript API for Google login)

Google Sign-In JavaScript client reference

This reference describes the JavaScript client methods and attributes you will use to implement Google Sign-In in your web applications.

gapi.auth2.init
********************************************************************
https://developers.google.com/identity/sign-in/web/backend-auth

Authenticate with a backend server

If you use Google Sign-In with an app or site that communicates with a backend server, you might need to identify the currently signed-in user on the server. To do so securely, after a user successfully signs in, send the user's ID token to your server using HTTPS. Then, on the server, verify the integrity of the ID token and retrieve the user's ID from the sub claim of the ID token. You can use user IDs transmitted in this way to safely identity the currently signed-in user on the backend.
********************************************************************
https://developers.facebook.com/docs/facebook-login/web

Facebook Login for the Web with the JavaScript SDK

Facebook Login with the Facebook SDK for JavaScript enables people to sign into your web page with their Facebook credentials. If for some reason you can't use our JavaScript SDK you can also implement Facebook Login without it. To implement Facebook Login without the JavaScript SDK, see Manually Building a Login Flow.

To implement Facebook Login witht the JavaScript SDK, you need a Facebook App ID before you start, which you can create and retrieve on the App Dashboard. You also need somewhere to host HTML files.
********************************************************************
https://developers.facebook.com/docs/javascript/reference/v2.8

Facebook SDK for JavaScript - Reference

Reference docs for each of the full list of methods and functions available in the SDK.
********************************************************************
http://stackoverflow.com/questions/3611682/facebook-graph-api-how-to-get-users-email

Facebook Graph API, how to get users email?

The only way to get the users e-mail address is to request extended permissions on the email field. The user must allow you to see this and you cannot get the e-mail addresses of the user's friends.

http://developers.facebook.com/docs/authentication/permissions

You can do this if you are using Facebook connect by passing scope=email in the get string of your call to the Auth Dialog.
********************************************************************
https://developers.facebook.com/docs/facebook-login/permissions

Permissions Reference - Facebook Login

Each permission has its own set of requirements and suggested use cases. All these permissions, except the default, public_profile, require that you have Client OAuth Login enabled for your app on the Facebook Login tab of your app dashboard. Some permissions do not require review, but most do. Please see the details for each permission to learn more about how to use it in your app. Remember, all use of these permissions are subject to our Platform Policies and your own privacy policy.
********************************************************************
http://stackoverflow.com/questions/7820485/how-to-get-email-id-of-facebook-user-using-javascript-sdk

----------------

here is example how i retrieve user name and e-mail:

<div id="fb-root"></div>
<script src="http://connect.facebook.net/en_US/all.js"></script>

<script>
  $(function() {
    FB.init({
      appId  : 'APP_ID',
      status : true, // check login status
      cookie : true, // enable cookies to allow the server to access the session
      xfbml  : true  // parse XFBML
    });

    FB.getLoginStatus(function(response) {
      if (response.status == 'connected') {
        getCurrentUserInfo(response)
      } else {
        FB.login(function(response) {
          if (response.authResponse){
            getCurrentUserInfo(response)
          } else {
            console.log('Auth cancelled.')
          }
        }, { scope: 'email' });
      }
    });

    function getCurrentUserInfo() {
      FB.api('/me', function(userInfo) {
        console.log(userInfo.name + ': ' + userInfo.email);
      });
    }
  });
</script>

----------------

<button id="fb-login">Login & Permissions</button>

<script>
document.getElementById('fb-login').onclick = function() {
  var cb = function(response) {
    Log.info('FB.login callback', response);
    if (response.status === 'connected') {
      Log.info('User logged in');
    } else {
      Log.info('User is logged out');
    }
  };
  FB.login(cb, { scope: 'email' });
};
</script>
Use this to for extra permission

for more details visit : https://www.fbrell.com/examples/

----------------

There are a couple of things wrong with your solution. First of all you are using the old authentication scheme. You should use the new one described here : https://developers.facebook.com/docs/reference/javascript/

You need to add the oauth:true to your init function, and make sure that your getLoginStatus looks for the new type of response.

When that is said you need to make sure you have the right permissions to see the users e-mail. You can see the required permissions here: http://developers.facebook.com/docs/reference/api/user/

You get those by using the FB.login function as described by TommyBs in another answer.

Once you have those options you can use the FB.api function to get the e-mail.
********************************************************************
https://developers.facebook.com/docs/javascript

Facebook SDK for JavaScript
A rich set of client-side functionality for adding Social Plugins, Facebook Login and Graph API calls.

Quickstart
Learn how to use the JavaScript SDK.

Reference
A list of all SDK methods.

Frameworks
----------
AngularJS
Concepts how to integrate the Facebook SDK for JavaScript in your AngularJS app.

jQuery
Incorporate the Facebook SDK for JavaScript into your jQuery-based web app.

RequireJS
Incorporate the Facebook SDK for JavaScript with other JavaScript modules using RequireJS.

********************************************************************
https://developers.facebook.com/docs/javascript/howto/angularjs

Use the latest SDK Version

When following any guide please make sure to load the latest SDK file sdk.js:

// Old SDK (deprecated)
js.src = "//connect.facebook.net/en_US/all.js";

// New SDK (v2.x)
js.src = "//connect.facebook.net/en_US/sdk.js";
and provide a Graph API version (currently v2.4) in the FB.init() call:

$window.fbAsyncInit = function() {
    FB.init({
      appId: '{your-app-id}',
      status: true,
      cookie: true,
      xfbml: true,
      version: 'v2.4'
    });
********************************************************************
http://stackoverflow.com/questions/15123722/can-i-use-the-facebook-javascript-skd-with-a-dynamic-script-tag-insert

Facebook = {};

Facebook = {
    config: {
        APP_ID: 'APP_ID',
        APP_URL: 'APP_URL',
        CHANNEL_URL: 'CHANNEL_URL'
    }

};
Facebook.init = function() {
    var fbEl = document.createElement('div');
    fbEl.id = 'fb-root';
    document.body.insertBefore(fbEl,document.body.children[0]);
    window.fbAsyncInit = function() {
        // init the FB JS SDK
        FB.init({
            appId      : 'APP_ID', // App ID from the App Dashboard
            channelUrl : 'CHANNEL_URL', // Channel File for x-domain communication
            status     : true, // check the login status upon init?
            cookie     : true, // set sessions cookies to allow your server to access the session?
            xfbml      : true  // parse XFBML tags on this page?
        });

        // Additional initialization code such as adding Event Listeners goes here

    };

    // Load the SDK's source Asynchronously
    // Note that the debug version is being actively developed and might
    // contain some type checks that are overly strict.
    // Please report such bugs using the bugs tool.
    (function(d, debug){
        var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
        if (d.getElementById(id)) {return;}
        js = d.createElement('script'); js.id = id; js.async = true;
        js.src = "//connect.facebook.net/en_US/all" + (debug ? "/debug" : "") + ".js";
        ref.parentNode.insertBefore(js, ref);
    }(document, /*debug*/ false));
};

Facebook.init();
********************************************************************
http://stackoverflow.com/questions/8817569/facebook-js-sdk-fb-logout-doesnt-terminate-user-session
********************************************************************
https://www.facebook.com/help/community/question/?id=607738665985793

Why is my language displayed suddenly Russian?

Go to the padlock icon on the far right of the top blue bar and click it. Scroll down to the bottom where it says, "See More Settings" in blue. Click on that and it will take you to the Privacy Settings and Tools Page. In the far left pane the top setting is called "General" You may not be able to read any of these things but if you go to the very top choice in the far left box you will be in the right place. Click on that and it will open an new box in the center of your screen with choices - probably also in Russian. Count down to the sixth choice and click on it. From there the language choices should be in English that you can read. Click on English (US) and click to Save Changes.
********************************************************************
http://ccm.net/faq/2524-how-to-change-facebook-language

How To Change Facebook Language
********************************************************************
http://stackoverflow.com/questions/14772115/how-to-specify-the-language-to-be-used-in-the-facebook-login-dialog

It might be something to do with the SDK source you are using

From http://developers.facebook.com/docs/reference/javascript/

js.src = "//connect.facebook.net/en_US/all.js";

----------------

NOTE:

Solution for our mysterious "Russian" facebook login.  It was necessary to change the following:

js.src = "//connect.facebook.net/ru_RU/sdk.js#xfbml=1&version=v2.7&appId=1436430629732183";

to instead be the following:

js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.7&appId=1436430629732183";
********************************************************************
https://www.reddit.com/r/osx/comments/2mq5pg/safari_yosemite_allow_popups_on_certain_sites/

Is it possible to allow Safari open popups on certain sites that requires popups? WITHOUT going to settings and turning the whole function OFF?

------------------

Doesn't look like it is possible. Although instead of going to preferences every time I believe that CMD + Shift + K toggles the pop-up blocker.
********************************************************************
http://kb.sage.edu/kb/index.php?View=entry&EntryID=483

How to enable pop-ups in Chrome, Firefox, Safari and Internet Explorer.
********************************************************************
http://docs.aws.amazon.com/cognito/latest/developerguide/facebook.html

Amazon Cognito integrates with Facebook to provide federated authentication for your mobile application users. This section explains how to register and set up your application with Facebook as an identity provider.
********************************************************************
http://stackoverflow.com/questions/2764436/facebook-oauth-logout

(discussion on how to get Facebook logout to take effect)
********************************************************************
https://developer.mozilla.org/en-US/docs/Tools/Storage_Inspector
(information on Firefox tool that enables you to view local and session storage)
1. Turn on Storage setting (see info at URL below)
2. Press Shift-F9 to view the storage inspector
********************************************************************
https://developer.mozilla.org/en-US/docs/Tools/Settings
(how to get to settings option)
********************************************************************
Summary of steps to view stoarage in Firefox
--------------------------------------------
1. Cmd-Alt-I  (open up Developer tools e.g. Console)
2. Click on "Storage" icon to view storage settings
3. If "Storage" option has not yet been enabled
   a) F1 (toggle between tool and settings pane)
   b) In settings pane, check Storage  (this setting must be set only once)
********************************************************************
http://stackoverflow.com/questions/35985616/how-do-i-use-googleauth-then-when-using-google-signin-without-a-class-g-signi

This is answered by my other question in a similar area: How do I initialise Google Sign in with no login button?

The answer is to not use platform.js but instead use api.js and load auth2:

<html lang="en">
  <head>
    <script src="https://apis.google.com/js/api.js"></script>
    <script type="text/javascript">
        function onSignIn(googleUser) {
            console.log( "signedin");
            // Useful data for your client-side scripts:
            var profile = googleUser.getBasicProfile();
            console.log("Name: " + profile.getName());
        };

        gapi.load('auth2', function() {
            gapi.auth2.init({
                client_id: "REPLACE_WITH_YOUR_ID",
                scope: "profile email" // this isn't required
            }).then(function(auth2) {
                console.log( "signed in: " + auth2.isSignedIn.get() );
                auth2.isSignedIn.listen(onSignIn);
                var button = document.querySelector('#signInButton');
                button.addEventListener('click', function() {
                  auth2.signIn();
                });
            });
        });
    </script>
  </head>
  <body>
    <div id="signInButton"><img src="IMAGE_FILE" /></div>
  </body>
</html>
********************************************************************
https://openid.net/specs/openid-connect-basic-1_0.html#RequestParameters

Google sign in can be customized (among other things) with a "prompt" property:
GoogleAuth.signIn({prompt: 'login'});

Values of prompt include:

none
The Authorization Server MUST NOT display any authentication or consent user interface pages. An error is returned if an End-User is not already authenticated or the Client does not have pre-configured consent for the requested Claims or does not fulfill other conditions for processing the request. The error code will typically be login_required, interaction_required. This can be used as a method to check for existing authentication and/or consent.

login
The Authorization Server SHOULD prompt the End-User for reauthentication. If it cannot reauthenticate the End-User, it MUST return an error, typically login_required.

consent
The Authorization Server SHOULD prompt the End-User for consent before returning information to the Client. If it cannot obtain consent, it MUST return an error, typically consent_required.

select_account
The Authorization Server SHOULD prompt the End-User to select a user account. This enables an End-User who has multiple accounts at the Authorization Server to select amongst the multiple accounts that they might have current sessions for. If it cannot obtain an account selection choice made by the End-User, it MUST return an error, typically account_selection_required.

NOTE: none of the above force the user to login whenever the "login" button is clicked (if the user is logged into Google, the login pop-up window does NOT appear, and info from the previous login is used).
********************************************************************
https://developers.google.com/identity/protocols/OAuth2

Basic steps

All applications follow a basic pattern when accessing a Google API using OAuth 2.0. At a high level, you follow four steps:
********************************************************************
http://stackoverflow.com/questions/33273153/what-is-the-difference-between-the-two-google-js-client-cdns

Use links only from the documentation!

Simple to check this:

1) Add to header of your page this script:

<script src="https://apis.google.com/js/client.js"></script>
Open DevTools -> Network to see effect of the above.

2) Change link to other script

<script src="https://apis.google.com/js/api.js"></script>
Open DevTools -> Network

api.js is the core, while client.js is the module.

Here a completely different content: https://apis.google.com/js/platform.js
********************************************************************
https://developers.google.com/api-client-library/
********************************************************************
https://developers.google.com/identity/choose-auth
********************************************************************
https://developers.google.com/identity/sign-in/web/
********************************************************************
https://developers.google.com/identity/sign-in/web/session-state
********************************************************************
https://developers.google.com/identity/sign-in/web/cross-platform-sign-in

Cross-platform single sign-in

When a user signs in with their Google account in a web browser or on an Android device, they can be seamlessly signed in across web browsers and Android devices using the same Google account. This feature allows users to get the best experience out of multiple devices by making it easier for them to sign in to your service.

When the button is loaded on the web, it immediately checks to see if the user has authorized the application. This check is called "immediate mode" and if successful, the Google servers return an access token and pass a new authorization result object to the callback. If the button cannot make an immediate-mode authorization, the user must click the sign-in button to trigger the access flow.

To enable cross-platform single sign-on:

The Android and web app must be registered in the same Google API Console project.
The requested scopes on each platform must match the scopes from other platforms.
Cross-platform single sign-on works for the user when the following requirements are met:

The user is signed in to Google in the browser or on the Android device.
The user has previously authorized your app for the same scopes.
This experience is similar to when a user opens an Android app the second time. If the user previously authorized the app, then the user remains signed in: users do not click the sign-in button every time they open the app.

NOTE: WHAT IF WE DO WANT THE USER TO CLICK ON A SIGN-IN BUTTON EVERY TIME THEY OPEN OUR APP?

When a user is seamlessly signed in, Google displays a reminder that they are logged in using their Google account. This reminder only appears once per device.
********************************************************************
http://stackoverflow.com/questions/34823273/how-to-determine-if-google-auth2-signin-window-was-closed-by-the-user

Im implementing auth using this and am currently showing a loading icon in React when a user clicks the button to sign in and the auth2 account selection/login window shows.

However if a user closes the window, there doesnt seem to be any event fired i.e the signIn() function which returns a promise never resolves, I would have thought google would return an error for this promise if the window is closed. As a result there is no way for me to stop showing the loader icon and reshow the login menu.

I was wondering if anyone had a solution for this?

---------------

Although the API provides a mechanism for detecting when the user clicks the Deny button, there is not a built-in way for detecting that the user abruptly closed the popup window (or exited their web browser, shut down their computer, and so on). The Deny condition is provided in case you want to re-prompt the user with reduced scopes (e.g. you requested "email" but only need profile and will let the user proceed without giving you their email).

If the response from the sign-in callback contains the error, access_denied, it indicates the user clicked the deny button:

function onSignInCallback(authResult) {
  if (authResult['error'] && authResult['error'] == 'access_denied') {
    // User explicitly denied this application's requested scopes
  }
}
You should be able to implement sign-in without detecting whether the window was closed; this is demonstrated in virtually all of the Google+ sample apps. In short, you should avoid using a spinner as you're doing and instead should hide authenticated UI until the user has successfully signed in.

It's not recommended you do this, but to implement detection of the pop-up closing, you could do something like override the global window.open call, then detect in window.unload or poll whether the window was closed without the user authenticating:

var lastOpenedWindow = undefined;
window.open = function (open) {
    return function (url, name, features) {
        // set name if missing here
        name = name || "default_window_name";
        lastOpenedWindow = open.call(window, url, name, features);
        return lastOpenedWindow;
    };
}(window.open);

var intervalHandle = undefined;
function detectClose() {
  intervalHandle = setInterval(function(){
    if (lastOpenedWindow && lastOpenedWindow.closed) {
      // TODO: check user was !authenticated
      console.log("Why did the window close without auth?");
      window.clearInterval(intervalHandle);
    }
  }, 500);
}
Note that as I've implemented it, this mechanism is unreliable and subject to race conditions.
********************************************************************
https://github.com/google/google-api-javascript-client/issues/25

gapi.auth.authorize callback doesn't get called when user closes window

-------------

There are 2 issues here:

The event of closing the windows is not fetched at all. The callback should get called with authResult.error=window_closed
the documentation says "(If authorization fails, an error message is returned.)" - Really? The authResult is null in two important cases: if unauthorized and if the users denies the autorization. Instead the callback should get called with error=unauthorized and error=denied or similar
Someone at google willing to help and get this fixed after over a year? Or where is the source code of this stuff?

-------------

This issue still exists in the auth2 client (https://developers.google.com/identity/sign-in/web/reference), which uses promises. I would expect that clicking 'deny' or closing the window would resolve the promise with an error. However, neither the success or error methods of the promise are called.

-------------

thanks for the response, however how come facebook do provide this? I have both facebook and google auth as options on my page and facebook's signIn method resolves to failed if the user closes the popup window. To me this seems like a bit of an oversight on google's part. The spinner thing is just a ux thing to indicate to the user that a sign in process has begun (in case they do indeed click on another window and lose track of the sign in window).

-------------

And here's a workaround. It'll fire whenever any opened window is closed. It works in the authSample.html page.

You could check the url contains google.com if your page opens windows for some other reason. (or hold a reference to the real window.open)

(function(wrapped) {

window.open = function() {
  var win = wrapped.apply(this, arguments);
  var i = setInterval(function() {
    if (win.closed) {
      console.log('closed!');
      clearInterval(i);
    }
  }, 100);
};

})(window.open);
********************************************************************
https://www.pluralsight.com/guides/front-end-javascript/react-vs-angular-2

(excellent diagrams comparing Angular 2 and React work flows)
********************************************************************
http://onehungrymind.com/build-a-simple-website-with-angular-2/

(simple example on how to build a web site)
********************************************************************
https://github.com/lmeijdam/angular2-minimal

To let the browser take care of requesting and serving files, we're going to use a module loader. The preferred module loader for Angular 2 is 'SystemJs'.
********************************************************************
http://stackoverflow.com/questions/38263406/what-are-differences-between-systemjs-and-webpack

I'm creating my first Angular 2 application and I would figure out what is the role of the module loaders.

Why we need SystemJS (or WebPack or others)?

-----------------

Webpack is a flexible module bundler. This means that it goes further and doesn't only handle modules but also provides a way to package your application (concat files, uglify files, ...). It also provides a dev server with load reload for development

SystemJS and Webpack are different but with SystemJS, you still have work to do (with Gulp or SystemJS builder for example) to package your Angular2 application for production.

-----------------

Google has officially moved to webpack. So I guess it's better to stick with what majority of the community would be using. I am migrating my systemJS project to webpack soon. Not entirely sure how to do it though. – user2180794 Sep 16 '16 at 20:17

********************************************************************
https://angular.io/docs/ts/latest/guide/webpack.html

Webpack is a popular module bundler, a tool for bundling application source code in convenient chunks and for loading that code from a server into a browser.

It's an excellent alternative to the SystemJS approach used elsewhere in the documentation. This guide offers a taste of Webpack and explains how to use it with Angular applications.
********************************************************************
http://www.eloquentwebapp.com/setting-angular-2-environment-using-typescript-npm-webpack/

2. Installing and Configuring Webpack

Webpack will replace SystemJS that we have used until now, as a module loader. If you need an explanation on what is Webpack for, I highly recommand you to take a look at the official documentation. In short, webpack is a module bundler. “It takes modules with dependencies and generates static assets representing those modules“.
********************************************************************
https://semaphoreci.com/community/tutorials/setting-up-angular-2-with-webpack

Introduction

In this article, we'll be looking at the setup required to create an Angular 2 project with unit tests. We'll cover various required technologies and how to write each of their configurations.
********************************************************************
http://developer.telerik.com/featured/19-tips-to-make-learning-angular-2-easier/
********************************************************************
https://scotch.io/tutorials/use-the-angular-cli-for-faster-angular-2-projects

Use the Angular CLI For Faster Angular 2 Projects

At ng-conf 2016, the Angular team announced a tool that will make creating and scaffolding Angular 2 applications incredibly easy.

The Angular CLI effectively takes all those configuration and setup steps shown above and condenses it down into one quick line:

ng new <project>
********************************************************************
https://cli.angular.io/

Angular CLI

A command line interface for Angular
********************************************************************
https://github.com/angular/angular-cli
********************************************************************
https://github.com/angular/angular-cli/wiki

Running unit tests

ng test
Tests will execute after a build is executed via Karma, and it will automatically watch your files for changes. You can run tests a single time via --watch=false or --single-run.

Running end-to-end tests

ng e2e
Before running the tests make sure you are serving the app via ng serve. End-to-end tests are run via Protractor.

Additional Commands

ng new
ng serve
ng generate
ng test
ng e2e
ng build
ng get/ng set
ng doc
ng eject
ng xi18n
********************************************************************
https://www.sitepoint.com/ultimate-angular-cli-reference/

The Ultimate Angular CLI Reference Guide

(use this tutorial for model of how to do it)
********************************************************************
http://karma-runner.github.io/0.13/index.html
********************************************************************
http://www.protractortest.org/#/
********************************************************************
https://medium.com/@jeff.boothe/angular-cli-meets-webpack-7c9b1a1e1e89#.ekjztzodl

Oh what a delight to see the team moved the build system from SystemJS to Webpack!!

Why did the CLI team move to Webpack?

Fast
Improved Livereload reliability
Community Adoption
Vast Loader & Plugin Ecosystem
********************************************************************
http://stackoverflow.com/questions/36313019/can-i-replace-systemjs-by-webpack-with-angular2

I understood that systemJS and webpack are doing the same. So I would like to replace systemJS by webpack but when I'm removing the system.js script reference in my html page I get the following error:

angular2.js:2 Uncaught ReferenceError: System is not defined
Does it means that angular2 is using SystemJS as module loader without the possibility to replace it by another one?

----------

It means that the bundles you get in node_modules are built with SystemJS builder. If you want to use WebPack you can take a look at this repository and check Overview.md – Eric Martinez Mar 30 '16 at 15:21

----------

Yes, you can.

There are few examples & tutorials.

For example:

https://github.com/preboot/angular2-webpack
https://github.com/AngularClass/angular2-webpack-starter
https://github.com/blacksonic/angular2-es6-starter (suggested by @blacksonic)
********************************************************************
http://react-etc.net/entry/angular-2-cli-moves-from-systemjs-to-webpack

Angular 2 CLI moves from SystemJS to Webpack

The Modern JavaScript ecosystem has reached the point of maturity where some projects are becoming the de-facto standard. Build system veterans such as Grunt and Gulp were first challenged by Browserify to packaging files for distribution, but now WebPack is the norm. The Angular 2 CLI curiously used the SystemJS for loading modules.

Angular 2 CLI is an official project from the Angular 2 development team. It aims to help developers waste less time in setting up a project before getting stated. This standard scaffolding used a tool call SystemJS, which is "a universal dynamic module loader" capable of loading different JavaScript formats (ES6, AMD, CommonJS).

Edging towards the 1.0 release, the Angular 2 CLI team announced a move to Webpack over SystemJS for loading JavaScript. Work still continues, but this is another move towards a more unified JavaScript ecosystem. The recently released React project scaffolding tool, influenced by the Ember CLI tool also uses Webpack.

Just like the NPM package manager for the Node.js server environment is now the default for all JavaScript Packaging, it looks like Webpack is cementing it's position as the de-facto module packaging tool. All of this means that in your Decoupled CMS projects, for example, you can spend more time on productive work rather than setting up or learning new tooling.

The transition from SystemJS to Webpack is still work in progress, but the team is looking to make the change as simple as possible:

We want to make sure it's ready. That's why we need your help. Basically, things should work. Build and Serve should work. Also, testing and E2E should too. To put it short, everything should work as it was before. But we're not certain! Test every commands you can think of. Use your normal work flows. We need you to test your projects and file issues about it.
Developers already using Angular 2 CLI should take a look at the migration pull request. In any case if you're looking to start new Angular 2 projects using the CLI you should probably already start using the Webpack powered beta as that will spare you from migration in the future.

Thursday August 4, 2016
********************************************************************
https://webpack.js.org/

(official Webpack documentation)
********************************************************************
http://www.netinstructions.com/100-days-of-angular-2-day-3/

(graphs showing much greater use of Webpack over SystemJS)

Migrating from SystemJS to Webpack

This wasn't super straightforward. The official Angular 2 docs include a lengthy page about Webpack but it's not laid out in a very clear manner.

From consulting the Angular 2 docs as well as the following the two Angular 2 + Webpack "Starter" projects I was able to figure it out, sort of.
********************************************************************
http://stackoverflow.com/questions/39832439/two-way-binding-arrays-in-angular-2

Here is a plunker of an example of how you can bind your model variable to another component:

https://plnkr.co/edit/tM20HcUIx13ZUPh0faTB?p=preview

I have created a simple list component from your code above:

import { Component, Input  } from '@angular/core';

import { Person } from './person';

@Component({
  selector: 'my-list',
  template:`
    <h3>The List</h3>
    <tr class='row' *ngFor="let person of model">
      <td class='col'>{{person.name}}</td>
      <td class='col'>{{person.job}}</td>
    </tr>
})

export class List {
  @Input() model:Array<Person>;
}
The Input decorator lets the component know to expect and input of this type and to use it in the scope of this component.

In the template of the editor component I have used the my-list directive and set the model input of the directive to the model in the editor component.

<my-list [model]="model" ></my-list>

This now lets any changes to the model be reflected int he child list component.

If you were wanting you notify a component that was not a child of the editor component you would need to use the @Output decorator and set up an EventEmitter that a listener can be bound to and then used to updated the list elsewhere.

Take a look at the documentation here:

https://angular.io/docs/ts/latest/cookbook/component-communication.html
********************************************************************
http://stackoverflow.com/questions/39832439/two-way-binding-arrays-in-angular-2

two-way binding arrays in angular 2

--------------

Here is a plunker of an example of how you can bind your model variable to another component:

https://plnkr.co/edit/tM20HcUIx13ZUPh0faTB?p=preview

I have created a simple list component from your code above:

import { Component, Input  } from '@angular/core';

import { Person } from './person';

@Component({
  selector: 'my-list',
  template:`
    <h3>The List</h3>
    <tr class='row' *ngFor="let person of model">
      <td class='col'>{{person.name}}</td>
      <td class='col'>{{person.job}}</td>
    </tr>
})

export class List {
  @Input() model:Array<Person>;
}

The Input decorator lets the component know to expect and input of this type and to use it in the scope of this component.

In the template of the editor component I have used the my-list directive and set the model input of the directive to the model in the editor component.

<my-list [model]="model" ></my-list>

This now lets any changes to the model be reflected int he child list component.

If you were wanting you notify a component that was not a child of the editor component you would need to use the @Output decorator and set up an EventEmitter that a listener can be bound to and then used to update the list elsewhere.

Take a look at the documentation here:

https://angular.io/docs/ts/latest/cookbook/component-communication.html
********************************************************************
http://stackoverflow.com/questions/35534959/access-key-and-value-of-object-using-ngfor

There is no inbuilt pipe or method to get key and value from the *ngFor loop. so we have to create custom pipe for the same. as thierry said here is the answer with code.

** The pipe class implements the PipeTransform interface's transform method that takes an input value and an optional array of parameter strings and returns the transformed value.

** The transform method is essential to a pipe. The PipeTransform interface defines that method and guides both tooling and the compiler. It is optional; Angular looks for and executes the transform method regardless. for more info regards pipe refer here

import {Component, Pipe, PipeTransform} from 'angular2/core';
import {CORE_DIRECTIVES, NgClass, FORM_DIRECTIVES, Control, ControlGroup, FormBuilder, Validators} from 'angular2/common';

@Component({
    selector: 'my-app',
    templateUrl: 'mytemplate.html',
    directives: [CORE_DIRECTIVES, FORM_DIRECTIVES],
    pipes: [KeysPipe]
})
export class AppComponent {

  demo = {
    'key1': 'ANGULAR 2',
    'key2': 'Pardeep',
    'key3': 'Jain',
  }
}

@Pipe({name: 'keys'})
export class KeysPipe implements PipeTransform {
  transform(value, args:string[]) : any {
    let keys = [];
    for (let key in value) {
      keys.push({key: key, value: value[key]});
    }
    return keys;
  }
}
and HTML part is:

<ul>
  <li *ngFor='#key of demo | keys'>
   Key: {{key.key}}, value: {{key.value}}
  </li>
</ul>
Working Plnkr http://plnkr.co/edit/50LlK0k6OnMnkc2kNHM2?p=preview
********************************************************************
https://angular.io/docs/ts/latest/guide/router.html
********************************************************************
https://coursetro.com/posts/code/19/Angular-2-Router-&-Navigation-Tutorial
********************************************************************
https://coryrylan.com/blog/introduction-to-angular-routing
********************************************************************
https://www.barbarianmeetscoding.com/blog/2016/03/28/getting-started-with-angular-2-step-by-step-4-routing/
********************************************************************
https://www.reddit.com/r/Angular2/comments/424nwn/using_angular_2_without_it_being_a_single_page_app/

There is a way to bootstrap multiple Angular 2 apps sprinkled throughout your pages
So we ran into this same problem of wanting to bootstrap multiple apps on page on a client project and apparently there is a way to do this with Angular 2. It just requires a different Angular 2 bootstrapping process.

Mediacurrent ran into this exact problem and blogged about the solution: https://www.mediacurrent.com/blog/building-wundergroundcom-drupal-angular-2-challenge-1-how-bootstrap
And the plunkr showing how to do it (that they link to) can be found here: http://plnkr.co/edit/A7fyFUST9IdP1FriauXk?p=preview
********************************************************************
https://www.mediacurrent.com/blog/building-wundergroundcom-drupal-angular-2-challenge-1-how-bootstrap

In an ongoing web project with Weather Underground, the Mediacurrent development team is breaking new ground with decoupled Drupal and Angular 2. The endeavor has required refactoring the Presentation Framework originally built for Weather.com from dependent on Angular 1 to being javascript framework agnostic. This blog series explores how Mediacurrent, in collaboration with the Angular team at Google, has solved for several architectural challenges.

One of our first big concerns was how to bootstrap our components into an app. In Angular 2, the typical way components communicate with each other is by passing events out to a parent component, which then passes data back down into sibling components allowing them to respond as needed. Fair enough. Our problem was, all components are required to have templates, and since the “wrapper” or parent component would have to hold any other components on the page, its template would necessarily be the entire rendered panel page.

This is problematic because we don’t only render angular components on the page, we also allow regular Drupal-rendered panes and panes served by Edge Side Includes to coexist in the same space. Passing those out as an angular component template would defeat the purpose of rendering them server side. The other option is to use a shared service to allow components to pass state data out for other components to read, but this is still only possible if all of those components are bootstrapped to a single app, which would still mean bootstrapping a single parent component with its own wrapper template. - See more at: https://www.mediacurrent.com/blog/building-wundergroundcom-drupal-angular-2-challenge-1-how-bootstrap#sthash.4HkTAb5U.68Va7GnE.dpuf

...

The solution is simple, but as Brad Green told us at the time, “It’s never been done by anyone outside of Google.” Using what the team refers to as longform bootstrap, we are able to instantiate an app and then bootstrap each individual component inside that app. This allows components to occupy isolated regions of the DOM and still communicate with each other since they are a part of the same app. We then use a globally shared service provider injected by the root app to allow them to communicate.
********************************************************************
http://stackoverflow.com/questions/36158848/what-is-the-best-way-to-declare-a-global-variable-in-angular-2-typescript

What is the best way to declare a global variable in Angular 2 / Typescript

-------------

I don't know the best way, but the easiest way if you want to define a global variable inside of
 a component is to use window variable to write like this:

window.GlobalVariable = "what ever!"

you don't need to pass it to bootstrap or import it other places, and it is globally accessible to all JS (not only angular 2 components).

-------------

Here is the simplest solution w/o Service nor Observer:

Put the global variables in a file and export them.

//
// ===== File globals.ts
//
'use strict';

export const sep='/';
export const version: string="22.2.2";

To use globals in another file use an import statement: import myGlobals = require('./globals');

Example:

//
// ===== File heroes.component.ts
//
import {Component, OnInit} from 'angular2/core';
import {Router} from 'angular2/router';
import {HeroService} from './hero.service';
import {HeroDetailComponent} from './hero-detail.component';
import {Hero} from './hero';
import myGlobals = require('./globals'); //<==== this one

export class HeroesComponent implements OnInit {
    public heroes: Hero[];
    public selectedHero: Hero;
    //
    //
    // Here we access the global var reference.
    //
    public helloString: string="hello " + myGlobals.sep + " there";

         ...

        }
    }

----

I would use export const instead of export var - you really want to make sure those global variables cannot be changed

----

I like the answer of @supercobra, but I would use the const keyword as it is in ES6 already available:

//
// ===== File globals.ts
//
'use strict';

export const sep='/';
export const version: string="22.2.2";

----

That's the way I use it:

global.ts

 export var   server: string = 'http://localhost:4200/';
 export var   var2 : number = 2;
 export var   var3 : string = 'var3';

to use it just import like that:

  import {Injectable} from "@angular/core";
     import {Http, Headers, RequestOptions} from "@angular/http";
     import {Observable} from "rxjs/Rx";

     import * as glob from "../shared/global"; //<== HERE

     @Injectable()
     export class AuthService {
          private AuhtorizationServer = glob.server
        }

-------------

A shared service is the best approach

export class SharedService {
  globalVar:string;
}

But you need to be very careful when registering it to be able to share a single instance for your whole application. You need to define it when registering your application:

bootstrap(AppComponent, [SharedService]);
but not to define it again within the providers attributes of your components:

@Component({
  (...)
  providers: [ SharedService ], // No
  (...)
})

Otherwise a new instance of your service will be created for the component and its sub components.

You can have a look at this question regarding how dependency injection and hierarchical injectors work in Angular2:

What's the best way to inject one service into another in angular 2 (Beta)?

You can notice that you can also define Observable properties in the service to notify parts of your application when your global properties change:

export class SharedService {
  globalVar:string;
  globalVarUpdate:Observable<string>;
  globalVarObserver:Observer;

  constructor() {
    this.globalVarUpdate = Observable.create((observer:Observer) => {
      this.globalVarObserver = observer;
    });
  }

  updateGlobalVar(newValue:string) {
    this.globalVar = newValue;
    this.globalVarObserver.next(this.globalVar);
  }
}

-------------

IMHO for Angular2 (v2.2.3) the best way is to add services that contain the global variable and inject them into components without the providers tag inside the @Component annotation. By this way you are able to share information between components.

A sample service that owns a global variable:

import { Injectable } from '@angular/core'

@Injectable()
export class SomeSharedService {
  public globalVar = '';
}
A sample component that updates the value of your global variable:

import { SomeSharedService } from '../services/index';

@Component({
  templateUrl: '...'
})
export class UpdatingComponent {

  constructor(private someSharedService: SomeSharedService) { }

  updateValue() {
    this.someSharedService.globalVar = 'updated value';
  }
}
A sample component that reads the value of your global variable:

import { SomeSharedService } from '../services/index';

@Component({
  templateUrl: '...'
})
export class ReadingComponent {

  constructor(private someSharedService: SomeSharedService) { }

  readValue() {
    let valueReadOut = this.someSharedService.globalVar;
    // do something with the value read out
  }
}
Note that providers: [ SomeSharedService ] should not be added to your @Component annotation. By not adding this line injection will always give you the same instance of SomeSharedService. If you add the line a freshly created instance is injected.

-----

But without adding the line of providers, I got an error like this: Unhandled Promise rejection: No provider for SomeSharedService – Rocky Mar 16 at 14:14

-----

I see. I should add providers: [SomeSharedService] in the parent module file.

-------------

********************************************************************
http://stackoverflow.com/questions/34804298/whats-the-best-way-to-inject-one-service-into-another-in-angular-2-beta/34807397
********************************************************************
http://stackoverflow.com/questions/40942844/persist-data-between-pages-in-angular2

Sometimes you want to call router.navigate to a new location, but send data to that page without placing it in the URL, for example, a complex object that has been manipulated in the first page.

How is that accomplished in Angular2?

-----------

In Angular2 it's accomplished through dependency injection. You are using shared service between components and retrieve data in ngOnInit().

-----------

So you're saying I specifically should create a service to persist that data between pages

-----------

so i am saying yes
********************************************************************
http://stackoverflow.com/questions/35869434/angular-2-data-persistence

Our dev team started the great switch to the Angular2/Ionic2 framework, and one small detail left us puzzled - which is the best way to achieve data persistence? I've found an almost two year old Google Doc on a Design for Ang2 Data Persistence, however, it doesn't seem like it's been implemented at all. The most important functions I need are:

1. binding the data on client and server side, so every change gets automatically committed
2. local dataset to work with when the application goes offline
3. caching the offline work, syncing it with the backend immediately on reconnection

(In short, the functionality of Swarm.js for example) I've searched blogs, stackoverflow, but so far no answer - as far as I understood I can't even use widely accepted external solutions, such as PouchDB to solve this problem, and constantly making http get/post calls with manual caching in localStorage won't do it for the projects we're working on. What do you think? Is there a way to achieve this?
********************************************************************
https://github.com/angular/angular/issues/4350

How to persist data when switching tabs/routes?

When switching routes. How to keep state of the application as it is? I observed that Angular2 class is reinitialize every time I switch tabs but view is not reinitializing.

Can we make class to initialize once when route is accessed first time only?

--------------

Registering a service that holds the data in main() in DI and requesting it where ever you need to access the data should work.

--------------

Assuming you want a singleton todoStore (probably) - you should bind that in the root/app component, and not in the child. That way, each time a new todo component is instantiated, it'll look "up" to the parent component and grab the already instantiated store.

Pascal's article here is a great read on the mechanics of this http://blog.thoughtram.io/angular/2015/08/20/host-and-visibility-in-angular-2-dependency-injection.html

********************************************************************
https://blog.thoughtram.io/angular/2015/08/20/host-and-visibility-in-angular-2-dependency-injection.html
********************************************************************
https://www.sitepoint.com/data-flows-angular-2-redux/

Converted to Angular 2

In Angular 2 we can build an application in the same way as Angular 1. We can use two-way data binding (really it’s just two one-way data bindings, but the end result is two-way data binding) and a service to manage our data. We can rely on dirty checking to re-render the UI when changes happen to our data.

This is a very basic component, but the key part of note is the providers property being used in the Component decorator. TodoService isn’t being used directly by this base component, but adding it to the providers list means that any child components will receive the same instance of the TodoService (creating a singleton for any child components).
Notice in the AddTodo component how we inject TodoService, but it isn’t included in a providers property. Angular 2 will look up the chain of injectors until it finds TodoService at the top level and inject that one

Angular 2 Summary

While the implementation is different, the data flows and concepts between the Angular 1 and Angular 2 implementations are identical.

A service manages the list of Todos being rendered. The same service also manages adding and toggling of Todos. Both use a singleton instance of the TodoService so all components of the application are always referring to the same set of data. We mutate the array of Todos (and the individual Todos in the array) and rely on dirty checking to re-render.

Overall this is not a bad way to build an application. But as your applications grow, dependencies between components and the data they render can become cumbersome. It can make reasoning about your application difficult, and relying on data mutation and dirty checking can make testing harder.

Next we will look at a third way to build this simple application: With a one-way data flow.

Overview of One-Way Data Flow

If you’ve been following the JavaScript landscape over the last year or two you’ve likely heard of using a one-way data flow to manage applications. There are some great resources that explain what a one-way data flow is, but at a high level the idea is all data originates from the same place and is pushed down to children that use it. Think of setting up the initial state or data store for a task list application. You define things like what user is logged in, what tasks should be rendered, etc. This initial state setup doesn’t look much different when using a one-way data flow.

The difference comes when you want to update one of your tasks. Instead of changing (mutating) the data model in place, we will send a message to the top-level data store telling it to update something in its object graph. The update happens and the application is re-rendered.

Re-rendering the application is a critical piece to the one-way data flow. You can conceive of it as if the whole application is re-rendered for each and every change that happens. In the real world this is not performant so only the pieces of the application that see changes are re-rendered.

This concept was popularized largely by the React framework. There are numerous libraries that can be used to implement one-way data flows, but a popular one in the React community, with growing popularity in the Angular 2 community, is called Redux.

Angular 2 with One-Way Data Flow

Now that we’ve seen the sample app built in Angular 1 and Angular 2 using two-way data flow, let’s rebuild the same application in Angular 2 using a one-way data flow.

Single source of truth

The state of your whole application is stored in an object tree within a single store.

Summary

This application gives you a simple example of a one-way data flow in Angular 2. If we were to build a larger, more complex application we could follow a similar pattern. Create a reducer or reducers, add them to our data store, and provide actions that can be used to update the store. The state of the whole application can be represented in this single state object.

Thinking about applying this to larger applications, the concept maps closely to how Angular 2 applications are structured. One node in a state tree would be the representation of one node in the component tree. Children in the state tree would represent child components in the component tree. And by using read-only data Angular’s dirty checking cycle can be optimized for identity checks rather than deep object graphs.
********************************************************************
https://www.sitepoint.com/angular-2-components-inputs-outputs/

(Illustration of Angular 2 application graph structure, showing one-way downward flow of information, and upward flow of information via events.  Discusses @Input and @Output.)

The above pattern – passing data in through an “input” property and sending data out through an “output” event – is the primary way to share data between components. We’ll see in a future article that we can also share data between components by defining services that can be injected into components, effectively giving us a way to share data or functions between components.
********************************************************************
https://www.sitepoint.com/angular-2-components-providers-classes-factories-values/

In a previous article, we looked at how to get data into and out of components using the @Input and @Output annotations. In this article, we’ll look at another fundamental aspect of Angular 2 components – their ability to use “providers.” You may have seen “providers” in a list of properties you can use to configure components and you might have realized that it allows you to define a set of injectable objects that will be available to the component. That’s nice, but it of course begs the question, “what is a provider?”

Answering that question involves a bit and gets us into a discussion of Angular 2’s Dependency Injection (DI) system. We may specifically cover DI in a future blog post, but it is well covered in a series of articles by Pascal Precht beginning with: http://blog.thoughtram.io/angular/2015/05/18/dependency-injection-in-angular-2.html. We’ll assume you are familiar with DI and Angular 2’s DI’s system in general as covered in Pascal’s article, but in brief the DI system is responsible for:

- Registering a class, function or value. These items, in the context of dependency injection, are called “providers” because they result in something. For example, a class is used to provide or result in an instance – see below for more details on provider types.

- Resolving dependencies between providers – for example, if one provider requires another provider.

- Making the provider’s result available in code when we ask for it. This process of making the provider result available to a block of code is called “injecting it.” The code that injects the provider results is, logically enough, called an “injector.”

- Maintaining a hierarchy of injectors so that if a component asks for a provider result from a provider not available in its injector, DI searches up the hierarchy of injectors.
********************************************************************
https://angular.io/docs/ts/latest/tutorial/toh-pt4.html

Services
********************************************************************
https://angular.io/docs/ts/latest/tutorial/toh-pt5.html

Routing
********************************************************************
https://coursetro.com/posts/code/20/Angular-2-Services-Tutorial---Understanding-&-Creating-Them
********************************************************************
http://stackoverflow.com/questions/37502809/what-are-the-spec-ts-files-generated-by-angular-cli-for

The spec files are unit tests for your source files. The convention for Angular2 applications is to have a .spec.ts file for each .ts file. They are run using the Jasmine javascript test framework through the Karma task runner when you use the 'ng test' command.

The testing documentation for Angular2 hasn't been fully fleshed out, yet, but you can use this for some further reading:

https://angular.io/docs/ts/latest/guide/testing.html
********************************************************************
http://stackoverflow.com/questions/23715170/best-data-persistence-for-angularjs-javascript-apps-on-phonegap

I am looking to find best practices for Angularjs data persistence on a PhoneGap app. I'm using Ionic Framework on top of this, but not relevant to this question as it is just built on top of Angular & Cordova.

I like that Angular remains flexible on data persistence solutions, it makes sense since it is a web framework not specifically a Hybrid app framework... would love to know how people are solving this.

Here's an overview:

Requirements

Add local database to app build for preloaded data. This will be over the 5MB data limit.
Load data from local database on startup.
Saving updated data to local data store for persistence.
Prefer schema-less if possible.
Simple query interface. I could load all the data into memory and just use standard Angular filters for this, provided the performance was decent.
Object query interface... something like an ActiveRecord-like ORM rather than having to write SQL in my app.
Future proof. I don't want to reinvent the wheel every time I am building an app that needs data persistence. Also would like to choose something that is more standard if possible so I can continue to use it in the future... something like Indexeddb would make sense here.
Options

I've been looking at the following options. Can you provide any feedback on any of these?

Breezejs - Looks more focused on server. Is there an SQLite interface?
YDN-DB - Seems like an option, but also seems a little obscure compared to some of the other options.
JayData - Is this still active? Concerned about commercial aspect of it.
Persistencejs - This looks promising. Is the project still active?
ngStorage - is this just a localStorage interface? Does it solve the 5M limit?
Angular-cache - Can I have data to pre-load with this? How long can I persist data?
localForage - don't know much about this. Does it solve the 5M limit?
Pouchdb - concerned about query language. does not solve 5M restriction
Couchdb Lite - concerned about query language.
WebSQL - I don't to use this since it seems like it is on the way out.. plus 5M limit.
Indexeddb - There is a shim that builds compat-layer for most major browsers. 5M limit. If I could use this on top of Sqlite that would prob be a winner for me since more standards based.
Store in json file - Just use plain old objects and then use Phonegap file api to load and store serialized data. Seems like a pain to have to serialize all the data every time we want to save... but an option so long as I can use Angular filters.

********************************************************************
http://stackoverflow.com/questions/41161056/angular2-best-practice-for-data-layer

I am new to Angular2 and am learning by doing. Right now I have succeeded in building one of multiple view with a parent component, couple of child components and database service. Now I am about to move to implementation of other views with their respective parent-child components.

The application should use the same dataset which can be added/updated/deleted within other components, so I am looking into having a separate data layer, which can be directly queried by all of the components of the application. Even more – I need the same instance of the service, so that the intermediate data is available everywhere and, well, to also avoid unnecessary trips to the database. What is the best way to define and use such a class in Angular2?

Update Q: So now, when I have direct access to variables of the same instance of the data layer all over the application, what is the best way to deal with variables within components?

a) Should I work with local component variables, which are the copies of the same data layer variables (thus loading, getting and setting them explicitly), like

this.locations = this.datalayer.locations;
this.selectedLocation;

updateLocation(id) {
  this.selectedLocation = id;
  this.datalayer.setSelectedLocation(id);
}

getSelectedLocation() {
   return this.selectedLocation;
}
or b) should I work exclusively with data layer variables, iterating over them, getting and setting them from within a component?

updateLocation(id) {
   this.datalayer.selectedLocation = id;
}

getSelectedLocation() {
   return this.datalayer.selectedLocation;
}
or maybe there is an option c?

----------

I presume you want a service, that is available to all components that the purpose is to interact with data.

You also want a service that is a singleton.

The solution is to create the service and provide it on the app level.

See more:

How can I create a singleton service in Angular 2?
********************************************************************
https://forum.ionicframework.com/t/what-persistent-data-storages-should-i-use/3707/25
********************************************************************
http://blog.angular-university.io/how-to-build-angular2-apps-using-rxjs-observable-data-services-pitfalls-to-avoid/

How to modify the data of a service

The data in services is modified by calling action methods on them.

The data store will then emit a new value for its data depending on the action method call, and all subscribers will receive the new value and update accordingly.

********************************************************************
https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html

A component has a lifecycle managed by Angular.

Angular creates it, renders it, creates and renders its children, checks it when its data-bound properties change, and destroys it before removing it from the DOM.

Angular offers lifecycle hooks that provide visibility into these key life moments and the ability to act when they occur.

A directive has the same set of lifecycle hooks, minus the hooks that are specific to component content and views.

Lifecycle sequence

After creating a component/directive by calling its constructor, Angular calls the lifecycle hook methods in the following sequence at specific moments:
********************************************************************
https://medium.com/@daviddentoom/angular-2-form-validation-9b26f73fcb81#.o166kla3g
********************************************************************
https://scotch.io/tutorials/angular-2-form-validation
********************************************************************
https://www.npmjs.com/package/ng2-validation
(npm package with validation primitives)
********************************************************************
http://stackoverflow.com/questions/34559212/how-to-add-form-validation-pattern-in-angular2

custom validation step by step

Html template

  <form [ngFormModel]="demoForm">
  <input
  name="NotAllowSpecialCharacters"
  type="text"
  #demo="ngForm"
  [ngFormControl] ="demoForm.controls['spec']"
  >

 <div class='error' *ngIf="demo.control.touched">
   <div *ngIf="demo.control.hasError('required')"> field  is required.</div>
   <div *ngIf="demo.control.hasError('invalidChar')">Special Characters are not Allowed</div>
 </div>
  </form>
Component App.ts

import {Control, ControlGroup, FormBuilder, Validators, NgForm, NgClass} from 'angular2/common';
import {CustomValidator} from '../../yourServices/validatorService';
under class define

 demoForm: ControlGroup;
constructor( @Inject(FormBuilder) private Fb: FormBuilder ) {
    this.demoForm = Fb.group({
       spec: new Control('', Validators.compose([Validators.required,   CustomValidator.specialCharValidator])),
      })
}
under {../../yourServices/validatorService.ts}

export class CustomValidator {
    static specialCharValidator(control: Control): { [key: string]: any } {
   if (control.value) {
       if (!control.value.match(/[-!$%^&*()_+|~=`{}\[\]:";#@'<>?,.\/]/)) {
           return null;
       }
       else {
           return { 'invalidChar': true };
       }
   }

 }

 }
********************************************************************
https://angular.io/docs/ts/latest/api/forms/index/Validators-class.html
********************************************************************
http://blog.ng-book.com/the-ultimate-guide-to-forms-in-angular-2/

(excellent discussion, including how to do custom validation)
********************************************************************
http://blog.angular-university.io/introduction-to-angular-2-forms-template-driven-vs-model-driven/

The Model Driven approach removes validation logic from the template, keeping the templates clean of validation logic. In addition, it also allows for a whole different way of building UIs.
********************************************************************
https://scotch.io/tutorials/using-angular-2s-model-driven-forms-with-formgroup-and-formcontrol

There are two ways to build forms in Angular 2, namely template-driven and model-driven.
********************************************************************
https://scotch.io/tutorials/using-angular-2s-template-driven-forms
********************************************************************
https://angular.io/docs/ts/latest/guide/reactive-forms.html

In keeping with the reactive paradigm, the component preserves the immutability of the data model, treating it as a pure source of original values. Rather than update the data model directly, the component extracts user changes and forwards them to an external component or service, which does something with them (such as saving them) and returns a new data model to the component that reflects the updated model state.
********************************************************************
https://angular.io/docs/ts/latest/guide/forms.html

(official documentation on template driven forms)
********************************************************************
http://stackoverflow.com/questions/35922071/warn-user-of-unsaved-changes-before-leaving-page
(sample code to handle this situation)
********************************************************************
https://angular.io/docs/ts/latest/api/router/index/CanDeactivate-interface.html
********************************************************************
https://blog.thoughtram.io/angular/2016/07/18/guards-in-angular-2.html

Protecting routes is a very common task when building applications, as we want to prevent our users from accessing areas that they’re not allowed to access, or, we might want to ask them for confirmation when leaving a certain area. Angular’s router provides a feature called Navigation Guards that try to solve exactly that problem. In this article, we’d like to take a look at the different types of guards and how to implement them for actual use cases.

Guard Types

There are four different guard types we can use to protect our routes:
- CanActivate - Decides if a route can be activated
- CanActivateChild - Decides if children routes of a route can be activated
- CanDeactivate - Decides if a route can be deactivated
- CanLoad - Decides if a module can be loaded lazily
********************************************************************
http://stackoverflow.com/questions/34331478/angular2-redirect-to-login-page
********************************************************************
http://stackoverflow.com/questions/38366340/redirect-to-login-route-if-the-user-not-logged-in-angular2-2-0-0-rc-4

1.store the user in local storage or cookie and you can check if the user is logged in from there on ngoninit of your component.. on basis of this you can redirect to login page if user is not logged in.

2.you can make a variable in service to be true if user is logged in and on basis of this u can redirect to login page .

I hope this is what u are searching for :)

You can use a canActivate and canDeactivate property in your routes.. first of all set a variable named isLoggedIn as false and make it true on login and u can restrict the user by this by adding canActivate method as :-

in your routes file third property :..

canActivate:[Authentication]
and import authentication from another file .....

import { CanActivate, Router } from '@angular/router';

export class Authentication implements CanActivate {

constructor(private service: Service, private router: Router) {}

canActivate() {

    if (this.authService.isLoggedIn) { return true; }
    this.router.navigate(['/login']);
    return false;
  }
}
********************************************************************
https://auth0.com/blog/angular-2-series-part-4-component-router-in-depth/
********************************************************************
https://angular-2-training-book.rangle.io/handout/routing/route_guards.html
********************************************************************
https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html

(discussion of immutable objects)

Observables

As mentioned earlier, Observables also give us some certain guarantees of when a change has happened. Unlike immutable objects, they don’t give us new references when a change is made. Instead, they fire events we can subscribe to in order to react to them.
********************************************************************
https://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html
********************************************************************
https://blog.ngconsultant.io/custom-input-formatting-with-simple-directives-for-angular-2-ec792082976#.uexpaose8

(includes use of parse method -- PipeTransform interface contains only the transform method but we also implemented a parse method which reverses the original transformation)

(look at Plunker example: http://plnkr.co/edit/rKq8yCoNhwXFozKsKPZf?p=preview)

- convert input to number
- display output with comma separators (thousands separator)
- separate [ngModel] and (ngModelChange) bindings to implement one way data flow

------------------
  ngOnInit() {
    this.el.value = this.currencyPipe.transform(this.el.value);
  }

  @HostListener("focus", ["$event.target.value"])
  onFocus(value) {
    this.el.value = this.currencyPipe.parse(value); // opossite of transform
  }

  @HostListener("blur", ["$event.target.value"])
  onBlur(value) {
    this.el.value = this.currencyPipe.transform(value);
  }
------------------
<input type="text"
   [ngModel]="amount"
   (ngModelChange)="onAmountChange($event)"
   myCurrencyFormatter />
------------------
import { Component } from "@angular/core";

import { MyService } from "./my-service.ts";
import { MyCurrencyFormatterDirective } from "./my-currency-formatter.directive";

@Component({
  selector: "my-form",
  template: require("./my-form.component.html"),
  providers: [
    MyService
  ],
  directives: [
    MyCurrencyFormatterDirective
  ]
})
export class MyFormComponent {

  amount: string;

  constructor(private myService: MyService) {
    // get state from service
    this.myService.amount.subscribe(a => this.amount = a);
  }

  onAmountChange(amount: string) {
    // explicitly update state (one way data flow)  <=====================
    this.myService.updateAmount(amount);
  }

}
********************************************************************
https://blog.rsuter.com/angular-2-typescript-property-decorator-that-converts-input-values-to-the-correct-type/

Angular 2: Convert input values to the correct type with a TypeScript property decorator

I recently played with Angular 2 and found an uncomfortable problem: Declaring an input property with a TypeScript type does not guarantee that the input value will always be of this type. This is because the Angular framework may update an input with a wrongly typed value and thus is able to “circumvent” the TypeScript type system. As a result, you may end up with strange and unexpected runtime errors.
********************************************************************
http://stackoverflow.com/questions/14667713/typescript-converting-a-string-to-a-number

Anyone a suggestion on how to convert a string to a number in TypeScript?

--------------

The Typescript way to do this would be:

Number('1234') // 1234
Number('9BX9') // NaN
as answered here: http://stackoverflow.com/a/23440948/2083492
********************************************************************
http://www.javascripter.net/faq/convert2.htm

Converting Strings to Numbers

parseFloat(string)
------------------
The argument of parseFloat must be a string or a string expression. The result of parseFloat is the number whose decimal representation was contained in that string (or the number found in the beginning of the string). If the string argument cannot be parsed as a decimal number, the result will be NaN (not-a-number value).

parseInt( string [, base] )
---------------------------
The first argument of parseInt must be a string or a string expression. The result returned by parseInt is an integer whose representation was contained in the string (or the integer found in the beginning of the string). The second argument base, if present, specifies the base (radix) of the number whose string representation is contained in the string. The base argument can be any integer from 2 to 36.

If there is only one argument, the number base is detected according to the general JavaScript syntax for numbers. Strings that begin with 0x or -0x are parsed as hexadecimals; strings that begin with 0 or -0 are parsed as octal numbers. All other strings are parsed as decimal numbers.
********************************************************************
http://stackoverflow.com/questions/1074660/with-a-browser-how-do-i-know-which-decimal-separator-does-the-client-use

-------------

function whatDecimalSeparator() {
    var n = 1.1;
    n = n.toLocaleString().substring(1, 2);
    return n;
}

----

Function fails on locale's that use more than one character for their DecimalSeparator (e.g. ,,). Windows LOCALE_SDECIMAL allows a decimal separator to contain up to three characters. (Which is why it fails on my PC). Better to use the Accept-Language of the browser in that case. Which still doesn't account for the ability to specify their own DecimalSeparator e.g. \o/

-------------

function getDecimalSeparator() {
    //fallback
       var decSep = ".";

        try {
            // this works in FF, Chrome, IE, Safari and Opera
            var sep = parseFloat(3/2).toLocaleString().substring(1,2);
            if (sep === '.' || sep === ',') {
                decSep = sep;
            }
        } catch(e){}

        return decSep;
    }

-------------

Ask the user, do not guess. Have a setting for it in your web application.

Edited to add:

I think it is ok to guess the default setting that works ok, say, 95% of the time. What I meant was that the user should still be able to override whatever guesses the software made. I've been frustrated too many times already when a software tries to be too smart and does not allow it to be corrected.

----

Bad idea, except maybe as a backup. Most users are embarassinlgy culture-insensitive and won't even understand what a "decimal separator" is without explanation (and then will be pissed off at being forced to set something that "everyone knows").
********************************************************************
http://stackoverflow.com/questions/32054025/how-to-determine-thousands-separator-in-javascript

In order for toLocaleString to work, the browser/JavaScript must know the user's locale and whether or not the specific locale uses "," or "." for a thousands separator. Is it possible to access this data so that we can determine what the thousands separator is?

If not, we can use a function like this...

var thousandsSeparator = (function(){
    if (typeof Number.prototype.toLocaleString === 'function') {
        var num = 1000;
        var numStr = num.toLocaleString();
        if (numStr.length == 5) {
            return numStr.substr(1, 1);
        }
    }
    return ","; // fall-back
})();

-----------

A little further digging and I found Intl.NumberFormat. I think this is more elegant...

var thousandsSeparator = (function(){
    if (typeof Intl === 'object') {
        // Gets the formatting object for your locale
        var numFormat = new Intl.NumberFormat();
        // The resolved.pattern will be something like "#,##0.###"
        return numFormat.resolved.pattern.substr(1,1);
    }
    return ",";
})();

Or if you really need it ultra-concise...

var thousandsSeparator = (Intl) ? (new Intl.NumberFormat()).resolved.pattern.substr(1,1) : ",";

Compatibility warning:

The Intl object may not be supported in Safari for some reason -- http://caniuse.com/#feat=internationalization -- despite it being part of standard ECMAScript.

While the Intl object may exist in some ECMAScript-standard browsers, the code above will only work in Chrome.
Sadly Firefox 40 and IE 11 currently do not have a resolved property in numFormat.

********************************************************************
http://www.javascripter.net/faq/numbervs.htm

Is there a way to test whether a particular variable holds a number or a string?

Answer: Yes. To test whether the variable holds a number or a string, use the typeof operator. If your variable holds a number, typeof(variable) will return "number". If it holds a string, typeof(variable) will return "string". The following are examples of typeof usage:
typeof(123)    // result: "number"
typeof("123")  // result: "string"

if (typeof k == "string") { alert('k is a string.') }
if (typeof k == "number") { alert('k is a number.') }

The typeof operator can also help you distinguish between other data types. Depending on the particular variable's value, the result of typeof can be one of the following:

"number"
"string"
"boolean"
"function"
"object"
"undefined"
********************************************************************
http://stackoverflow.com/questions/38358306/setting-value-in-input-text-box-using-angular-2-with-typescript

(how to access value from one component from within the context of another component)

If you are trying to set the value of component1's textfield from the compoenent2 then you must have to use of ngModel i.e two way data binding. by providing component2 in the providers list you are able to access all the functions and variables of that component, then you can easily set your value. like this

suppose this is your component 2's value property

name:string = 'Pardeep Jain';
than you can access this in component like this-

<input type="text" [(ngModel)]='name'>
....
constructor(private delete1: Delete){
   this.name = this.delete1.name;
}
********************************************************************
https://angular.io/docs/ts/latest/guide/template-syntax.html

(excellent discussion)

You'll get to that peculiar bracket notation in a moment. Looking beyond it, your intuition suggests that you're binding to the button's disabled attribute and setting it to the current value of the component's isUnchanged property.

Your intuition is incorrect! Your everyday HTML mental model is misleading. In fact, once you start data binding, you are no longer working with HTML attributes. You aren't setting attributes. You are setting the properties of DOM elements, components, and directives.

HTML attribute vs. DOM property
The distinction between an HTML attribute and a DOM property is crucial to understanding how Angular binding works.

Attributes initialize DOM properties and then they are done. Property values can change; attribute values can't.

For example, when the browser renders <input type="text" value="Bob">, it creates a corresponding DOM node with a value property initialized to "Bob".

When the user enters "Sally" into the input box, the DOM element value property becomes "Sally". But the HTML value attribute remains unchanged as you discover if you ask the input element about that attribute: input.getAttribute('value') returns "Bob".

The HTML attribute value specifies the initial value; the DOM value property is the current value.

This fact bears repeating: Template binding works with properties and events, not attributes.

One-way in
People often describe property binding as one-way data binding because it flows a value in one direction, from a component's data property into a target element property.

You cannot use property binding to pull values out of the target element. You can't bind to a property of the target element to read it. You can only set it.

Similarly, you cannot use property binding to call a method on the target element.

If the element raises events, you can listen to them with an event binding.

If you must read a target element property or call one of its methods, you'll need a different technique. See the API reference for ViewChild and ContentChild.
********************************************************************
https://angular.io/docs/ts/latest/cookbook/component-communication.html

This cookbook contains recipes for common component communication scenarios in which two or more components share information.

Contents

- Pass data from parent to child with input binding
- Intercept input property changes with a setter
- Intercept input property changes with ngOnChanges()
- Parent calls an @ViewChild()
- Parent and children communicate via a service
********************************************************************
http://stackoverflow.com/questions/39981435/angular-2-define-data-models-for-multiple-modules

I'm currently starting a new project with Angular 2.0 (release Version) and I want to define some global data models/schemas. As I understand it, Angular 2 has no default way of handling pure data classes like this:

export class TestModel {
  id: number;
  name: string;
  randomAttribute: number;
  author: string;
}

So my first question regarding best practices is: Should I define such classes when working with Angular 2?

For the design and concept of my whole application I think they are necessary but I'm not sure if I'm applying the wrong way of thinking here.

This data classes are sometimes needed in multiple modules (ngModule) so my second question is Where do I place them in my app?
********************************************************************
http://stackoverflow.com/questions/30944763/typescript-looping-trough-class-type-properties
********************************************************************
http://plnkr.co/edit/sRNxfXsbcWnPU818aZsu?p=preview

(Plunker example of using CanDeactivate guard)
********************************************************************
http://stackoverflow.com/questions/34615425/how-to-watch-for-form-changes-in-angular-2
********************************************************************
http://stackoverflow.com/questions/39795634/angular-2-change-detection-and-changedetectionstrategy-onpush
********************************************************************
https://github.com/angular/angular/issues/7113

Angular2 Forms Controls validation "OnLostFocus (OnBlur)" rather than "OnChange"

(discussion on use of onBlur instead of onChange for validity checks)

Looking at the code for setting up form controls in shared.ts it appears we detect control changes onChange "registerOnChange"

eg. if a user types into an input control that is an ng2 angular control, each keypress triggers a validationcheck ..

It appears to be a big change if i were to change it from OnChange to something like LostFocus of the control ...

The reason i ask is business really doesn't like the validation messages appearing suddenly even while the user hasn't finished filling in the field ... eg. filling in a "Password" control, the user is suddenly shown validation errors while they're typing ...

Anyone got a nice solution for hiding validation messages and only showing them once they tab off the control ?!

--------------

That's interesting.

So the class valid/dirty/invalid seems nice (I guess you can agree with the decorator that say the field is not yet compliant).
However I agree that the messages are more cumbersome and sometimes obvious enough (like on a login screen)

The problem is when to display them then? how to know the user is "done"

For example I have a form that disables the submit button if the form is invalid. If it's the last field that is invalid, the user is editing it. He can't click on the button, so the "lost focus" event might not come depending on the user behaviour.

Let me throw a couple of UX ideas that use form validation on each change, but that react a bit differently (async ?) to it:

- display the errors/details after some timer of inactivity (a bit heavy)

- display the errors/details in a way that does not disturb the form layout (in a side floating tooltip rather than in a div that appear/disappear below each input)

what do you think?

--------------

I think the issue is just about being able to use the blur event instead of the change event for calling the validator, so validation is only done when the user is done editing a field.

display the errors/details in a way that does not disturb the form layout (in a side floating tooltip rather than in a div that appear/disappear below each input)
Shouldn't bee too hard. This is IMHO only a CSS problem not an Angular problem.

display the errors/details after some timer of inactivity (a bit heavy)
Shouldn't be too hard to implement. Just create an additional flag used in *ngIf to show/hide validation errors. Subscribe to form changes and if there is some delay toggle the flag.

<div class="validation-message" *ngIf="form.controls['xxx'].isValid && isIdle">

--------------


our interaction designers are very adamant that the UI should NOT be changing whilst the user is entering data .. apparently they hate any form of distraction for the user during their data entry interaction..

--------------

If the concern is that the error messages are being displayed as the user types (too early), have you considered using the touched property? A control is only marked touched on the blur event, so the error message would not appear until then.

What we don't have yet is support for actually running the validation on blur instead of on value change. Besides error message display, what are some other use cases for this? Trying to get a read on priority.

--------------

Telling the user that they need at least 4 characters before they've even had a chance to enter those 4 a badly designed UI. It works for maxLength because then we can be certain something is wrong. Not the same story for minLength or even pattern.

Fiddling with touched works, but it feels like a chore to fiddle it back and forth and it doesn't "feel" like the correct way to do it - developers don't know what touched might be used for internally or by e.g directives. In my app at the moment I have validators: ValidatorFn[] and onChangeValidators: ValidatorsFn[] when creating a FormControl. All input components have an onChange and later on that uses setError to push the validator error in. It works quite well so it's certainly possible to get around this issue.

There's a few quirks introduced because editing a field and instantly clicking on a submit button might allow the event to trigger (e.g when used with disabling buttons), so I have to manually ask the FormModel if it's valid (allow it to update).

On top of that we have a view with quite a complex UI with over 50 inputs divided into 5-6 components. All components have to react on changes in the data in other components to update themselves with other inputs. We thought about having a store and using valueChanges to update the data but it didn't feel like a very performant solution - updating it onblur/change would be better.

--------------

Ok, I found a way to do this as:

<input type="text" required #mycontrol formControlName="MYCTRL" (change)="MYCTRL=mycontrol.value;Update('MYCTRL')" />

both MYCTRL and Update() as part of model.
but, to be honestly, I would like to have something like onModuleBlur to pass job to ng2 , rather I call (change).

Well, the reason I come here as I need find out how to validate/show message (:

I need this "onModuleBlur" or BlueChanges( just like ValueChanges) to convert my site from angular 1 to 2, because my site is bit of strange as, after user changes controlValue, some business rules will decide if this change has to post to backend or... before user does anything else.

********************************************************************
http://stackoverflow.com/questions/41465542/angular2-input-field-to-accept-only-numbers

In component.ts add this function

_keyPress(event: any) {
    const pattern = /[0-9\+\-\ ]/;
    let inputChar = String.fromCharCode(event.charCode);

    if (!pattern.test(inputChar)) {
      // invalid character, prevent input
      event.preventDefault();
    }
}
In your template use the following

<input(keypress)="_keyPress($event)">
This will catch the input before angular2 catches the event.

----------

your answer is correct but backspace is not working....?
********************************************************************
https://angular.io/docs/ts/latest/cookbook/form-validation.html

(clear example of template-based validation)

(template-driven vs model-driven 'reactive' approach)
********************************************************************
http://stackoverflow.com/questions/37078494/dynamic-routerlink-value-from-ngfor-item-giving-error-got-interpolation

Parser Error: Unexpected token {, expected identifier, keyword, or string at column 3 in [[{{info.path}}]] in SiteMapComponent@5:7
<a [ERROR ->][routerLink]="[{{info.path}}]">{{info.name}}</a>

Parser Error: Got interpolation ({{}}) where expression was expected at column 2 in [['{{info.path}}']] in SiteMapComponent@4:7 ("
<a [ERROR ->][routerLink]="['{{info.path}}']">{{info.name}}</a>

This works OK:
<a [routerLink]="['/login']">{{info.name}}</a>

--------------

Solution:
<a *ngFor="let item of headerItems" [routerLink]="item.routerLink"> {{item.text}} </a>
********************************************************************
In what files does creating a new component with the API tool have an effect?

DaveMac:WizeFiPrototype daveland$ pwd   (note that current directory is the project)
/Users/daveland/BrickWire/MoneyOrganizer/tests/test17/WizeFiPrototype
DaveMac:WizeFiPrototype daveland$ git grep --full-name --untracked -i abc

src/app/abc/abc.component.html:  abc works!
src/app/abc/abc.component.spec.ts:import { AbcComponent } from './abc.component';
src/app/abc/abc.component.ts:export class AbcComponent implements OnInit {
src/app/app.module.ts:import { AbcComponent } from './abc/abc.component';
src/app/app.module.ts:    AbcComponent

Notes:
1. Component name is converted to Pascal case (leading capital letter)
2. Beyond entries in the abc directory, only app.module.ts is affected
********************************************************************
For a component that has editable data, in what files is that component referenced?

DaveMac:WizeFiPrototype daveland$ git grep --full-name --untracked -i budgetdetail

src/app/app.module.ts:import { BudgetDetailsComponent } from './budget-details/budget-details.component';
src/app/app.module.ts:import { BudgetDetailsDeactivateGuard } from './budget-details/budget-details-deactivate.guard';
src/app/app.module.ts:    BudgetDetailsComponent,
src/app/app.module.ts:    BudgetDetailsDeactivateGuard
src/app/app.routes.ts:import { BudgetDetailsComponent } from './budget-details/budget-details.component';
src/app/app.routes.ts:import { BudgetDetailsDeactivateGuard } from './budget-details/budget-details-deactivate.guard';
src/app/app.routes.ts:    component: BudgetDetailsComponent,
src/app/app.routes.ts:    canDeactivate: [BudgetDetailsDeactivateGuard]
src/app/budget-details/budget-details-deactivate.guard.ts:import { BudgetDetailsComponent } from './budget-details.component';
src/app/budget-details/budget-details-deactivate.guard.ts:export class BudgetDetailsDeactivateGuard implements CanDeactivate<BudgetDetailsComponent> {
src/app/budget-details/budget-details-deactivate.guard.ts:  canDeactivate(budgetDetailsComponent: BudgetDetailsComponent) {
src/app/budget-details/budget-details-deactivate.guard.ts:  console.log('canDeactivate called for BudgetDetailsComponent');  //%//
src/app/budget-details/budget-details-deactivate.guard.ts:  let result: IVerifyResult = budgetDetailsComponent.cBudgetDetails.verifyAllDataValues();
src/app/budget-details/budget-details-deactivate.guard.ts:  budgetDetailsComponent.messages = result.messages;
src/app/budget-details/budget-details-deactivate.guard.ts:  budgetDetailsComponent.update();
src/app/budget-details/budget-details.class.ts:export interface IBudgetDetails {
src/app/budget-details/budget-details.class.ts:export class CBudgetDetails {
src/app/budget-details/budget-details.class.ts:    constructor (public budgetDetails: IBudgetDetails) { }
src/app/budget-details/budget-details.class.ts:    getBudgetDetailsSum() {
src/app/budget-details/budget-details.class.ts:        return Number(this.budgetDetails.housing) + Number(this.budgetDetails.food);
src/app/budget-details/budget-details.class.ts:         }   // getBudgetDetailsSum
src/app/budget-details/budget-details.class.ts:                 let str = String(this.budgetDetails[item]);
src/app/budget-details/budget-details.class.ts:}   // class CBudgetDetails
src/app/budget-details/budget-details.component.html:<tr><td>Housing</td><td><input type="text" [(ngModel)]="cBudgetDetails.budgetDetails.housing" (keyup.enter)="calcTotal()" (blur)="calcTotal()" size="10"></td></tr>
src/app/budget-details/budget-details.component.html:<tr><td>Food</td><td><input type="text" [(ngModel)]="cBudgetDetails.budgetDetails.food" (keyup.enter)="calcTotal()" (blur)="calcTotal()" size="10"></td></tr>
src/app/budget-details/budget-details.component.html:<tr><td>TOTAL</td><td><input type="text" value={{cBudgetDetails.getBudgetDetailsSum()}} size="10" readonly> continuous update (onChange)</td></tr>
src/app/budget-details/budget-details.component.ts:import { CBudgetDetails, IVerifyResult } from './budget-details.class';
src/app/budget-details/budget-details.component.ts:  selector: 'app-budgetdetails',
src/app/budget-details/budget-details.component.ts:export class BudgetDetailsComponent implements OnInit, OnDestroy {
src/app/budget-details/budget-details.component.ts:  cBudgetDetails: CBudgetDetails;
src/app/budget-details/budget-details.component.ts:    this.cBudgetDetails = new CBudgetDetails(this.datamodelService.getdata('budgetDetails'));
src/app/budget-details/budget-details.component.ts:    this.budgetTotal = this.cBudgetDetails.getBudgetDetailsSum();
src/app/budget-details/budget-details.component.ts:    console.log("BudgetDetailsComponent onInit");
src/app/budget-details/budget-details.component.ts:    console.log("BudgetDetailsComponent onDestroy");
src/app/budget-details/budget-details.component.ts:    let result: IVerifyResult = this.cBudgetDetails.verifyAllDataValues();
src/app/budget-details/budget-details.component.ts:      this.budgetTotal = this.cBudgetDetails.getBudgetDetailsSum();
src/app/budget-details/budget-details.component.ts:    this.datamodelService.putdata('budgetDetails', this.cBudgetDetails.budgetDetails);
src/app/budget/budget.component.ts:import { CBudgetDetails } from '../budget-details/budget-details.class';
src/app/budget/budget.component.ts:  cBudgetDetails: CBudgetDetails;
src/app/budget/budget.component.ts:    this.cBudgetDetails = new CBudgetDetails(this.dataModelService.getdata('budgetDetails'));
src/app/budget/budget.component.ts:    this.budgetTotal = this.cBudgetDetails.getBudgetDetailsSum();
src/app/data-model/data-model.service.ts:import { IBudgetDetails } from './budget-details/budget-details.class';
src/app/data-model/data-model.service.ts:  budgetDetails: IBudgetDetails,
src/app/data-model/data-model.service.ts:      budgetDetails: {
src/app/data-model/data-model.service.ts:      case 'budgetDetails':  value = JSON.parse(JSON.stringify(this.dataModel.budgetDetails));  break;
src/app/data-model/data-model.service.ts:      case 'budgetDetails':  this.dataModel.budgetDetails = JSON.parse(JSON.stringify(value));  break;

The following files are affected:

src/app/budget-details/budget-details.component.ts  (defines BudgetDetailsComponent)
src/app/budget-details/budget-details.component.html  (utilizes data and methods from BudgetDetailsComponent)
src/app/budget-details/budget-details.class.ts  (defines interface and class for working with data model)
src/app/budget-details/budget-details-deactivate.guard.ts  (defines code to update the data model)
src/app/budget/budget.component.ts  (utilizes data and methods related to budget details)
src/app/app.module.ts  (provides for BudgetDetailsComponent to be included in the app)
src/app/app.routes.ts  (defines information for routing to budget details screen)
src/app/data-model.service.ts  (defines information for managing the data model)
********************************************************************
http://stackoverflow.com/questions/34331478/angular2-redirect-to-login-page

Here's an updated example using Angular 2.4

Routes with home route protected by AuthGuard

import { Routes, RouterModule } from '@angular/router';

import { LoginComponent } from './login/index';
import { HomeComponent } from './home/index';
import { AuthGuard } from './_guards/index';

const appRoutes: Routes = [
    { path: 'login', component: LoginComponent },

    // home route protected by auth guard
    { path: '', component: HomeComponent, canActivate: [AuthGuard] },

    // otherwise redirect to home
    { path: '**', redirectTo: '' }
];

export const routing = RouterModule.forRoot(appRoutes);

AuthGuard redirects to login page if user isn't logged in

Updated to pass original url in query params to login page

import { Injectable } from '@angular/core';
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';

@Injectable()
export class AuthGuard implements CanActivate {

    constructor(private router: Router) { }

    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
        if (localStorage.getItem('currentUser')) {
            // logged in so return true
            return true;
        }

        // not logged in so redirect to login page with the return url
        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});
        return false;
    }
}
For the full example and working demo you can check out this post
********************************************************************
https://developers.facebook.com/docs/facebook-login
https://developers.facebook.com/docs/facebook-login/best-practices
https://developers.facebook.com/docs/facebook-login/manually-build-a-login-flow
********************************************************************
https://github.com/amitgoel1287/angular2-facebook

angular2-facebook

##Learn how to integrate Facebook login in angular2 framework. As there is no good angular2 component available for same, I struggled a bit searching on internet and tried to figrued out how to do it with angular 2. in the last, after spending more than 10 hours, I figured out by modifying the current integration code and making it suitable for integration with angular 2. Looking back, it is very easy and straight forward. but I am adding the componentized code here so that no one else loses a night on the same problem.

##Pre-requisites:

I have used bootstrap css and bootstrap-social css library for the HTML button. include the following lines in your index.html code
<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-social/4.12.0/bootstrap-social.min.css" rel="stylesheet">
<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" rel="stylesheet">

For facebook, I have used facebook javascript SDK. just add the following line in your index.html
<script src="//connect.facebook.net/en_US/sdk.js"></script>
##Steps for integration:

Copy the 'facebooklogin.component.ts' file in your components directory of your project.
Copy the 'facebooklogin.html' in the place where you keep htmls. In case, you are not using templateUrl but using template in your component , then copy the HTML code in template
copy <facebook-login></facebook-login> HTML tag in the place you want to show the facebook login button.
It should work as it is. If you face errors, let me know or fork it and improve it. I have created this only for my project use, but will be happy to fix any issue if i find time.

********************************************************************
https://www.npmjs.com/package/@types/facebook-js-sdk

This package contains type definitions for the Facebook Javascript SDK (https://developers.facebook.com/docs/javascript).

npm install --save @types/facebook-js-sdk
********************************************************************
https://auth0.com/authenticate/angular2/facebook
********************************************************************
http://stackoverflow.com/questions/37770471/angular-2-facebook-login

I am developing a website that needs a login with the user's Facebook account.

Let's go to the code:

import {Component} from 'angular2/core';
import {Main} from './pages/main/main';

declare const FB: any;

@Component({
  selector: 'my-app',
  templateUrl: 'app/app.html',
  directives: [Main]
})

export class AppComponent implements OnInit {

token: any;
loged: boolean = false;
user = { name: 'Hello' };

constructor() { }

statusChangeCallback(response: any) {
    if (response.status === 'connected') {
        console.log('connected');
    } else {
        this.login();
    }
}

login() {
    FB.login(function(result) {
        this.loged = true;
        this.token = result;
    }, { scope: 'user_friends' });
}

me() {
    FB.api('/me?fields=id,name,first_name,gender,picture.width(150).height(150),age_range,friends',
        function(result) {
            if (result && !result.error) {
                this.user = result;
                console.log(this.user);
            } else {
                console.log(result.error);
            }
        });
}

ngOnInit() {
    FB.getLoginStatus(response => {
        this.statusChangeCallback(response);
    });
}
}

But the user just exists inside the method. If I print it outside, its will return nothing.
I just want to print the users name etc. at the website page.

------------

you can use fat arrow functions to use the same context for "this":

login() {
  FB.login((result: any) => {
    this.loged = true;
    this.token = result;
  }, { scope: 'user_friends' });
}

------------

For the facebook javascript SDK, You just add the following line in your index.html

<script src="//connect.facebook.net/en_US/sdk.js"></script>
and in ngOnInit() :

    `FB.init({
        appId      : 'your-app-id',
        cookie     : false,
        xfbml      : true,  // parse social plugins on this page
        version    : 'v2.5' // use graph api version 2.5
    });`
********************************************************************
http://stackoverflow.com/questions/37063685/facebook-oauth-the-domain-of-this-url-isnt-included-in-the-apps-domain
********************************************************************
https://www.facebook.com/help/218345114850283?helpref=about_content

To edit the privacy and settings for your apps and games:

1. Click on (down arror icon) in the top right corner of Facebook and select Settings
2. Click Apps in the left menu
3. Hover over an app and click on (pencil icon) to edit its settings
********************************************************************
https://developers.facebook.com/apps

(web site to view dashboard for Facebook app)

********************************************************************
Wize­F­i­P­r­o­t­o­type   (Facebook App)

API Version:  v2.8
App ID        1862692110681013
App Secret    77e9cc473be0aa09778d1311176768d5
Client Token  27045e2239e6d09934d1fc12f7779cbc
********************************************************************
http://stackoverflow.com/questions/18511321/allowing-multiple-domains-for-1-facebook-app-like-tumblr

(how set up more than one App Site URL [some say not really possible])

Worked for me: "The trick is to specify multiple app domains and use a comma separated list of valid URL's for the website URL configuration."

https://www.sitepoint.com/community/t/single-facebook-app-with-multiple-domains/99834/4
********************************************************************
https://developers.facebook.com/docs/apps/register
********************************************************************
http://stackoverflow.com/questions/41029065/login-to-facebook-for-angular-2-app

How can I organize login with Facebook in my Angular 2 app (with creation of a user account and authorization on my backend server)?

At this moment I can get authorization_code from Facebook and then get access_token with my backend app.

Now I try to create an Angular 2 app with a login page and an AuthService that sends a request to Facebook and handles the redirected answer with authorization_code and then sends this code to my backend server in order to receive access_token, create a new user if necessary and return a JWT to my Angular 2 app.

How can I handle Facebook's response (callback) with authorization_code in my Angular 2 app in order to send it to my backend (in order to receive JWT)?

-------------

You need a route Facebook can call back to that handles the URL parameters appropriately. I recently implemented this for OAuth via GitHub: github.com/textbook/prioritise-me/blob/…. For OAuth to work you send the user away to the provider, then the provider needs to know where to send them back to. – jonrsharpe Dec 7 '16 at 23:22

Facebook has a guide to implementing OAuth with examples: developers.facebook.com/docs/facebook-login/…. You need to have a page at the redirect_uri that can handle the returned information. – jonrsharpe Dec 7 '16 at 23:37

Thanks! One problem is... how can I use # in redirect_uri? or it is not possible? – Andrey K. Dec 8 '16 at 1:36

********************************************************************
http://4dev.tech/2016/03/login-screen-and-authentication-with-angular2/

(example for username, password protocol)
********************************************************************
http://stackoverflow.com/questions/36934656/getting-typescript-to-work-for-angular-2-project-with-facebook-login

Getting typescript to work for Angular 2 project with facebook login

I am trying to get up and running with Angular 2 and typescript. So far so good, but I am having some troubles to get a Facebook login message working. I found a project on github that demonstrated how this can be done. In this example, they have the following connector:

fbconnector.ts

export class FBConnector {

    constructor(appID: string) {
        if (!window.fbAsyncInit) {
            console.log('define');
            window.fbAsyncInit = function() {
                FB.init({
                    appId: appID,
                    xfbml: true,
                    version: 'v2.5'
                });
            };
        }
    }

    initFB() {
        var js: any,
            id = 'facebook-jssdk',
            ref = document.getElementsByTagName('script')[0];

        if (document.getElementById(id)) {
            return;
        }

        js = document.createElement('script');
        js.id = id;
        js.async = true;
        js.src = "//connect.facebook.net/en_US/sdk.js";

        ref.parentNode.insertBefore(js, ref);
    }

}

This gives the following 2 errors when I am compiling my typescript:

error TS2339: Property fbAsyncInit does not exist on type 'Window'.
error TS2304: Cannot find name 'FB'.
This makes sense when you think about it, typescript needs these variables defined. I guess this is partly because I am new to typescript, but I don't exactly know how this should be done. Should I make a custom typings file? Or should I use workarounds? (For example adding in front of window?)

--------------

Eventually found the answer, DefinitelyTyped has type definitions for the Facebook Javascript SDK (over here).

All I had to do was add the file and reference to it with the following line at the top of my file:

/// <reference path="../../../typings/main/ambient/fbsdk/index.d.ts" />
********************************************************************
http://blog.selfbits.io/blog/tutorial/angular2/2016/11/24/dashboard-tutorial-part3-social-auth.html
(uses 3rd party library)
********************************************************************
http://jasonwatmore.com/post/2016/09/29/angular-2-user-registration-and-login-example-tutorial

Angular 2 User Registration and Login Example & Tutorial

March 16 2017 - Updated to Angular 2.4.9 and created a Webpack version of the example.

(uses login interface screen with the following information-)
Username
Password
Login  Register

(excellent discussion)

(explains how to set up production configuration)
********************************************************************
http://stackoverflow.com/questions/37631098/how-to-bundle-an-angular-2-app-for-production

Deployment

You can get a preview of your application using the ng serve --prod --aot command that starts a local HTTP server such that the application with production files is accessible using http://localhost:4200.

For a production usage, you have to deploy all the files from the dist folder in the HTTP server of your choice.
********************************************************************
https://github.com/shlomiassaf/angular2-modal/issues/109

Failed to load resource: the server responded with a status of 404 (Not Found)

------------

I did this to make it work:

In angular-cli.build.js:

    module.exports = function(defaults) {
      return new Angular2App(defaults, {
        vendorNpmFiles: [
          [ ... other file globs ...],
          'angular2-modal/**/*.+(ts|js|js.map)',
        ]
      });
In system.config.ts, I added:

const map: any = {
  'angular2-modal': 'vendor/angular2-modal'
};
********************************************************************
scp (SSH secure copy) information

To use full power of scp you need to go set up the following:

Public key authorizdation
------------------------
Create ssh aliases
Then, for example if you'll have this ~/.ssh/config:

Host test
    User testuser
    HostName test-site.com
    Port 22022

Host prod
    User produser
    HostName production-site.com
    Port 22022

you'll save yourself from password entry and simplify scp syntax like this:

copy directory using scp
------------------------

scp -rp sourcedirectory user@dest:/path
-r means recursive
-p preserves modification times, access times, and modes from the original file.
Note: This creates the sourcedirectory inside /path thus the files will be in /path/sourcedirectory

scp -r prod:/path/dir /home/user/Desktop   # copy to local
scp -r prod:/path/dir test:/tmp

scp -rp dist pe:/path/to/destination/    (from local to remote)
scp -rp dist pe:/path/to/destination/    (from local to remote)

copy file using scp
-------------------
cd /../../dir
scp file test:/tmp/   (from local to remote)
scp test:/tmp/file .  (from remote to local)

where test is alias for remote host
********************************************************************
https://www.npmjs.com/package/ng2-currency-mask

Use in HTML file:
<input currencyMask [(ngModel)]="value" [options]="{ prefix: 'R$ ', thousands: '.', decimal: ',' }"/>

Available options:

- align - Text alignment in input. (default: right)
- allowNegative - If true can input negative values. (default: true)
- decimal - Separator of decimals (default: '.')
- precision - Number of decimal places (default: 2)
- prefix - Money prefix (default: '$ ')
- suffix - Money suffix (default: '')
- thousands - Separator of thousands (default: ',')

Attempt to use this tool resulted in the following:

ERROR in /Users/daveland/BrickWire/MoneyOrganizer/tests/test17/WizeFiPrototype/node_modules/ng2-currency-mask/src/currency-mask.directive.d.ts (10,21): Type 'KeyValueDiffer' is not generic.)
********************************************************************
http://stackoverflow.com/questions/35299583/add-comma-separated-thousands-to-number-inputs-in-angular2

(use pipe)
********************************************************************
http://stackoverflow.com/questions/36091421/how-to-add-thousand-separating-commas-for-numbers-in-angularjs
********************************************************************
http://stackoverflow.com/questions/40348290/angular-2-issues-with-number-pipe-on-input
********************************************************************
http://stackoverflow.com/questions/13412204/localization-of-input-type-number

(thorough discussion on this issue)

I work on a web application running in Chrome, where I have inputs with type number. In my locale commas are used for decimal numbers and a space is used for thousand separation (not that important), but when I enter these characters into a number field, they are simply removed, effectively increasing money amounts by a hundred.

I have set the language both in the browser settings and on the page, but I still need to use a period for decimals. Is there any way I can configure the field to accept commas?

Alternatively, I'll have to solve this using javascript. I guess I could handle the keydown event and change commas to periods as the user types, but that wouldn't give a great user experience, would it? So how can I acheive this with a minimal footprint in my code?

-----------

use an <input type="text" pattern="">

-----------

The spec is clear: only a period is allowed as the decimal separator. Its up to the browsers to provide localization support for forms. Thousand separators are not allowed.

-----------

The HTML5 input type=number is inadequate from the localization point of view, due to both the definition and the implementations. It is meant to be localized but as per the locale of the browser, which you cannot set or even know as a designer/author.

On my Chrome, the input type=number step=0.001 accepts 1,2 (with comma) and sends it as 1.2 and it accepts 1.200 (with a period), visibly converting it to 1200 and sending as such. This is how things are meant to be, more or less, when the browser locale is Finnish. But it fails to accept 1 200 (which is standard way of writing 1200 in Finnish) and instead sends just the digit 1.

So it’s rather hopeless. Use whatever JavaScript widgets you can find, or a simple text input box. Anything is probably better than input type=number unless all users use browsers with the same locale and have the same expectations on the format of numbers.
********************************************************************
https://ctrl.blog/entry/html5-input-number-localization

Inputting an invalid value into a <input type="number"> will, as per the specification, set the value to an empty string. The value presented to the user will still be whatever they typed, but the form will not actually submit any data. This is a big usability as well as functional problem for web applications.

Having a fallback parsing in JavaScript is recommended as older browsers do not support numeric input types. Take care to ensure that any server validation is identical to the client-side validation done by the browser (with type="number") and in JavaScript.
********************************************************************
http://stackoverflow.com/questions/34939612/in-angular-2-how-to-display-a-number-as-two-decimal-rounded-currency

In angular 2, how to display a number as two decimal rounded currency?

-------------

Use this code.
{{num | currency:'USD':true:'1.2-2'}}


Here is a working example http://plnkr.co/edit/xnN1HnJtTel6WA24GttR?p=preview

-------------

well you got the correct answer but still i think i can elaborate more this answer so posting it as answer:

First of all there are number of pipes available of the angular2 to use in our project some of them are listed below

CurrencyPipe , DatePipe, UpperCasePipe, LowerCasePipe, and PercentPipe and many more.
Here as your question you have problem related to currency pipe. so i want to explain bit more as other answers.

CurrencyPipe :

A pipe may accept any number of optional parameters to fine-tune its output. We add parameters to a pipe by following the pipe name with a colon ( : ) and then the parameter value (e.g., currency:'EUR'). If our pipe accepts multiple parameters, we separate the values with colons (e.g. slice:1:5).

{{number | currency:'your_type':true:'1.2-2'}}

here...first parameter is currency type which is either EUR,USD or anything, Second parameter is true/false for the symbolDisplay which is false byDefault. then Third one is range limit basically a range limit . You can set a min and max length after the decimal point and a fixed number (or leave it blank for default) for the places before the decimal point.

I have found some good tutorials for the pipes in the angular2 which i am posting here..

http://voidcanvas.com/angular-2-pipes-filters/

https://angular.io/docs/ts/latest/guide/pipes.html

Hope it Helps and clarify more about pipes !!

-------------

You are using the correct pipe. You just need to add the digit info to the output.

{{num | currency:'USD':true}} should be...

{{num | currency:'USD':true:'1.2-2'}}

For reference: 'USD' represents the type of currency, true represents whether to show the currency symbol ($), and '1.2-2' represents the digit info.

The digit info is minIntegerDigits.minFractionDigits-maxFractionDigits.

minIntegerDigits is the minimum number of integer digits to use and defaults to 1.
minFractionDigits is the minimum number of digits after fraction and defaults to 0.
maxFractionDigits is the maximum number of digits after fraction and defaults to 3.

Source for the digit info can be found here: https://angular.io/docs/ts/latest/api/common/index/DecimalPipe-pipe.html

-------------

(good solution using type number -- however, can not type comma input)
<input type="number" [(ngModel)]="myModel" (keyup)="onBlurMethod()">
<br>
<br> The formatted currency is :
<br> {{myModel | currency:'USD':true:'1.2-2' }}
Here is the working example.

http://plnkr.co/edit/pSK8p7u3oo4WsAB9aFBS?p=preview

********************************************************************
http://stackoverflow.com/questions/36858634/angular2-currency-pipe-change-decimal-separator

I am working on an angular2 app (multiple actually). And I live in the Netherlands.

Currently I'm formatting my currency with the following:

{{someIntegerWithCentsToBeDivided / 100 | currency:'EUR':true:'1.0-2'}}

This displays something like 500 to be Eurosign 5 and 501 to be Eurosign 5.01.

Now we dutchies really like comma's the other way around so does anyone know how to change the . to a ,?

Bonus points if someone knows how to show 5,- optionally when there is no cents. My thoughts now would be to extend the CurrencyPipe

------------

What locale is your browser using? Check navigator.language in the JS console.

------------

Your problem has probably been solved some time ago, but just for reference for other Dutch developers (like myself):

Create a custom Pipe:

import {Pipe} from '@angular/core';

@Pipe({
    name: 'currencyFormat'
})
export class CurrencyFormat {
    transform(value: number,
        currencySign: string = '€ ',
        decimalLength: number = 2,
        chunkDelimiter: string = '.',
        decimalDelimiter:string = ',',
        chunkLength: number = 3): string {

        value /= 100;

        let result = '\\d(?=(\\d{' + chunkLength + '})+' + (decimalLength > 0 ? '\\D' : '$') + ')'
        let num = value.toFixed(Math.max(0, ~~decimalLength));

        return currencySign+(decimalDelimiter ? num.replace('.', decimalDelimiter) : num).replace(new RegExp(result, 'g'), '$&' + chunkDelimiter);
    }
}

Now you can use:

{{someIntegerWithCentsToBeDivided | currencyFormat}}

The Pipe has already all the Dutch defaults included, but you can easily change them or use them as arguments in the template. For example:

{{1234567 | currencyFormat:'$',2,' ','.',3}}
will give $12 345.67 as output.

----

I'll accept this for now since it is a working version. However what I did is having some default values on my Pipe, and during bootstrap I'd read config and pass settings. This way i could do a simple | money instead of all those options all the time.

------------

Just create a pipe to replace anything:

import { PipeTransform, Injectable, Pipe }     from '@angular/core';
@Pipe({
  name: 'replace'
})
@Injectable()
export class ReplacePipe implements PipeTransform {
  constructor(){}
  transform(item: any, replace, replacement): any {
    if(item == null) return "";
    item = item.replace(replace, replacement);
    return item;
  }
}

I used that twice to solve your case.

{{ 5.01999 | currency:'BRL':true | replace:'.':',' | replace:',00':',-' }}}

------

It's not the best solution but I can see why this works. – Mathijs Segers Feb 28 at 14:48

------

It's a bad solution. I used another way. I created my own currency pipe to achieve the BRL format with comma.

********************************************************************
http://stackoverflow.com/questions/19094150/using-angularjs-directive-to-format-input-field-while-leaving-scope-variable-unc

Using AngularJS directive to format input field while leaving scope variable unchanged

I'm having an issue formatting an input field, while leaving the underlying scope variable non-formatted.

What I want to achieve is a text field to display currency. It should format itself on the fly, while handling wrong input. I got that working, but my problem is that I want to store the non-formatted value in my scope variable. The issue with input is that it requires a model which goes both ways, so changing the input field updates the model, and the other way around.

(answers utilize AngularJS rather than Angular 2)
********************************************************************
http://stackoverflow.com/questions/39642882/using-pipes-within-ngmodel-on-input-elements-in-angular2-view

Using Pipes within ngModel on INPUT Elements in Angular2-View

I have an HTML INPUT field.

<input [(ngModel)]="item.value" name="inputField" type="text" />
and I want to format its value and use an existing pipe:

.... [(ngModel)]="item.value | useMyPipeToFormatThatValue" .....
and get the error message:

Cannot have a pipe in an action expression
How can I use pipes in this context?

--------------

You can't use Template expression operators(pipe, save navigator) within template statement:

(ngModelChange)="Template statements"
(ngModelChange)="item.value | useMyPipeToFormatThatValue=$event"

https://angular.io/docs/ts/latest/guide/template-syntax.html#!#template-expressions

So you should write it as follows:

<input [ngModel]="item.value | useMyPipeToFormatThatValue"
      (ngModelChange)="item.value=$event" name="inputField" type="text" />

Plunker Example

--------------

<input [ngModel]="item.value | useMyPipeToFormatThatValue"
      (ngModelChange)="item.value=$event" name="inputField" type="text" />

The solution here is to split the binding into a one-way binding and an event binding - which the syntax [(ngModel)] actually encompasses. [] is one-way binding syntax and () is event binding syntax. When used together - [()] Angular recognizes this as shorthand and wires up a two-way binding in the form of a one-way binding and an event binding to a component object value.

The reason you cannot use [()] with a pipe is that pipes work only with one-way bindings. Therefore you must split out the pipe to only operate on the one-way binding and handle the event separately.

See Angular Template Syntax for more info.
********************************************************************
http://stackoverflow.com/questions/39634025/how-to-display-the-currency-symbol-to-the-right-in-angular-2

Currency pipe format is controlled by the current locale rules. See also Using Pipes:

The Date and Currency pipes need the ECMAScript Internationalization API. Safari and other older browsers don't support it. We can add support with a polyfill.

<script src="https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en"></script>
Under the hood CurrencyPipe delegates formatting to new Intl.NumberFormat(locale, options).format(num);.

Intl.NumberFormat Using options:

var number = 123456.789;

// request a currency format
console.log(new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(number));
// → 123.456,79 €

// the Japanese yen doesn't use a minor unit
console.log(new Intl.NumberFormat('ja-JP', { style: 'currency', currency: 'JPY' }).format(number));
// → ￥123,457
In other words, formatting currencies with CurrencyPipe involves:

1. Using the correct locale. See this on how to replace the default locale, but this should be necessary for testing only, because the users are expected to have the correct locale set in the OS settings.

2. And using the polyfill for older browsers.
********************************************************************
http://stackoverflow.com/questions/34904683/how-to-set-locale-in-datepipe-in-angular2/39344889#39344889

How to set locale in DatePipe in Angular2?

I want to display Date using European format dd/mm/yyyy but using DatePipe 'shortDate' format it only display using US date style mm/dd/yyyy.
Im assuming thats the default locale is en_US. Maybe I am missing in the docs but how can I change the default locale settings in an Angular2 app? Or maybe is there some way to pass a custom format to DatePipe?

-----------

As of Angular2 RC6, you can set default locale in your app module, by adding a provider:

@NgModule({
  providers: [
    { provide: LOCALE_ID, useValue: "en-US" }, //replace "en-US" with your locale
    //otherProviders...
  ]
})

Example locales:
en-US  United States  4,294,967,295.00
en-GB  Great Britain  4,294,967,295.00
fi-FI  Finland        4 294 967 295,00
fr-FR  France         4 294 967 295,00
de-DE  Germany        4 294 967.295,00
nb-NO  Norway         4.294.967.295,00
es-ES  Spain          4.294.967.295,00
it-IT  Italy          4'294'967'295,00

The Currency/Date/Number pipes should pick up the locale. LOCALE_ID is an OpaqueToken, to be imported from angular/core.

import { LOCALE_ID } from '@angular/core';
For a more advanced use case, you may want to pick up locale from a service. Locale will be resolved (once) when component using date pipe is created:

{
  provide: LOCALE_ID,
  deps: [SettingsService],      //some service handling global settings
  useFactory: (settingsService) => settingsService.getLanguage()  //returns locale string
}

********************************************************************
https://en.wikipedia.org/wiki/ISO_4217

Table of official ISO 4217 currency code names

Examples:
USD  US dollar
EUR  Euro
NOK  Norway kroner
JPY  Japan yen
CNY  China yuan
********************************************************************
http://www.lingoes.net/en/translator/langcode.htm
(best chart for language codes)
********************************************************************
http://www.statisticalconsultants.co.nz/blog/how-the-world-separates-its-digits.html

(good chart of countries and example of their notation)
********************************************************************
http://stackoverflow.com/questions/37800841/input-mask-fields-in-angular2-forms

Is it possible to have model driven form in Angular 2 and find directive that would allow to mask input field like phone number entry (123) 123-4567?

------------

One way you could do it is using a directive that injects NgControl and manipulates the value
********************************************************************
http://stackoverflow.com/questions/37711026/angular-2-input-mask-input-box-display-formatted-value-while-model-retains-u

Angular 2 - Input mask: Input box display formatted value, while model retains unformatted value

I'm trying to have an input field format/mask values as they are typed, while having the actual model retain the raw (or differently formatted) value. I'm thinking phone numbers etc, but for simplicity am using uppercase for testing.

I've tried a bunch of stuff, hoping its as simple as a directive. But can't seem to get the display value to depart from the form value.

------------

Try to update control reference directly like this:

onInputChange() {
  let newValue = this.model.value.toUpperCase();
  this.model.control.updateValue(newValue);
}
See also plunker http://plnkr.co/edit/XYPWYgA8lbg2EdxPqzWj?p=preview

----

Makes sense. Thanks. I was trying to have the model value and display value different, but your answer gave me the answer:
plnkr.co/edit/VH5zn4S8q28CBpFutBlx?p=preview

------------

To be honest, i am still learning angular2 and the tech is still really immature to say this is the best way of doing it but after playing around with it:

import {Directive, ElementRef, Output, EventEmitter} from '@angular/core';
import {NgFormControl} from '@angular/common';

@Directive({
  selector: '[uppercase]',
  host: {
    '(input)': 'onInputChange()',
  }
})

export class UppercaseDirective {

  @Output() onChange = new EventEmitter();
  rawValue: string = '';

  constructor(private model: NgFormControl, private elementRef: ElementRef) { }

  onInputChange() {
    let str = this.model.value;
    this.rawValue = this.rawValue.substring(0, str.length) + str.substring(this.rawValue.length, str.length);
    let newValue = this.rawValue.toUpperCase();
    this.model.viewToModelUpdate(newValue);
    this.model.valueAccessor.writeValue(newValue);
    this.onChange.emit(this.rawValue);
  }

}
then you can get it like this:

<input [ngFormControl]='myForm.controls.field' uppercase (onChange)="raw = $event">
<div>
   {{ raw }}
</div>
Since whenever you update the model, the variable will change. You have to do is separate. Tried it in your plnkr and it worked

---

Thanks Ed. What I'm trying to achieve though, is have the form model contain the raw value.

********************************************************************
http://stackoverflow.com/questions/3790935/can-i-hide-the-html5-number-input-s-spin-box

--------

You're using stuff that the specification is not final on, so I'd say that no, there's not going to be a completely consistent, cross-browser way of fixing this.

just use input type="text", and use a form of javascript validation to make sure it's a number.
********************************************************************
https://blog.ngconsultant.io/custom-input-formatting-with-simple-directives-for-angular-2-ec792082976

Custom input formatting with simple directives in Angular 2


********************************************************************
http://stackoverflow.com/questions/39894394/angular2-i18n-language-switch

I'm looking for a way to

set dynamically the current language to be displayed: I have followed the latest angular cookbook here about internationalization but it says "the user's language is hardcoded as a global document.locale variable in the index.html"
How can this be set dynamically in angular2 + typescript?

------------

I am saving user selected language key into local storage:

//<select name="selectLocate" (change)="onChange($event.target.value)">
 public onChange(localeId: string): void {
    localStorage.setItem('localeId', localeId);
    location.reload(true);
  }
Then force reloading, and in i18n.provider.ts

let locale = localStorage.getItem('localeId');

----

simple and great. I have changed the plunkr example and it works fine! plnkr.co/edit/JyE4l4TjEruuPsrbanmK

********************************************************************
https://github.com/assisrafael/angular-input-masks
********************************************************************
https://docs.angularjs.org/guide/i18n

i18n and l10n

Internationalization (i18n) is the process of developing products in such a way that they can be localized for languages and cultures easily. Localization (l10n), is the process of adapting applications and text to enable their usability in a particular cultural or linguistic market. For application developers, internationalizing an application means abstracting all of the strings and other locale-specific bits (such as date or currency formats) out of the application. Localizing an application means providing translations and localized formats for the abstracted bits.

Currency symbol
AngularJS's currency filter allows you to use the default currency symbol from the locale service, or you can provide the filter with a custom currency symbol.

Best Practice: If your app will be used only in one locale, it is fine to rely on the default currency symbol. If you anticipate that viewers in other locales might use your app, you should explicitly provide a currency symbol.
Let's say you are writing a banking app and you want to display an account balance of 1000 dollars. You write the following binding using the currency filter:

{{ 1000 | currency }}
If your app is currently in the en-US locale, the browser will show $1000.00. If someone in the Japanese locale (ja) views your app, their browser will show a balance of ¥1000.00 instead. This is problematic because $1000 is not the same as ¥1000.

In this case, you need to override the default currency symbol by providing the currency currency filter with a currency symbol as a parameter.

If we change the above to {{ 1000 | currency:"USD$"}}, AngularJS will always show a balance of USD$1000 regardless of locale
********************************************************************
http://blog.mgechev.com/2016/07/05/using-stripe-payment-with-angular-2/
(excellent information)
********************************************************************
https://stripe.com/
********************************************************************
https://stripe.com/docs/subscriptions/quickstart
https://stripe.com/docs/subscriptions/creating
https://stripe.com/docs/subscriptions/plans
https://stripe.com/docs/api
https://stripe.com/docs/stripe.js
https://dashboard.stripe.com/account/apikeys
********************************************************************
https://stripe.com/docs/api#subscriptions

Subscriptions allow you to charge a customer's card on a recurring basis. A subscription ties a customer to a particular plan you've created.
********************************************************************
http://stackoverflow.com/questions/37824057/getting-stripe-customer-information-via-javascript-api-call-not-node-how

There's no way to do any of this client-side with or without Stripe.js since it would require using your Secret API key. You never want to put the Secret API key in the Javascript code as anyone could get access to it otherwise and use it on your behalf.

What you want to do instead is retrieve the customer server-side in your code first. Then, you share the data you need (customer id, card's id, last 4 or expiration date) to the client-side code to be able to display the information as needed.
********************************************************************
https://memberful.com/blog/stripe-vs-paypal/
********************************************************************
http://stackoverflow.com/questions/36543747/import-stripe-using-angular2-and-stripe-js
********************************************************************
https://stripe.com/docs/recipes/subscription-signup

Building a Subscription Signup Form

An important note is that both Checkout and the server-side code are required. Checkout securely accepts the customer’s payment information and the server-side code creates the actual subscription in Stripe.
********************************************************************
https://dzone.com/articles/a-step-by-step-guide-to-javascript-localization-2

What's the proper way to use Angular2 and Stripe.js? Ionic2 specifically would be nice but optional.

------------

Add the scripttag in the index.html and then put a declaration after the imports in home.ts

declare var Stripe: any; I believe this is the correct way to import external libs in ng2

Src: Nic Raboy There are a some more info there; the better way to install an external lib is to download the typedefs from DefinitelyTyped and install with $ typings install Then you should be able to import as usual

This is, of course, if there are typedefs in the DefinitelyTyped repo. There does not seem to exist typedefs for the Stripe library, though.

------------

Stripe seems to have type definitions now so alongside

npm install --save stripe
you can also run the following to get TypeScript definitions:

npm install --save @types/stripe
you should then be able to so something like:

import { Stripe } from 'stripe'
The above is psudo code as Ive not tested it but will will be something similar.

More info here: https://www.npmjs.com/package/@types/stripe

********************************************************************
https://stripe.com/blog/smarter-saved-cards

Smarter saved cards

Outdated card details are a big problem for online businesses. If your customers get a new card from their banks (or the number or expiry date changes), they have to manually re-add it to every service or the service stops working. It’s frustrating for customers, and loses paying customers for businesses needlessly.

We’ve rolled out support for handling new cards nicely. Now, when you save a customer with Stripe, their card will continue to work even if the physical card gets replaced by the bank. Stripe works directly with card networks so that your customers can continue using your service without interruption.

There’s no extra work required, and this feature works with most MasterCard, Discover, and Visa cards—without this improvement, over half of the cards stored with Stripe in the last year would stop working by 2016 if they weren’t updated.
********************************************************************
http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/BestPractices.html

Item Best Practices

DynamoDB items are limited in size (see Limits in DynamoDB). However, there is no limit on the number of items in a table. Rather than storing large data attribute values in an item, consider one or more of these application design alternatives.

- Use One-to-Many Tables Instead Of Large Set Attributes
- Use Multiple Tables to Support Varied Access Patterns
- Compress Large Attribute Values
- Store Large Attribute Values in Amazon S3
- Break Up Large Attributes Across Multiple Items

Use One-to-Many Tables Instead Of Large Set Attributes
------------------------------------------------------
If your table has items that store a large set type attribute, such as number set or string set, consider removing the attribute and breaking the table into two tables. To form one-to-many relationships between these tables, use the primary keys.

The Forum, Thread, and Reply tables in the Creating Tables and Loading Sample Data section are good examples of these one-to-many relationships. For example, the Thread table has one item for each forum thread, and the Reply table stores one or more replies for each thread.

Instead of storing replies as items in a separate table, you could store both threads and replies in the same table. For each thread, you could store all replies in an attribute of string set type; however, keeping thread and reply data in separate tables is beneficial in several ways:

- If you store replies as items in a table, you can store any number of replies, because a DynamoDB table can store any number of items.
If you store replies as an attribute value in the Thread table, you would be constrained by the maximum item size, which would limit the number of replies that you could store. (See Limits in DynamoDB)

- When you retrieve a Thread item, you pay less for provisioned throughput, because you are retrieving only the thread data and not all the replies for that thread.

- Queries allow you to retrieve only a subset of items from a table. By storing replies in a separate Reply table, you can retrieve only a subset of replies, for example, those within a specific date range, by querying the Reply table.
If you store replies as a set type attribute value, you would always have to retrieve all the replies, which would consume more provisioned throughput for data that you might not need.

- When you add a new reply to a thread, you add only an item to the Reply table, which incurs the provisioned throughput cost of only that single Reply item. If replies are stored in the Thread table, you incur the full cost of writing the entire Thread item including all replies whenever you add a single user reply to a thread.

Use Multiple Tables to Support Varied Access Patterns
-----------------------------------------------------

If you frequently access large items in a DynamoDB table and you do not always use all of an item's larger attributes, you can improve your efficiency and make your workload more uniform by storing your smaller, more frequently accessed attributes as separate items in a separate table.

For example, consider the ProductCatalog table described in the Creating Tables and Loading Sample Data section. Items in this table contain basic product information, such as product name and description. This information changes infrequently, but it is used every time an application displays a product for the user.

If your application also needed to keep track of rapidly changing product attributes, such as price and availability, you could store this information in a separate table called ProductAvailability. This approach would minimize the throughput cost of updates. To illustrate, suppose that a ProductCatalog item was 3 KB in size, and the price and availability attributes for that item was 300 bytes. In this case, an update of these rapidly changing attributes would cost three, the same cost as updating any other product attributes. Now suppose that price and availability information were stored in a ProductAvailability table instead. In this case, updating the information would cost only one write capacity unit.

Note: For an explanation of capacity units, see Provisioned Throughput.

If your application also needed to store product data that is displayed less frequently, you could store this information in a separate table called ExtendedProductCatalog. Such data might include product dimensions, a track listing for music albums, or other attributes that are not accessed as often as the basic product data. This way, the application would only consume throughput when displaying basic product information to the users, and would only consume additional throughput if the user requests the extended product details.

Here are several advantages and considerations for splitting the attributes of an item into multiple items in different tables:

- The throughput cost of reading or writing these attributes is reduced. The cost of updating a single attribute of an item is based on the full size of the item. If the items are smaller, you will incur less throughput when you access each one.

- If you keep your frequently accessed items small, your I/O workload will be distributed more evenly. Retrieving a large item can consume a great deal of read capacity all at once, from the same partition of your table; this can make your workload uneven, which can cause throttling. For more information, see Avoid Sudden Spikes in Read Activity

- For single-item read operations, such as GetItem, throughput calculations are rounded up to the next 4 KB boundary. If your items are smaller than 4 KB and you retrieve the items by primary key only, storing item attributes as separate items may not reduce throughput. Even so, the throughput cost of operations such as Query and Scan are calculated differently: the sizes of all returned items are totaled, and that final total is rounded up to the next 4 KB boundary. For these operations, you might still reduce your throughput cost by moving the large attributes into separate items. For more information, see Capacity Unit Calculations.

Compress Large Attribute Values
-------------------------------
You can compress large values before storing them in DynamoDB. Doing so can reduce the cost of storing and retrieving such data. Compression algorithms, such as GZIP or LZO, produce a binary output. You can then store this output in a Binary attribute type.

For example, the Reply table in the Creating Tables and Loading Sample Data section stores messages written by forum users. These user replies might consist of very long strings of text, which makes them excellent candidates for compression.

For sample code that demonstrates how to compress long messages in DynamoDB, see:

Example: Handling Binary Type Attributes Using the AWS SDK for Java Document API
Example: Handling Binary Type Attributes Using the AWS SDK for .NET Low-Level API
********************************************************************
http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html

Limits in DynamoDB

Capacity Unit Sizes
-------------------
One read capacity unit = one strongly consistent read per second, or two eventually consistent reads per second, for items up to 4 KB in size.

One write capacity unit = one write per second, for items up to 1 KB in size.

Provisioned Throughput Minimums and Maximums
--------------------------------------------
For any table or global secondary index, the minimum settings for provisioned throughput are 1 read capacity unit and 1 write capacity unit.

An AWS account places some initial maximum limits on the throughput you can provision:

US East (N. Virginia) Region:
Per table – 40,000 read capacity units and 40,000 write capacity units
Per account – 80,000 read capacity units and 80,000 write capacity units

All Other Regions:
Per table – 10,000 read capacity units and 10,000 write capacity units
Per account – 20,000 read capacity units and 20,000 write capacity units
The provisioned throughput limit includes the sum of the capacity of the table together with the capacity of all of its global secondary indexes.

You can request an increase on any of these limits. For more information, see https://aws.amazon.com/support.

Table Size
----------
There is no practical limit on a table's size. Tables are unconstrained in terms of the number of items or the number of bytes.

Tables Per Account
------------------
For any AWS account, there is an initial limit of 256 tables per region.

String
------
The length of a String is constrained by the maximum item size of 400 KB.

Strings are Unicode with UTF-8 binary encoding. Because UTF-8 is a variable width encoding, DynamoDB determines the length of a String using its UTF-8 bytes.

Number
------
A Number can have up to 38 digits of precision, and can be positive, negative, or zero.

Positive range: 1E-130 to 9.9999999999999999999999999999999999999E+125
Negative range: -9.9999999999999999999999999999999999999E+125 to -1E-130
DynamoDB uses JSON strings to represent Number data in requests and replies. For more information, see DynamoDB Low-Level API.

If number precision is important, you should pass numbers to DynamoDB using strings that you convert from a number type.

Binary
------
The length of a Binary is constrained by the maximum item size of 400 KB.

Applications that work with Binary attributes must encode the data in Base64 format before sending it to DynamoDB. Upon receipt of the data, DynamoDB decodes it into an unsigned byte array and uses that as the length of the attribute.

Item Size
---------
The maximum item size in DynamoDB is 400 KB, which includes both attribute name binary length (UTF-8 length) and attribute value lengths (again binary length). The attribute name counts towards the size limit.

For example, consider an item with two attributes: one attribute named "shirt-color" with value "R" and another attribute named "shirt-size" with value "M". The total size of that item is 23 bytes.

Item Size for Tables With Local Secondary Indexes
-------------------------------------------------
For each local secondary index on a table, there is a 400 KB limit on the total of the following:

The size of an item's data in the table.
The size of the local secondary index entry corresponding to that item, including its key values and projected attributes.

Attribute Values
----------------
An attribute value cannot be an empty String or empty Set (String Set, Number Set, or Binary Set). However, empty Lists and Maps are allowed.

Nested Attribute Depth
----------------------
DynamoDB supports nested attributes up to 32 levels deep.

API-Specific Limits
-------------------
CreateTable/UpdateTable/DeleteTable
In general, you can have up to 10 CreateTable, UpdateTable, and DeleteTable requests running simultaneously (in any combination). In other words, the total number of tables in the CREATING, UPDATING or DELETING state cannot exceed 10.

The only exception is when you are creating a table with one or more secondary indexes. You can have up to 5 such requests running at a time; however, if the table or index specifications are complex, DynamoDB might temporarily reduce the number of concurrent requests below 5.

BatchGetItem
A single BatchGetItem operation can retrieve a maximum of 100 items. The total size of all the items retrieved cannot exceed 16 MB.

BatchWriteItem
A single BatchWriteItem operation can contain up to 25 PutItem or DeleteItem requests. The total size of all the items written cannot exceed 16 MB.

DescribeLimits
DescribeLimits should only be called periodically. You can expect throttling errors if you call it more than once in a minute.
********************************************************************
https://blog.thoughtram.io/angular/2016/07/27/custom-form-controls-in-angular-2.html

If we do decide to create a custom form control in Angular, we should make sure that:

- It properly propagates changes to the DOM/View
- It properly propagates changes to the Model
- It comes with custom validation if needed
- It adds validity state to the DOM so it can be styled
- It’s accessible
- It works with template-driven forms
- It works with model-driven forms
- It needs to be responsive

We will discuss different scenarios through out this article to demonstrate how these things can be implemented.

We need to learn what a ControlValueAccessor is, because that’s the thing that Angular uses to build a bridge between a form model and a DOM element.
********************************************************************
POST https://cognito-identity.us-west-2.amazonaws.com/ 400 (Bad Request)
"Missing credentials in config"

Error fixed by putting proper "Identity pool ID" in call to AWS.config.credentials
********************************************************************
POST https://lambda.us-west-2.amazonaws.com/2015-03-31/functions/processData/invocations 403 (Forbidden)

"User: arn:aws:sts::418492632830:assumed-role/Cognito_processWizeFiPrototypePoolAuth_Role/CognitoIdentityCredentials is not authorized to perform: lambda:InvokeFunction on resource: arn:aws:lambda:us-west-2:418492632830:function:processData"
code: "AccessDeniedException"

Error fixed by correcting to "FunctionName: 'processWizeFiPrototype'" in invokeDataHandlingFunction in data-model.services.ts
********************************************************************
Error situation: after introducing promises to manage asynchronous activity in the login process, the automatic display of error messages was lost.
Apparently, the change detection process was not seeing changes in the messages variable.

The solution was to utilize the tick() method of the ApplicationRef class to force the system to see when changes are made to the messages variable.
********************************************************************
Unhandled Promise rejection: No provider for ManageMessages! ; Zone: angular ; Task: Promise.then ; Value: NoProviderError {__zone_symbol__error
: Error: DI Error
    at NoProviderError.ZoneAwareError (http://localhost:4200/polyfills.bundle.js:327…, _nativeError: ZoneAwareError, keys: Array[1], injectors: Array[1], __zone_symbol__message: "No provider for ManageMessages!"…}

Problem fixed by making proper updates in app.module.ts
********************************************************************
Error situation: Facebookk login is not working in Safari on iPhone

The solution was to turn off popup block setting in Safari
********************************************************************
http://stackoverflow.com/questions/34491871/angular2-view-not-updating-after-variable-changes-in-settimeout

I am facing a weird issue where the variable i am using in my view is not being updated after setting a timeout.

---------

I had a very similar problem to the OP where even in a basic Angular2 setup changes to bound properties would not be reflected by the view automatically. At this point in time we're using Angular2 2.0.0-rc.6. There was no error message.

In the end I found the culprit to be a reference to es6-promise.js, which was 'required' by a third party component we use. Somehow this interfered with the core-js reference we are using which is suggested with rc6 in some of the Angular2 tutorials.

As soon as I got rid of the es6-promise.js reference, the view updated correctly after changing a property on my component (via Promise or timeout).

Hope this helps somebody some day.

---------

In Angular2 (~2.1.2) another way to make it work is through the ChangeDetectorRef class. The original question code would look like this:

import {
  ChangeDetectorRef
  // ... other imports here
} from '@angular/core';

 @Component({
    selector: "my-app",
    bindings: []
})

@View({
    templateUrl: "templates/main.component.html",
    styleUrls: ['styles/out/components/main.component.css']
})

export class MainComponent {

    public test2 = "initial text";

    constructor(private cd: ChangeDetectorRef) {
        setTimeout(() => {
            this.test2 = "updated text";

            // as stated by the angular team: the following is required, otherwise the view will not be updated
            this.cd.markForCheck();

        }, 500);
    }
}

----------

ChangeDetectorRef is not option to use here. It is looking for changes in a given component and its children.

In your case it would be better to use ApplicationRef:

import {Injectable, ApplicationRef } from '@angular/core';

@Injectable()
export class MyService {
  private count: number = 0;
  constructor(private ref: ApplicationRef) {}

  increment() {
    this.count++;
    this.ref.tick();
  }
}

********************************************************************
http://blog.assaf.co/angular-2-change-detection-zones-and-an-example/

I will argue that property changes within the listener will not propagate, the color will not change. why? NgZone does not wrap the matchMedia API so it doesn't know that a change detection scan is needed.
If instead of registering a listen for MediaQueryList we would have registered it for a click event on the document the box color would change, since NgZone wraps all click event.

To make this work we need to run the change detection scan manually, there are several ways to do it:

1. Inject ApplicationRef and call ApplicationRef.tick()
2. Inject ChangeDetectionRef and run the scan directly.
3. Run the listener inside an angular zone.

Option 1 & 2 will work just fine but they require an action, they are not part of the flow.
Option 3 is more natural, it does not require an action, let's implement it:
********************************************************************
https://git-scm.com/docs/git-grep

-e
The next parameter is the pattern. This option has to be used for patterns starting with - and should be used in scripts passing user input to grep. Multiple patterns are combined by or.

--and
--or
--not
( …​ )
Specify how multiple patterns are combined using Boolean expressions. --or is the default operator. --and has higher precedence than --or. -e has to be used for all patterns.

git grep -e '#define' --and \( -e MAX_PATH -e PATH_MAX \)
Looks for a line that has #define and either MAX_PATH or PATH_MAX.

git grep -e date --and -e Created
git grep -e Created --or -e Updated
git grep -e persistent --and \( -e Created --or -e Updated \)
********************************************************************
http://stackoverflow.com/questions/30296850/is-it-possible-to-change-value-of-range-key-in-dynamodb-table

From the docs of AttributeValueUpdate

You cannot use UpdateItem to update any primary key attributes. Instead, you will need to delete the item, and then use PutItem to create a new item with new attributes.
********************************************************************
https://blog.idrsolutions.com/2015/02/remote-debugging-ios-safari-on-os-x-windows-and-linux/
********************************************************************
https://forum.ionicframework.com/t/facebook-login-working-in-browser-but-not-on-ios-simulator/4203/2
********************************************************************
https://github.com/Ciul/angular-facebook/issues/30

Facebook login callback not called

---------

Putting this on my index.html before all the js inclusion solved this problem for me

    <script type="text/javascript">
        // We need to add this because a race condition can make the library to call fbAsyncInit before its
        // defined, so we postpone it
        window.fbAsyncInit = function() {
            setTimeout(function(){
                fbAsyncInit();
            }, 50);
        }
    </script>

---------

you might have stumped over this safari popup blocker issue as I did:        <========================== this is the problem
http://stackoverflow.com/questions/26817023/fb-login-inside-fb-getloginstatus-popup-window-blocked
********************************************************************
http://stackoverflow.com/questions/26817023/fb-login-inside-fb-getloginstatus-popup-window-blocked

As we already discussed in the comments, FB.login must be called on user interaction, the example in the docs is not correct.

This should be a working example how to do a login correctly, copied together from several articles in the Facebook docs:

<script>
    //call this on user interaction (click)
    function doLogin() {
        FB.login(function(response) {
            if (response.authResponse) {
                console.log('Welcome!  Fetching your information.... ');
                FB.api('/me', function(response) {
                    console.log('Good to see you, ' + response.name + '.');
                });
            } else {
                console.log('User cancelled login or did not fully authorize.');
            }
        }, {scope: 'email,user_friends'});
    }

    window.fbAsyncInit = function() {
        FB.init({
            appId      : 'your-app-id',
            xfbml      : true,
            version    : 'v2.1'
        });

        FB.getLoginStatus(function (response) {
            if (response.status === 'connected') {
                // the user is logged in and has authenticated your
                // app, and response.authResponse supplies
                // the user's ID, a valid access token, a signed
                // request, and the time the access token
                // and signed request each expire
                var uid = response.authResponse.userID;
                var accessToken = response.authResponse.accessToken;
            } else if (response.status === 'not_authorized') {
                // the user is logged in to Facebook,
                // but has not authenticated your app
            } else {
                // the user isn't logged in to Facebook.
            }
        });
********************************************************************
http://stackoverflow.com/questions/26916545/any-workaround-to-avoid-unsupported-browser-when-trying-to-use-fb-ui-on-ch
********************************************************************
http://stackoverflow.com/questions/16843116/facebook-oauth-unsupported-in-chrome-on-ios

Facebook OAuth “Unsupported” in Chrome on iOS  (August 2013)
********************************************************************
http://stackoverflow.com/questions/35688084/how-get-query-params-from-url-in-angular2

Whith a URL like this:

http://stackoverflow.com?param1=value

You can get the param1 value using code shown below:

import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute, Params } from '@angular/router';

@Component({
    selector: '',
    templateUrl: './abc.html',
    styleUrls: ['./abc.less']
})
export class AbcComponent implements OnInit {
    constructor(private route: ActivatedRoute) { }

    ngOnInit() {
        // get param
        let param1 = this.route.snapshot.queryParams["param1"];
    }
}
********************************************************************
x = {'key': 1};
if ( x.hasOwnProperty('key') ) {
    //Do this
}
********************************************************************
http://stackoverflow.com/questions/5189203/fb-getloginstatus-not-calling-its-callback

The title really says it all. Under some (undetermined) conditions FB.getLoginStatus() just stops working and won't invoke the callback I gave it.

-------------

This usually happens for me when I am running the page under a different domain from what has been registered in Facebook. Typically this is when I am developing locally.

If you are running locally, you'll have to set up a local web server and then modify your hosts file to point the the registered domain to 127.0.0.1 in order to test on your local machine. Don forget to remove that line from the hosts file when you want to test it on the server.

----

Yes yes yes! Finally. I had created a facebook app ages ago, but didn't ever get around to changing the URL. Shame on FB for not providing a useful error message.

-------------

According to:

https://developers.facebook.com/bugs/240058389381072

You cannot put your application under sandbox mode, or else it won't work. Go into your app settings, advanced, and switch it. This stumped me for a couple hours until I happened upon the bug report.

-------------

I had similar problem with FB API. It turned out, that my Facebook App was misconfigured. Please make sure that this is not the case for you. My problem was that my "Site URL" param in FB application was pointing to https, but I was using http protocol for development. Any call against FB api after FB.init was not calling my callback functions. So the first thing to do should be to double check App config.

Now, if some reason you depend on FB api but you wish to have a fallback option in case it is inoperative - workaround with timer should be ok for you. Just set up a timer and disable it if FB Api gives you proper response. If not - fallback to some custom function which will perform some additional logic.

 function callFbApi() {
    var timeoutHandler = setTimeout(function() { requestFailed(); }, 1000);

    function requestFailed() {
        // When this happens, it means that FB API was unresponsive
        doSomeFallbackWork();
        alert('hey, FB API does not work!');
    }

    FB.getLoginStatus(function(response) {
        clearTimeout(timeoutHandler); // This will clear the timeout in case of proper FB call
        doSomeUsualWorkAfterFbReplies();

        return false;
    }, true);
 }

-------------

If your application is in sandbox mode, Facebook acts as if your application is invisible to anyone who is not listed as an application developer. If you're not logged in, then it would stand to reason that your app is now invisible.

The callback will only fire if you're initializing with a visible application. Otherwise the following response is returned:

<span>Application Error: There was a problem getting data for the application you requested. The application may not be valid, or there may be a temporary glitch. Please try again later. </span>

For more info please see my comment on this bug ticket: https://developers.facebook.com/bugs/240058389381072

-------------

In Facebook App Settings, go to Client OAuth Settings, look at Valid OAuth redirect URIs

Make sure you have listed all URIs which are the domains from which Facebook SDK is being invoked. For example:

(image is here)

I develop at localhost:5000 and deploy to Heroku. Notice the format: http://domain.name/

********************************************************************
http://stackoverflow.com/questions/26767150/stripe-is-it-possible-to-search-a-customer-by-their-email

Stripe, is it possible to search a customer by their email?

You need to retrieve and store the Stripe customer ID along with the other customer details in your database. You can then search for the email address in your database and retrieve the customer record from Stripe by using the Stripe customer ID.

---------------

I done by this API request.This API not available in stripe docs.I get their search request at dashboard customize according my requirements.

    url :https://api.stripe.com/v1/search?query="+email+"&prefix=false",
    method: GET
    headers: {
      "authorization": "Bearer Your_seceret Key",
      "content-type": "application/x-www-form-urlencoded",
    }

---------------

Since you specified that

The documentation only indicate to search by created, ending_before, limit and starting_after, but no "email".
You are right, you can't search using emails.

If you still wish to do that, What you can do instead is to get a list of all the customer and filter on the response you get using email.

For Example, in ruby you can do it as follows:

customers = Stripe::Customer.all

customer_i_need = customers.select do |c|
  c.email == "foo@bar.com"
end
PS: Stripe can have multiple customers associated with one email address.

---------------

Stripe API does not supports any search-by-email feature. They have this search in their dashboard but not released any to API; from the architectural concept it seems that there is no possibility or plan from stripe to include this in API; every object in their API is retrievable only by that specific objects id given by stripe while its created. May be, they have kept it as a scope for third party application developers involvement!!

So, the obvious solution is to store the customers in your own database that you want to be searchable in future - as Simeon Visser has said above

btw, for a workaround, if you already have used the stripe API a lot and there are many customer data which you now need to be searchable - the only way is to go thru the 'List all customers' functionality of API & build the database for your own purpose; ofcourse, you've to use pagination shortcut to iterate thru the whole list for doing so.

$customers = \Stripe\Customer::all(array("limit" => 3));
foreach ($customers->autoPagingIterator() as $customer) {
  // Do something with $customer
}
********************************************************************
https://support.stripe.com/questions/can-i-save-a-card-and-charge-it-later

Can I save a card and charge it later?

I’d like to be able to store card details, so returning users can click “Buy Now” and not have to re-enter their card number. Is there a way to do something like this with Stripe?

-----------

There are two ways: 1) from your dashboard, and 2) with our API.

First, from your dashboard: You can store card details and charge them later by creating a customer from your Customers tab and clicking “+ New.” Once you’ve created a customer, you can view the customer details and click “Add card.” This will allow you to return and charge the card at a later date using the “+ Create Payment” link.

Second, with our API: You just need to attach the card details to a customer object. Once you’ve done that, you can charge the customer at any time.

Here’s some sample Ruby code:

# get the credit card details submitted by the form or app
token = params[:stripeToken]

# create a Customer
customer = Stripe::Customer.create(
  card: token,
  description: 'description for payinguser@example.com',
  email: 'payinguser@example.com'
)

# charge the Customer instead of the card
Stripe::Charge.create(
    amount: 1000, # in cents
    currency: 'usd',
    customer: customer.id
)

# save the customer ID in your database so you can use it later
save_stripe_customer_id(user, customer.id)

# later
customer_id = get_stripe_customer_id(user)

Stripe::Charge.create(
    amount: 1500, # $15.00 this time
    currency: 'usd',
    customer: customer_id
)

********************************************************************
http://stackoverflow.com/questions/31664313/aws-lambda-function-is-returning-cannot-find-module-index-yet-the-handler-in

(shows steps to create zip file for use by lambda function)
********************************************************************
https://forums.aws.amazon.com/thread.jspa?threadID=181471

(issue of module not found in lambda function)
********************************************************************
https://stripe.com/docs/elements#create-token

Create a token to securely transmit card information

The payment details collected using Elements can then be converted into token. Create an event handler that handles the submit event on the form. The handler sends the fields to Stripe for tokenization and prevents the form’s submission (the form is submitted by JavaScript in the next step).

// Create a token or display an error the form is submitted.
stripe.createToken(card).then(function(result)
{
    if (result.error)
    {
        // Inform the user there was an error
        var errorElement = document.getElementById('card-errors');
        errorElement.textContent = result.error.message;
    }
    else
    {
        // Send the token to your server
        stripeTokenHandler(result.token);
    }
});

stripe.createToken returns a Promise which resolves with a result object. This object has either:
result.token: a Token was created successfully.
result.error: there was an error. This includes client-side validation errors.
********************************************************************
http://dev.splunk.com/view/event-collector/SP-CAAAE6Z

(example of how to build Lambda deployment package -- the ZIP file)

Upload the deployment package

When you've got your deployment ZIP, you're ready to upload it to AWS Lambda.

- Log into the AWS Lambda Console, and then click Create a Lambda function.
- On the Select blueprint page, click Skip.
- On the Configure function page, enter a name for the function. This should be the same value as the name key's value in the package.json file.
- Enter a short description next to Description, and leave the Runtime pop-up menu set to Node.js.
- Under Lambda function code, choose upload a ZIP file, and then click the Upload button. Upload your deployment ZIP.
- Under Lambda function handler and role, enter the module-name.export value. If you've left the handler name as exports.handler, then leave the value as index.handler. In the Role pop-up menu, choose or create a role (likely lambda_basic_execution).
- Finally, leave the Advanced settings section untouched, and then click Next.
- On the Review page, review your settings. If you have to make any changes, click the Edit button. When you're done, click Create function.
********************************************************************
https://forums.aws.amazon.com/thread.jspa?messageID=706444

For anyone who runs into this issue into the future... Make sure that you are specifying the correct "Handler" in the configuration of your lambda function.

If you have a single js or py file in your zip container (such as "my_script.js", you must specify in the Handler field in the configuration of your Lambda function, "my_script.handler" or "my_script.function_name". This will allow you to view that single file within the inline editor in the Lambda console.
********************************************************************
https://pippinsplugins.com/stripe-integration-part-7-creating-and-storing-customers/

Stripe Integration Part 7 – Creating and Storing Customers

Anytime a recurring payment is created, a customer is created. This is because a customer is required in order to setup recurring billing. We created our customer like this:

PHP code
--------
$customer = Stripe_Customer::create(array(
        'card' => $token,
        'plan' => $plan_id,
        'email' => strip_tags(trim($_POST['email']))
    )
);

NOTE USE OF PLAN PROPERTY -- will this automatically create a subscription?  or is this an older version of Stripe?

********************************************************************
https://www.wufoo.com/2014/04/24/stripe-subscription-billing-is-here/

(example of working with Stripe subscriptions)
(example of house cleaning company)
********************************************************************
https://rails.devcamp.com/ruby-gem-walkthroughs/payment/how-to-implement-subscriptions-in-stripe
********************************************************************
http://stackoverflow.com/questions/38855268/external-promises-dont-trigger-angular2-change-detection-update-they-do

(problem with change detection with data changed in a promise)

Promises don't make Angular run change detection with ChangeDetectionStrategy.OnPush except when you use the async pipe ... | async.

When code is initialized outside Angular2 it runs outside Angulars zone. What you can do is to move initialization inside your Angular2 code or use ´zone.run(...)to move execution inside Angulars zone. There is nothing bad about zone.run(...)`.

If the code executed only changes local properties of a component you can use ChangeDetectorRef.detectChanges() to run change detection for this component.

If the code causes changes in other components (like for example this.router.navigate(...), then detectChanges() is not sufficient. For this case zone.run() should be used.

setTimeout(...) triggers change detection for the whole application and should be avoided as a way to invoke change detection manually.
********************************************************************
https://www.lucidchart.com/techblog/2016/05/04/angular-2-best-practices-change-detector-performance/

But almost nothing is changing!

Why should the change detector be chewing up so much CPU when almost nothing is changing from one Javascript execution to the next? Well, you the programmer know that almost nothing has changed, but Angular 2 needs to empirically determine that each and every time, for every single piece of updateable DOM in your application. For a very detailed explanation of what’s going on, I recommend this excellent Thoughtram post.

At this point, there are three things you can do, and you should do all of them:

Have less DOM. This is a critically important piece of the puzzle. If DOM elements aren’t visible, you should remove them from the DOM by using *ngIf instead of simply hiding elements with CSS. As the saying goes, the fastest code is code that is not run—and the fastest DOM is DOM that doesn’t exist.
Make your expressions faster. Move complex calculations into the ngDoCheck lifecycle hook, and refer to the calculated value in your view. Cache results to complex calculations as long as possible.
Use the OnPush change detection strategy to tell Angular 2 there have been no changes. This lets you skip the entire change detection step on most of your application most of the time.

OnPush change detection strategy

By default, the change detection strategy on any component or directive is CheckAlways. There is another strategy, OnPush, which can be much more efficient if you build your application carefully.

OnPush means that the change detector will only run on a component or directive if one of the following occurs:

- An input property has changed to a new value
- An event handler fired in the component or directive
- You manually tell the change detector to look for changes
- The change detector of a child component or directive runs
- If you’re able to use OnPush throughout your application, you will ideally only ever run the change detector on components that have actually changed (and their direct ancestors). This reduces the time complexity of the change detector from O(n) to O(log n) in the number of component instances in your application.

There are two ways to prepare a component or directive for OnPush: Using immutable inputs, or using observable inputs.

Method 1: Only use immutable inputs

When you use OnPush, the change detector will run whenever an input property changes. However, if you pass an object or array as an input to a component (which is very common), the change detector will not notice if something in that object or array changes. It only detects when you change to a different object entirely.

The simplest way to make OnPush work perfectly is to use immutable objects throughout a component. If you change an object you are passing to a component, don’t change its properties in place; rather, construct a copy with the change applied. That way Angular 2 can see you’ve changed an input and adjust your DOM accordingly.

Method 2: Only use observable inputs and injectables

If you can reliably listen for when your data changes, then you can manage when the change detector runs yourself. It doesn’t matter if you’re using something like RxJS’s Observables, or if you roll your own change management system, as long as you are notified every time your data changes.
********************************************************************
http://stackoverflow.com/questions/34615425/how-to-watch-for-form-changes-in-angular-2

To complete a bit more previous great answers, you need to be aware that forms leverage observables to detect and handle value changes. It's something really important and powerful. Both Mark and dfsq described this aspect in their answers.

Observables allow not only to use the subscribe method (something similar to the then method of promises in Angular 1). You can go further if needed to implement some processing chains for updated data in forms.

I mean you can specify at this level the debounce time with the debounceTime method. This allows you to wait for an amount of time before handling the change and correctly handle several inputs:

this.form.valueChanges
    .debounceTime(500)
    .subscribe(data => console.log('form changes', data));
You can also directly plug the processing you want to trigger (some asynchronous one for example) when values are updated. For example, if you want to handle a text value to filter a list based on an AJAX request, you can leverage the switchMap method:

this.textValue.valueChanges
    .debounceTime(500)
    .switchMap(data => this.httpService.getListValues(data))
    .subscribe(data => console.log('new list values', data));
You even go further by linking the returned observable directly to a property of your component:

this.list = this.textValue.valueChanges
    .debounceTime(500)
    .switchMap(data => this.httpService.getListValues(data))
    .subscribe(data => console.log('new list values', data));
and display it using the async pipe:

<ul>
  <li *ngFor="#elt of (list | async)">{{elt.name}}</li>
</ul>
Just to say that you need to think the way to handle forms differently in Angular2 (a much more powerful way
********************************************************************
https://stripe.com/docs/dashboard

API keys

Related to these universes are your API keys, available through the Dashboard. Each key exists either in the live universe or in the test universe, and this is how Stripe tells what universe you are interacting with. You should only use your test API keys for testing. This will make sure that you don't accidentally modify your live customers or charges.

If you cannot see your API keys in the Dashboard, this means that you are not an administrator for the account, and have only Read & Write or Read Only access. You will need to contact your Stripe account's administrator to request access to view the API keys.

In addition to live and test mode, there are also two types of API keys: publishable and secret.

- Publishable API keys are meant solely to identify your account with Stripe, they aren't secret. In other words, they can safely be published in places like your Stripe.js JavaScript code, or in an Android or iPhone app. Publishable keys only have the power to create tokens.

- Secret API keys should be kept confidential and only stored on your own servers. Your account's secret API key can perform any API request to Stripe without restriction.
********************************************************************
https://support.stripe.com/questions/can-i-pay-out-sellers-with-the-funds-i-collect-from-stripe

Can I pay out my vendors, contractors, or service providers with the funds I collect from Stripe?

Yes! You can can arrange for payment to third parties, anywhere where Stripe is available, using Stripe Connect.

Through Stripe Connect, your platform can interact with both standalone and managed Stripe accounts. The first decision you need to make when using Connect is which type of account you will connect to (though you are welcome to simultaneously interact with both types, if you so choose).

If you decide to support managed Stripe accounts, in which you fully control the relationship with your payees, it’s worth noting that you will be responsible for interacting with your accounts. This includes:

- collecting the information we need to verify the sellers and determine whether the seller
- can be supported by Stripe, and to make sure they get their money
- building any reporting interfaces for them
- sending any necessary tax reporting

We’ll help you with all of these responsibilities through the various tools that we provide via the API, but you ultimately own the relationship with your sellers.
********************************************************************
https://support.stripe.com/questions/can-i-enable-my-users-to-receive-payments-from-others

Can I enable my users to receive payments from others?

For example, with marketplaces, SaaS payment services, crowdfunding campaigns, or donation portals.

Yes! We’ve created Stripe Connect for exactly these use cases.

With Stripe Connect, you can accept payments for your users without being involved in the flow of funds. When your users “Connect with Stripe”, they’ll be prompted to connect their existing Stripe account or frictionlessly create their own, and you’ll have access to their account to make API calls for them.

For example, Shopify, Squarespace, and Bigcommerce help their users easily create online storefronts and integrate with Stripe Connect to handle store payments.

Since the transactions are being run on your users' individual accounts, this means that:

- No funds flow through your accounts (except if you’d like to take a cut of the transaction), so you’re not held responsible for any refunds or chargebacks.

- Stripe will underwrite your sellers and take care of all tax reporting (namely, 1099-K’s for accounts that qualify).

- Stripe will keep track of how much is owed to each individual user and automatically transfer funds to them on the schedule listed in their dashboard.

- Your users will have access to the Stripe dashboard for reporting and analytics needs.

However, you can still:

- Take a cut of each transaction with application fees. All you need to do is specify the amount; we’ll take care of making sure both you and your vendor are paid.

- Share customers across sellers; this is perfect for marketplaces or other services that need customers to purchase from multiple sellers at once.
********************************************************************
https://stripe.com/connect

Easy setup for sellers and contractors

Use Connect to spin up accounts and enable payments for your sellers, vendors, contractors, or fleet—with as much custom control over the experience as you’d like.

Lightweight setup
Connect your platform to thousands of existing Stripe sellers, or create new accounts with just an email address. We only need more details when it’s time to deposit funds.

Custom flows for sellers
Alternatively, you can have sellers provide payment info in your app, and you manage their accounts entirely via the API. Stripe stays out of the way.

Secure bank transfers
Sellers can connect to your platform via OAuth, or you can collect their bank account details securely with Stripe.js — sensitive data never hits your servers.
********************************************************************
https://stripe.com/docs/connect/managed-accounts
https://stripe.com/docs/connect/standalone-accounts
********************************************************************
https://support.stripe.com/questions/bank-account-and-payouts

Setting up your bank account and receiving payouts

In order to receive the funds from your charges, you’ll need to associate a bank account to your Stripe account and start receiving payouts. You can update your bank account information at any time, and you can also customize how frequently payouts are made.

Setting Up & Modifying Your Bank Account

Setting Up Your Bank Account for Payouts
Associating Multiple Bank Accounts for Different Currencies
Bank Accounts with Multiple Signors
Viewing Your Bank Account Information in Dashboard
Updating Your Bank Account Information

Payout Schedules

Your First Payout
Minimum Volume Thresholds Before Payouts
Automatic Payouts
Payout Failures
Alternative Payout Schedules

Setting Up Your Bank Account For Payouts

To receive payouts from Stripe, you’ll need to provide us with bank account details so that we know where to send your funds. The type of information required for a successful payout depends on where your bank is based.
********************************************************************
http://stackoverflow.com/questions/26767150/stripe-is-it-possible-to-search-a-customer-by-their-email

Using the Stripe API, I was wondering if it was possible to search a customer only by their email address?

----------

You need to retrieve and store the Stripe customer ID along with the other customer details in your database. You can then search for the email address in your database and retrieve the customer record from Stripe by using the Stripe customer ID.

********************************************************************
https://stormpath.com/blog/how-to-add-billing-to-your-api-with-stripe-stormpath-and-node-js

(includes illustration of how to set up email verification -- user is not authenticated until they reply to your email notification)

Revoke Access When a User Fails to Pay

Once your service blows up in popularity, it will become increasingly annoying to manually update every Account that stops paying. Stripe webhooks are a great way to automate this process. In our case, we want to setup a webhook that fires off whenever a customer’s subscription is deleted.
********************************************************************
https://stripe.com/docs/webhooks


********************************************************************
http://stackoverflow.com/questions/5643321/how-to-make-remote-rest-call-inside-node-js-any-curl

In Node.js, other than using child process to make CURL call, is there a way to make CURL call to remote server REST API and get the return data?

I also need to set up the request header to the remote REST call, and also query string as well in GET (or POST).

--------------

Look at http.request

var options = {
  host: url,
  port: 80,
  path: '/resource?id=foo&bar=baz',
  method: 'POST'
};

http.request(options, function(res) {
  console.log('STATUS: ' + res.statusCode);
  console.log('HEADERS: ' + JSON.stringify(res.headers));
  res.setEncoding('utf8');
  res.on('data', function (chunk) {
    console.log('BODY: ' + chunk);
  });
}).end();

--------------

I use node-fetch because it uses the familiar (if you are a web developer) fetch() API. fetch() is the new way to make arbitrary HTTP requests from the browser.

Yes I know this is a node js question, but don't we want to reduce the number of API's developers have to memorize and understand, and improve re-useability of our javascript code? Fetch is a standard so how about we converge on that?

The other nice thing about fetch() is that it returns a javascript Promise, so you can write async code like this:

let fetch = require('node-fetch');

fetch('http://localhost', {
  method: 'POST',
  headers: {'Content-Type': 'application/json'},
  body: '{}'
}).then(response => {
  return response.json();
}).catch(err => {console.log(err);})
);

Fetch supersedes XMLHTTPRequest. Here's some more info.
********************************************************************
https://www.npmjs.com/package/node-fetch

Motivation

Instead of implementing XMLHttpRequest in Node.js to run browser-specific Fetch polyfill, why not go from native http to Fetch API directly? Hence node-fetch, minimal code for a window.fetch compatible API on Node.js runtime.

API
fetch(url, options)  // returns a Promise

Install
npm install node-fetch --save

Usage
var fetch = require('node-fetch');

// plain text or html
fetch('https://github.com/')
    .then(function(res) {
        return res.text();
    }).then(function(body) {
        console.log(body);
    });

// json
fetch('https://api.github.com/users/github')
    .then(function(res) {
        return res.json();
    }).then(function(json) {
        console.log(json);
    });
********************************************************************
We solved the "dynamic" forms problem with Qpop (in RepairQ)

See the following files:

customForm.component.html <= html markup for custom form page
customForm.component.ts <= component/model for the dynamic form
dynamicFormQuestion.component.js <= dynamic form field component, which is injected once per dynamic form field in customForm.component.html
questionBase.ts <= field base class
questionCrs.ts <= extends questionBase
********************************************************************
https://repairq.dapulse.com/
dave.r.eland@gmai.com
a_77
********************************************************************
https://github.com/jethfo/RepairQ.git

Master branch

/app/protected/qpop

$ git clone https://github.com/jethfo/RepairQ.git
********************************************************************
http://stackoverflow.com/questions/33700266/how-can-i-get-new-selection-in-select-in-angular-2

If you don't need two-way data-binding:

<select (change)="onChange($event.target.value)">
    <option *ngFor="let i of devices">{{i}}</option>
</select>

onChange(deviceValue) {
    console.log(deviceValue);
}
For two-way data-binding, separate the event and property bindings:

<select [ngModel]="selectedDevice" (ngModelChange)="onChange($event)" name="sel2">
    <option [value]="i" *ngFor="let i of devices">{{i}}</option>
</select>
export class AppComponent {
  devices = 'one two three'.split(' ');
  selectedDevice = 'two';
  onChange(newValue) {
    console.log(newValue);
    this.selectedDevice = newValue;
    // ... do other stuff here ...
}
If devices is array of objects, bind to ngValue instead of value:

<select [ngModel]="selectedDeviceObj" (ngModelChange)="onChangeObj($event)" name="sel3">
  <option [ngValue]="i" *ngFor="let i of deviceObjects">{{i.name}}</option>
</select>
{{selectedDeviceObj | json}}
export class AppComponent {
  deviceObjects = [{name: 1}, {name: 2}, {name: 3}];
  selectedDeviceObj = this.deviceObjects[1];
  onChangeObj(newObj) {
    console.log(newObj);
    this.selectedDeviceObj = newObj;
    // ... do other stuff here ...
  }
}

--------------

You can pass the value back into the component by creating a reference variable on the select tag #device and passing it into the change handler onChange($event, device.value) should have the new value

<select [(ng-model)]="selectedDevice" #device (change)="onChange($event, device.value)">
    <option *ng-for="#i of devices">{{i}}</option>
</select>

onChange($event, deviceValue) {
    console.log(deviceValue);
}

--------------

Another option is to store the object in value as a string:

<select [ngModel]="selectedDevice | json" (ngModelChange)="onChange($event)">
    <option [value]="i | json" *ngFor="let i of devices">{{i}}</option>
</select>
component:

onChange(val) {
    this.selectedDevice = JSON.parse(val);
}

This was the only way I could get two way binding working to set the select value on page load. This was because my list that populates the select box was not the exact same object as my select was bound to and it needs to be the same object, not just same property values.
********************************************************************
http://stackoverflow.com/questions/37968712/angular-2-setting-selected-value-on-dropdown-list

Thanks for the tip Günter, it got me moving in the right direction. There was a mis-matched spelling of 'color' in my solution which was causing issues and I needed to use 'ngValue' not 'value' in the template html.

Here is the complete solution using objects for the ngModel and select list options and avoiding use of the [selected] attribute.

I have updated the Plunker to show the full working solution. https://plnkr.co/edit/yIVEeLK7PUY4VQFrR48g?p=preview

Component template

 <div>
        <label>Colour</label>
        <div *ngIf="car != null">
            <select [(ngModel)]="car.colour">
                <option *ngFor="let x of colours" [ngValue]="x" >{{x.name}}</option>
            </select>
        </div>
    </div>
Component

import { Component, OnInit } from '@angular/core';
import {AbstractControl,FORM_DIRECTIVES } from '@angular/common';

@Component({
    selector:'dropdown',
    templateUrl:'app/components/dropdown/dropdown.component.html',
    directives:[FORM_DIRECTIVES]
})
export class DropdownComponent implements OnInit
{
    car:Car;
    colours: Array<Colour>;

    ngOnInit(): void {

        this.colours = Array<Colour>();
        this.colours.push(new Colour(-1, 'Please select'));
        this.colours.push(new Colour(1, 'Green'));
        this.colours.push(new Colour(2, 'Pink'));

        this.car = new Car();
        this.car.colour = this.colours[1];
    }
}

export class Car
{
    colour:Colour;
}

export class Colour
{
    constructor(id:number, name:string) {
        this.id=id;
        this.name=name;
    }

    id:number;
    name:string;
}
********************************************************************
http://stackoverflow.com/questions/35945001/binding-select-element-to-object-in-angular-2

I'm new to Angular2 and trying to get up to speed with the new way of doing things.

I'd like to bind a select element to a list of objects -- which is easy enough:

@Component({
   selector: 'myApp',
   template: `<h1>My Application</h1>
              <select [(ngModel)]="selectedValue">
                 <option *ngFor="#c of countries" value="c.id">{{c.name}}</option>
              </select>`
})
export class AppComponent{
    countries = [
       {id: 1, name: "United States"},
       {id: 2, name: "Australia"}
       {id: 3, name: "Canada"}
       {id: 4, name: "Brazil"}
       {id: 5, name: "England"}
     ];
    selectedValue = null;
}
In this case, it appears that selectedValue would be a number -- the id of the selected item.

However, I'd actually like to bind to the country object itself so that selectedValue is the object rather than just the id. I tried changing the value of the option like so:

<option *ngFor="#c of countries" value="c">{{c.name}}</option>
but this does not seem to work. It seems to place an object in my selectedValue -- but not the object that I'm expecting. You can see this in my Plunker example.

I also tried binding to the change event so that I could set the object myself based on the selected id; however, it appears that the change event fires before the bound ngModel is updated -- meaning I don't have access to the newly selected value at that point.

Is there a clean way to bind a select element to an object with Angular 2?

--------------

<h1>My Application</h1>
<select [(ngModel)]="selectedValue">
  <option *ngFor="let c of countries" [ngValue]="c">{{c.name}}</option>
</select>
Plunker example

NOTE: you can use [ngValue]="c" instead of [ngValue]="c.id" where c is the complete country object.

[value]="..." only supports string values
[ngValue]="..." supports any type

update

If the value is an object, the preselected instance needs to be identical with one of the values.

--------------

This could help:

<select [(ngModel)]="selectedValue">
      <option *ngFor="#c of countries" [value]="c.id">{{c.name}}</option>
</select>

--------------

You Can Select the Id using a Function

<option *ngFor="#c of countries" (change)="onchange(c.id)">{{c.name}}</option>

********************************************************************
http://stackoverflow.com/questions/35241634/angular2-nested-ngfor

Angular2 nested ngFor


I have a sample that might be similar to what you want:

<table id="spreadsheet">
    <tr *ngFor="let row of visibleRows">
        <td class="row-number-column">{{row.rowIndex}}</td>
        <td *ngFor="let col of row.columns">
            <input  data-id="{{col.rowIndex}}-{{col.columnIndex}}" [value]="col.cellValue" (input)="col.cellValue = $event.target.value" (click)="model.selectColumn(col)" (keyup)="navigate($event)" />
        </td>
    </tr>
</table>
I use this to render out a spreadsheet looking grid.

-----------------

Use the 'template' form of the ngFor syntax, seen here. It's a bit more verbose than the simpler *ngFor version, but this is how you achieve looping without output of html (until you intend to). One exception: you'll still get html comments within your <table> but I'm hoping that's ok. Here's a working plunkr: http://plnkr.co/edit/KLJFEQlwelPJfNZYVHrO?p=preview

@Component({
  selector: 'my-app',
  providers: [],
  directives: [],
  template: `
  <table>
    <template ngFor #something [ngForOf]="somethings" #i="index">
      <template ngFor #child [ngForOf]="something.children" #j="index">
      <tr>{{child}}</tr>
      </template>
    </template>
  </table>
  `
})
export class App {
  private somethings: string[][] = [
    {children: ['foo1', 'bar1', 'baz1']},
    {children: ['foo2', 'bar2', 'baz2']},
    {children: ['foo3', 'bar3', 'baz3']},
  ]
}

-----------------

If you need 2 or more foreach loops to draw rows of a table you need to do similar to the following.

<template ngFor let-rule [ngForOf]="model.rules" let-ruleIndex="index">
    <template ngFor let-clause [ngForOf]="rule.clauses" let-clauseIndex="index">
        <tr>
            <td>{{clause.name}}</td>
        </tr>
    </template>
</template>

-----------------

I misunderstood your question.
No this doesn't work. You can't put ngFor on void. Instead prepare the data model in the components class, so that a nested ngFor isn't necessary.

********************************************************************
http://stackoverflow.com/questions/41274129/angular2-nested-ngfor-is-nested-expressions-possible

Angular2 nested ngFor. Is nested expressions possible?

I'm trying to use a value in an expression binding. I know this isn't valid but want to know if something similar is possible. If not, is there another way to go about it.

import { Component, OnInit } from '@angular/core';

@Component({
selector: 'Home',
templateUrl: './views/home/home.html'
})
export class HomeComponent implements OnInit{

    rows = [
       { 'FirstName': 'John', 'LastName': 'Doe' },
       { 'FirstName': 'Ashley', 'LastName': 'Doe' }
    ];

    cols = [
       { 'Desc': 'First Name', 'Data': 'FirstName' },
       { 'Desc': 'Last Name', 'Data': 'LastName' }
    ];
}
home.html

<table>
  <thead>
    <tr>
      <th *ngFor="let col of cols">{{col.Desc}}</th>
    </tr>
  </thead>
  <tr *ngFor="let row of rows">
    <td *ngFor="let col of cols">
      {{row.{{col.Data}}}}
    </td>
  </tr>
</table>

---------------

Use it like this:

{{ row[col.Data] }}
In Javascript you can access every property via obj.propName AND obj[propName], too!

********************************************************************
http://stackoverflow.com/questions/35699962/how-to-use-angular2-templates-with-ngfor-to-create-a-table-out-of-nested-arrays

Given the following array in component property groups:

[
   {
     "name": "pencils",
     "items": ["red pencil","blue pencil","yellow pencil"]
   },
   {
     "name": "rubbers",
     "items": ["big rubber","small rubber"]
   },
]
How to create a html table with all items, each in one row? The expected HTML result:

<table>
    <tr><td><h1>pencils</h1></td></tr>
    <tr><td>red pencil</td></tr>
    <tr><td>blue pencil</td></tr>
    <tr><td>yellow pencil</td></tr>
    <tr><td><h1>rubbers</h1></td></tr>
    <tr><td>big rubber</td></tr>
    <tr><td>small rubber</td></tr>
</table>
The first level is easy:

<table>
    <tr *ngFor="#group of groups">
        <td><h1>{{group.name}}</h1></td>
    </tr>
</table>
But now I have to iterate #item of group. The problem is that I need the new <tr> elements after the </tr> element which defines group, not inside.

Is there any solution for this kind of problems in Angular2 templating? I would expect some special tag which I could use instead of <tr> which is not written into the dom. Something similar to facets and fragments in JSF.

---------------

You can use the template syntax of ngFor on groups and the usual syntax inside it for the actual rows like:

<table>
  <template let-group ngFor [ngForOf]="groups">
    <tr *ngFor="let row of group.items">{{row}}</tr>
  </template>
</table>

---------------

Try this. The scope of local variables defined by "template" directive.

<table>
  <template ngFor let-group="$implicit" [ngForOf]="groups">
    <tr>
      <td>
        <h2>{{group.name}}</h2>
      </td>
    </tr>
    <tr *ngFor="let item of group.items">
                <td>{{item}}</td>
            </tr>
  </template>
</table>

---------------

I am a fan of keeping logic out of the template as much as possible. I would suggest creating a helper function that returns the data that you care about to the template. For instance:

getItemsForDisplay():String[] {
 return [].concat.apply([],this.groups.map(group => group.items));
};
<tr *ngFor="let item of getItemsForDisplay()"><td>{{item}}</td></tr>

This will let you keep your presentation free of special logic. This also lets you use your datasource "directly".

---------------

This worked for me.

<table>
  <tr>
    <td *ngFor="#group of groups">
       <h1>{{group.name}}</h1>
   </td>
  </tr>
</table>

********************************************************************
http://stackoverflow.com/questions/36469710/angular-2-ngmodel-bind-in-nested-ngfor

I'm attempting convert an Angular 1 app to Angular 2. Looping through a jagged array of booleans (boolean[][]). I'm rendering out checkboxes with the following code:

<div *ngFor="#cell of CellData; #parentIndex = index">
    <input *ngFor="#col of cell; #childIndex = index" type="checkbox" [(ngModel)]="CellData[parentIndex][childIndex]" />
</div>
The checkboxes display correctly, however, if I select a checkbox the one to the right of it is also selected.

This logic works fine in the Angular 1 app so I'm not sure if it's a problem with the way I am using ngModel or an issue with Angular 2.

Any help would be much appreciated

-----------------

update
------
The official way to use ngForTrackBy seems to be

      <input
          *ngFor="let col of cell; let childIndex=index; trackBy:customTrackBy"
          type="checkbox"
          [(ngModel)]="CellData[parentIndex][childIndex]" />

See http://angularjs.blogspot.co.at/2016/04/5-rookie-mistakes-to-avoid-with-angular.html for more details

note the : in trackBy:customTrackBy

original
--------
You can use *ngForTrackBy for this:

@Component({
  selector: 'my-app',
  template: `
    <div *ngFor="let cell of CellData; let parentIndex = index">
      <input
          *ngFor="let col of cell; let childIndex = index" type="checkbox"
          *ngForTrackBy="customTrackBy"
          [(ngModel)]="CellData[parentIndex][childIndex]" />
    </div>

    Data:<br/><br/>
    {{CellData | json}}
  `
})
export class AppComponent {
  constructor() {
    this.CellData = [
      [ true, false, true, false ],
      [ false, true, false, true ]
    ]
  }

  customTrackBy(index: number, obj: any): any {
    return index;
  }
}

Angular by default tracks the object identity but different trues and falses have the same identity. Without *ngForTrackBy Angular looses track which true or false is at which position. With *ngForTrackBy="customTrackBy" we make *ngFor use the index instead of object identity.

********************************************************************
https://webcake.co/object-properties-in-angular-2s-ngfor/

Looping Over Object Properties in Angular 2’s ngFor

(illustrates mapping of keys; using a pipe)

********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
********************************************************************
